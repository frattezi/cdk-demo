"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const appsync = require("@aws-cdk/aws-appsync");
const dynamodb = require("@aws-cdk/aws-dynamodb");
const path_1 = require("path");
const aws_appsync_1 = require("@aws-cdk/aws-appsync");
exports.setupAppsync = (app, id) => {
    const api = new appsync.GraphQLApi(app, `Api`, {
        name: `userDemoApi`,
        authorizationConfig: {
            defaultAuthorization: {
                apiKeyDesc: 'DemoKey',
            },
        },
        schemaDefinitionFile: path_1.join(__dirname, 'schema.graphql'),
    });
    const usersTable = new dynamodb.Table(app, `UsersTable`, {
        partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING }
    });
    const userDS = api.addDynamoDbDataSource('User', 'The user data source', usersTable);
    userDS.createResolver({
        typeName: 'Query',
        fieldName: 'getUser',
        requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbGetItem('id', 'id'),
        responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
    });
    userDS.createResolver({
        typeName: 'Query',
        fieldName: 'getUsers',
        requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbScanTable(),
        responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultList(),
    });
    userDS.createResolver({
        typeName: 'Mutation',
        fieldName: 'addUser',
        requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbPutItem(aws_appsync_1.PrimaryKey.partition('id').auto(), aws_appsync_1.Values.projecting('user')),
        responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
    });
    userDS.createResolver({
        typeName: 'Mutation',
        fieldName: 'deleteUser',
        requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbDeleteItem('id', 'id'),
        responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
    });
    api.addDynamoDbDataSource(`Dynamo`, 'Database for UserDemo', usersTable);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwc3luYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwcHN5bmMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxnREFBZ0Q7QUFDaEQsa0RBQWtEO0FBQ2xELCtCQUEyQjtBQUMzQixzREFBMkU7QUFFOUQsUUFBQSxZQUFZLEdBQUcsQ0FBQyxHQUFrQixFQUFFLEVBQVUsRUFBRSxFQUFFO0lBQzdELE1BQU0sR0FBRyxHQUFHLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFO1FBQzdDLElBQUksRUFBRSxhQUFhO1FBQ25CLG1CQUFtQixFQUFFO1lBQ25CLG9CQUFvQixFQUFFO2dCQUNwQixVQUFVLEVBQUUsU0FBUzthQUN0QjtTQUNGO1FBQ0Qsb0JBQW9CLEVBQUUsV0FBSSxDQUFDLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQztLQUN4RCxDQUFDLENBQUM7SUFFSCxNQUFNLFVBQVUsR0FBRyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRTtRQUN2RCxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRTtLQUNsRSxDQUFDLENBQUM7SUFFSCxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMscUJBQXFCLENBQUMsTUFBTSxFQUFFLHNCQUFzQixFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRXJGLE1BQU0sQ0FBQyxjQUFjLENBQUM7UUFDcEIsUUFBUSxFQUFFLE9BQU87UUFDakIsU0FBUyxFQUFFLFNBQVM7UUFDcEIsc0JBQXNCLEVBQUUsNkJBQWUsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztRQUNuRSx1QkFBdUIsRUFBRSw2QkFBZSxDQUFDLGtCQUFrQixFQUFFO0tBQzlELENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxjQUFjLENBQUM7UUFDcEIsUUFBUSxFQUFFLE9BQU87UUFDakIsU0FBUyxFQUFFLFVBQVU7UUFDckIsc0JBQXNCLEVBQUUsNkJBQWUsQ0FBQyxpQkFBaUIsRUFBRTtRQUMzRCx1QkFBdUIsRUFBRSw2QkFBZSxDQUFDLGtCQUFrQixFQUFFO0tBQzlELENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxjQUFjLENBQUM7UUFDcEIsUUFBUSxFQUFFLFVBQVU7UUFDcEIsU0FBUyxFQUFFLFNBQVM7UUFDcEIsc0JBQXNCLEVBQUUsNkJBQWUsQ0FBQyxlQUFlLENBQ3JELHdCQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUNqQyxvQkFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FDMUI7UUFDRCx1QkFBdUIsRUFBRSw2QkFBZSxDQUFDLGtCQUFrQixFQUFFO0tBQzlELENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxjQUFjLENBQUM7UUFDcEIsUUFBUSxFQUFFLFVBQVU7UUFDcEIsU0FBUyxFQUFFLFlBQVk7UUFDdkIsc0JBQXNCLEVBQUUsNkJBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO1FBQ3RFLHVCQUF1QixFQUFFLDZCQUFlLENBQUMsa0JBQWtCLEVBQUU7S0FDOUQsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLHFCQUFxQixDQUFDLFFBQVEsRUFBRSx1QkFBdUIsRUFBRSxVQUFVLENBQUMsQ0FBQTtBQUMxRSxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgKiBhcyBhcHBzeW5jIGZyb20gJ0Bhd3MtY2RrL2F3cy1hcHBzeW5jJztcbmltcG9ydCAqIGFzIGR5bmFtb2RiIGZyb20gJ0Bhd3MtY2RrL2F3cy1keW5hbW9kYic7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCdcbmltcG9ydCB7IE1hcHBpbmdUZW1wbGF0ZSwgUHJpbWFyeUtleSwgVmFsdWVzIH0gZnJvbSAnQGF3cy1jZGsvYXdzLWFwcHN5bmMnO1xuXG5leHBvcnQgY29uc3Qgc2V0dXBBcHBzeW5jID0gKGFwcDogY2RrLkNvbnN0cnVjdCwgaWQ6IHN0cmluZykgPT4ge1xuICBjb25zdCBhcGkgPSBuZXcgYXBwc3luYy5HcmFwaFFMQXBpKGFwcCwgYEFwaWAsIHtcbiAgICBuYW1lOiBgdXNlckRlbW9BcGlgLFxuICAgIGF1dGhvcml6YXRpb25Db25maWc6IHtcbiAgICAgIGRlZmF1bHRBdXRob3JpemF0aW9uOiB7XG4gICAgICAgIGFwaUtleURlc2M6ICdEZW1vS2V5JyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBzY2hlbWFEZWZpbml0aW9uRmlsZTogam9pbihfX2Rpcm5hbWUsICdzY2hlbWEuZ3JhcGhxbCcpLFxuICB9KTtcblxuICBjb25zdCB1c2Vyc1RhYmxlID0gbmV3IGR5bmFtb2RiLlRhYmxlKGFwcCwgYFVzZXJzVGFibGVgLCB7XG4gICAgcGFydGl0aW9uS2V5OiB7IG5hbWU6ICdpZCcsIHR5cGU6IGR5bmFtb2RiLkF0dHJpYnV0ZVR5cGUuU1RSSU5HIH1cbiAgfSk7XG5cbiAgY29uc3QgdXNlckRTID0gYXBpLmFkZER5bmFtb0RiRGF0YVNvdXJjZSgnVXNlcicsICdUaGUgdXNlciBkYXRhIHNvdXJjZScsIHVzZXJzVGFibGUpO1xuXG4gIHVzZXJEUy5jcmVhdGVSZXNvbHZlcih7XG4gICAgdHlwZU5hbWU6ICdRdWVyeScsXG4gICAgZmllbGROYW1lOiAnZ2V0VXNlcicsXG4gICAgcmVxdWVzdE1hcHBpbmdUZW1wbGF0ZTogTWFwcGluZ1RlbXBsYXRlLmR5bmFtb0RiR2V0SXRlbSgnaWQnLCAnaWQnKSxcbiAgICByZXNwb25zZU1hcHBpbmdUZW1wbGF0ZTogTWFwcGluZ1RlbXBsYXRlLmR5bmFtb0RiUmVzdWx0SXRlbSgpLFxuICB9KTtcblxuICB1c2VyRFMuY3JlYXRlUmVzb2x2ZXIoe1xuICAgIHR5cGVOYW1lOiAnUXVlcnknLFxuICAgIGZpZWxkTmFtZTogJ2dldFVzZXJzJyxcbiAgICByZXF1ZXN0TWFwcGluZ1RlbXBsYXRlOiBNYXBwaW5nVGVtcGxhdGUuZHluYW1vRGJTY2FuVGFibGUoKSxcbiAgICByZXNwb25zZU1hcHBpbmdUZW1wbGF0ZTogTWFwcGluZ1RlbXBsYXRlLmR5bmFtb0RiUmVzdWx0TGlzdCgpLFxuICB9KTtcblxuICB1c2VyRFMuY3JlYXRlUmVzb2x2ZXIoe1xuICAgIHR5cGVOYW1lOiAnTXV0YXRpb24nLFxuICAgIGZpZWxkTmFtZTogJ2FkZFVzZXInLFxuICAgIHJlcXVlc3RNYXBwaW5nVGVtcGxhdGU6IE1hcHBpbmdUZW1wbGF0ZS5keW5hbW9EYlB1dEl0ZW0oXG4gICAgICBQcmltYXJ5S2V5LnBhcnRpdGlvbignaWQnKS5hdXRvKCksXG4gICAgICBWYWx1ZXMucHJvamVjdGluZygndXNlcicpXG4gICAgKSxcbiAgICByZXNwb25zZU1hcHBpbmdUZW1wbGF0ZTogTWFwcGluZ1RlbXBsYXRlLmR5bmFtb0RiUmVzdWx0SXRlbSgpLFxuICB9KTtcblxuICB1c2VyRFMuY3JlYXRlUmVzb2x2ZXIoe1xuICAgIHR5cGVOYW1lOiAnTXV0YXRpb24nLFxuICAgIGZpZWxkTmFtZTogJ2RlbGV0ZVVzZXInLFxuICAgIHJlcXVlc3RNYXBwaW5nVGVtcGxhdGU6IE1hcHBpbmdUZW1wbGF0ZS5keW5hbW9EYkRlbGV0ZUl0ZW0oJ2lkJywgJ2lkJyksXG4gICAgcmVzcG9uc2VNYXBwaW5nVGVtcGxhdGU6IE1hcHBpbmdUZW1wbGF0ZS5keW5hbW9EYlJlc3VsdEl0ZW0oKSxcbiAgfSk7XG5cbiAgYXBpLmFkZER5bmFtb0RiRGF0YVNvdXJjZShgRHluYW1vYCwgJ0RhdGFiYXNlIGZvciBVc2VyRGVtbycsIHVzZXJzVGFibGUpXG59XG4iXX0=