"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const have_output_1 = require("./lib/assertions/have-output");
const have_resource_1 = require("./lib/assertions/have-resource");
const match_template_1 = require("./lib/assertions/match-template");
const expect_1 = require("./lib/expect");
expect.extend({
    toMatchTemplate(actual, template, matchStyle) {
        const assertion = match_template_1.matchTemplate(template, matchStyle);
        const inspector = expect_1.expect(actual);
        const pass = assertion.assertUsing(inspector);
        if (pass) {
            return {
                pass,
                message: () => 'Not ' + assertion.description,
            };
        }
        else {
            return {
                pass,
                message: () => assertion.description,
            };
        }
    },
    toHaveResource(actual, resourceType, properties, comparison) {
        const assertion = new have_resource_1.HaveResourceAssertion(resourceType, properties, comparison, false);
        return applyAssertion(assertion, actual);
    },
    toHaveResourceLike(actual, resourceType, properties, comparison) {
        const assertion = new have_resource_1.HaveResourceAssertion(resourceType, properties, comparison, true);
        return applyAssertion(assertion, actual);
    },
    toHaveOutput(actual, props) {
        return applyAssertion(have_output_1.haveOutput(props), actual);
    },
});
function applyAssertion(assertion, actual) {
    const inspector = expect_1.expect(actual);
    const pass = assertion.assertUsing(inspector);
    if (pass) {
        return {
            pass,
            message: () => 'Not ' + assertion.generateErrorMessage(),
        };
    }
    else {
        return {
            pass,
            message: () => assertion.generateErrorMessage(),
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImplc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSw4REFBZ0Y7QUFDaEYsa0VBQXFGO0FBQ3JGLG9FQUE0RTtBQUM1RSx5Q0FBbUQ7QUF5Qm5ELE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDWixlQUFlLENBQ2IsTUFBc0QsRUFDdEQsUUFBYSxFQUNiLFVBQXVCO1FBRXZCLE1BQU0sU0FBUyxHQUFHLDhCQUFhLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sU0FBUyxHQUFHLGVBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQyxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlDLElBQUksSUFBSSxFQUFFO1lBQ1IsT0FBTztnQkFDTCxJQUFJO2dCQUNKLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLFdBQVc7YUFDOUMsQ0FBQztTQUNIO2FBQU07WUFDTCxPQUFPO2dCQUNMLElBQUk7Z0JBQ0osT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUFXO2FBQ3JDLENBQUM7U0FDSDtJQUNILENBQUM7SUFFRCxjQUFjLENBQ1osTUFBc0QsRUFDdEQsWUFBb0IsRUFDcEIsVUFBZ0IsRUFDaEIsVUFBeUI7UUFFekIsTUFBTSxTQUFTLEdBQUcsSUFBSSxxQ0FBcUIsQ0FBQyxZQUFZLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN6RixPQUFPLGNBQWMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELGtCQUFrQixDQUNoQixNQUFzRCxFQUN0RCxZQUFvQixFQUNwQixVQUFnQixFQUNoQixVQUF5QjtRQUV6QixNQUFNLFNBQVMsR0FBRyxJQUFJLHFDQUFxQixDQUFDLFlBQVksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hGLE9BQU8sY0FBYyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsWUFBWSxDQUNWLE1BQXNELEVBQ3RELEtBQTJCO1FBRTNCLE9BQU8sY0FBYyxDQUFDLHdCQUFVLENBQUMsS0FBSyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkQsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUVILFNBQVMsY0FBYyxDQUFDLFNBQWdELEVBQUUsTUFBc0Q7SUFDOUgsTUFBTSxTQUFTLEdBQUcsZUFBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDOUMsSUFBSSxJQUFJLEVBQUU7UUFDUixPQUFPO1lBQ0wsSUFBSTtZQUNKLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLG9CQUFvQixFQUFFO1NBQ3pELENBQUM7S0FDSDtTQUFNO1FBQ0wsT0FBTztZQUNMLElBQUk7WUFDSixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLG9CQUFvQixFQUFFO1NBQ2hELENBQUM7S0FDSDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjb3JlIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0ICogYXMgY3hhcGkgZnJvbSAnQGF3cy1jZGsvY3gtYXBpJztcbmltcG9ydCB7IEplc3RGcmllbmRseUFzc2VydGlvbiB9IGZyb20gJy4vbGliL2Fzc2VydGlvbic7XG5pbXBvcnQgeyBoYXZlT3V0cHV0LCBIYXZlT3V0cHV0UHJvcGVydGllcyB9IGZyb20gJy4vbGliL2Fzc2VydGlvbnMvaGF2ZS1vdXRwdXQnO1xuaW1wb3J0IHsgSGF2ZVJlc291cmNlQXNzZXJ0aW9uLCBSZXNvdXJjZVBhcnQgfSBmcm9tICcuL2xpYi9hc3NlcnRpb25zL2hhdmUtcmVzb3VyY2UnO1xuaW1wb3J0IHsgTWF0Y2hTdHlsZSwgbWF0Y2hUZW1wbGF0ZSB9IGZyb20gJy4vbGliL2Fzc2VydGlvbnMvbWF0Y2gtdGVtcGxhdGUnO1xuaW1wb3J0IHsgZXhwZWN0IGFzIG91ckV4cGVjdCB9IGZyb20gJy4vbGliL2V4cGVjdCc7XG5pbXBvcnQgeyBTdGFja0luc3BlY3RvciB9IGZyb20gJy4vbGliL2luc3BlY3Rvcic7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgbmFtZXNwYWNlIGplc3Qge1xuICAgIGludGVyZmFjZSBNYXRjaGVyczxSLCBUPiB7XG4gICAgICB0b01hdGNoVGVtcGxhdGUoXG4gICAgICAgIHRlbXBsYXRlOiBhbnksXG4gICAgICAgIG1hdGNoU3R5bGU/OiBNYXRjaFN0eWxlKTogUjtcblxuICAgICAgdG9IYXZlUmVzb3VyY2UoXG4gICAgICAgIHJlc291cmNlVHlwZTogc3RyaW5nLFxuICAgICAgICBwcm9wZXJ0aWVzPzogYW55LFxuICAgICAgICBjb21wYXJpc29uPzogUmVzb3VyY2VQYXJ0KTogUjtcblxuICAgICAgdG9IYXZlUmVzb3VyY2VMaWtlKFxuICAgICAgICByZXNvdXJjZVR5cGU6IHN0cmluZyxcbiAgICAgICAgcHJvcGVydGllcz86IGFueSxcbiAgICAgICAgY29tcGFyaXNvbj86IFJlc291cmNlUGFydCk6IFI7XG5cbiAgICAgIHRvSGF2ZU91dHB1dChwcm9wczogSGF2ZU91dHB1dFByb3BlcnRpZXMpOiBSO1xuICAgIH1cbiAgfVxufVxuXG5leHBlY3QuZXh0ZW5kKHtcbiAgdG9NYXRjaFRlbXBsYXRlKFxuICAgIGFjdHVhbDogY3hhcGkuQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0IHwgY29yZS5TdGFjayxcbiAgICB0ZW1wbGF0ZTogYW55LFxuICAgIG1hdGNoU3R5bGU/OiBNYXRjaFN0eWxlKSB7XG5cbiAgICBjb25zdCBhc3NlcnRpb24gPSBtYXRjaFRlbXBsYXRlKHRlbXBsYXRlLCBtYXRjaFN0eWxlKTtcbiAgICBjb25zdCBpbnNwZWN0b3IgPSBvdXJFeHBlY3QoYWN0dWFsKTtcbiAgICBjb25zdCBwYXNzID0gYXNzZXJ0aW9uLmFzc2VydFVzaW5nKGluc3BlY3Rvcik7XG4gICAgaWYgKHBhc3MpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhc3MsXG4gICAgICAgIG1lc3NhZ2U6ICgpID0+ICdOb3QgJyArIGFzc2VydGlvbi5kZXNjcmlwdGlvbixcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhc3MsXG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IGFzc2VydGlvbi5kZXNjcmlwdGlvbixcbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIHRvSGF2ZVJlc291cmNlKFxuICAgIGFjdHVhbDogY3hhcGkuQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0IHwgY29yZS5TdGFjayxcbiAgICByZXNvdXJjZVR5cGU6IHN0cmluZyxcbiAgICBwcm9wZXJ0aWVzPzogYW55LFxuICAgIGNvbXBhcmlzb24/OiBSZXNvdXJjZVBhcnQpIHtcblxuICAgIGNvbnN0IGFzc2VydGlvbiA9IG5ldyBIYXZlUmVzb3VyY2VBc3NlcnRpb24ocmVzb3VyY2VUeXBlLCBwcm9wZXJ0aWVzLCBjb21wYXJpc29uLCBmYWxzZSk7XG4gICAgcmV0dXJuIGFwcGx5QXNzZXJ0aW9uKGFzc2VydGlvbiwgYWN0dWFsKTtcbiAgfSxcblxuICB0b0hhdmVSZXNvdXJjZUxpa2UoXG4gICAgYWN0dWFsOiBjeGFwaS5DbG91ZEZvcm1hdGlvblN0YWNrQXJ0aWZhY3QgfCBjb3JlLlN0YWNrLFxuICAgIHJlc291cmNlVHlwZTogc3RyaW5nLFxuICAgIHByb3BlcnRpZXM/OiBhbnksXG4gICAgY29tcGFyaXNvbj86IFJlc291cmNlUGFydCkge1xuXG4gICAgY29uc3QgYXNzZXJ0aW9uID0gbmV3IEhhdmVSZXNvdXJjZUFzc2VydGlvbihyZXNvdXJjZVR5cGUsIHByb3BlcnRpZXMsIGNvbXBhcmlzb24sIHRydWUpO1xuICAgIHJldHVybiBhcHBseUFzc2VydGlvbihhc3NlcnRpb24sIGFjdHVhbCk7XG4gIH0sXG5cbiAgdG9IYXZlT3V0cHV0KFxuICAgIGFjdHVhbDogY3hhcGkuQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0IHwgY29yZS5TdGFjayxcbiAgICBwcm9wczogSGF2ZU91dHB1dFByb3BlcnRpZXMpIHtcblxuICAgIHJldHVybiBhcHBseUFzc2VydGlvbihoYXZlT3V0cHV0KHByb3BzKSwgYWN0dWFsKTtcbiAgfSxcbn0pO1xuXG5mdW5jdGlvbiBhcHBseUFzc2VydGlvbihhc3NlcnRpb246IEplc3RGcmllbmRseUFzc2VydGlvbjxTdGFja0luc3BlY3Rvcj4sIGFjdHVhbDogY3hhcGkuQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0IHwgY29yZS5TdGFjaykge1xuICBjb25zdCBpbnNwZWN0b3IgPSBvdXJFeHBlY3QoYWN0dWFsKTtcbiAgY29uc3QgcGFzcyA9IGFzc2VydGlvbi5hc3NlcnRVc2luZyhpbnNwZWN0b3IpO1xuICBpZiAocGFzcykge1xuICAgIHJldHVybiB7XG4gICAgICBwYXNzLFxuICAgICAgbWVzc2FnZTogKCkgPT4gJ05vdCAnICsgYXNzZXJ0aW9uLmdlbmVyYXRlRXJyb3JNZXNzYWdlKCksXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFzcyxcbiAgICAgIG1lc3NhZ2U6ICgpID0+IGFzc2VydGlvbi5nZW5lcmF0ZUVycm9yTWVzc2FnZSgpLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==