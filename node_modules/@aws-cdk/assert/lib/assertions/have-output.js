"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertion_1 = require("../assertion");
class HaveOutputAssertion extends assertion_1.JestFriendlyAssertion {
    constructor(outputName, exportName, outputValue) {
        super();
        this.outputName = outputName;
        this.exportName = exportName;
        this.outputValue = outputValue;
        this.inspected = [];
        if (!this.outputName && !this.exportName) {
            throw new Error('At least one of [outputName, exportName] should be provided');
        }
    }
    get description() {
        const descriptionPartsArray = new Array();
        if (this.outputName) {
            descriptionPartsArray.push(`name '${this.outputName}'`);
        }
        if (this.exportName) {
            descriptionPartsArray.push(`export name ${JSON.stringify(this.exportName)}`);
        }
        if (this.outputValue) {
            descriptionPartsArray.push(`value ${JSON.stringify(this.outputValue)}`);
        }
        return 'output with ' + descriptionPartsArray.join(', ');
    }
    assertUsing(inspector) {
        var _a;
        if (!('Outputs' in inspector.value)) {
            return false;
        }
        for (const [name, props] of Object.entries(inspector.value.Outputs)) {
            const mismatchedFields = new Array();
            if (this.outputName && name !== this.outputName) {
                mismatchedFields.push('name');
            }
            if (this.exportName && JSON.stringify(this.exportName) !== JSON.stringify((_a = props.Export) === null || _a === void 0 ? void 0 : _a.Name)) {
                mismatchedFields.push('export name');
            }
            if (this.outputValue && JSON.stringify(this.outputValue) !== JSON.stringify(props.Value)) {
                mismatchedFields.push('value');
            }
            if (mismatchedFields.length === 0) {
                return true;
            }
            this.inspected.push({
                output: { [name]: props },
                failureReason: `mismatched ${mismatchedFields.join(', ')}`,
            });
        }
        return false;
    }
    generateErrorMessage() {
        const lines = new Array();
        lines.push(`None of ${this.inspected.length} outputs matches ${this.description}.`);
        for (const inspected of this.inspected) {
            lines.push(`- ${inspected.failureReason} in:`);
            lines.push(indent(4, JSON.stringify(inspected.output, null, 2)));
        }
        return lines.join('\n');
    }
}
/**
 * An assertion  to check whether Output with particular properties is present in a stack
 * @param props  properties of the Output that is being asserted against.
 *               Check ``HaveOutputProperties`` interface to get full list of available parameters
 */
function haveOutput(props) {
    return new HaveOutputAssertion(props.outputName, props.exportName, props.outputValue);
}
exports.haveOutput = haveOutput;
function indent(n, s) {
    const prefix = ' '.repeat(n);
    return prefix + s.replace(/\n/g, '\n' + prefix);
}
//# sourceMappingURL=data:application/json;base64,