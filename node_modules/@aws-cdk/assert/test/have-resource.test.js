"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cxapi = require("@aws-cdk/cx-api");
const fs_1 = require("fs");
const path_1 = require("path");
const index_1 = require("../lib/index");
test('support resource with no properties', () => {
    const synthStack = mkStack({
        Resources: {
            SomeResource: {
                Type: 'Some::Resource',
            },
        },
    });
    expect(() => index_1.expect(synthStack).to(index_1.haveResource('Some::Resource'))).not.toThrowError();
});
test('haveResource tells you about mismatched fields', () => {
    const synthStack = mkStack({
        Resources: {
            SomeResource: {
                Type: 'Some::Resource',
                Properties: {
                    PropA: 'somevalue',
                },
            },
        },
    });
    expect(() => {
        index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
            PropA: 'othervalue',
        }));
    }).toThrowError(/PropA/);
});
test('haveResource value matching is strict by default', () => {
    const synthStack = mkStack({
        Resources: {
            SomeResource: {
                Type: 'Some::Resource',
                Properties: {
                    PropA: {
                        foo: 'somevalue',
                        bar: 'This is unexpected, so the value of PropA doesn\'t strictly match - it shouldn\'t pass',
                    },
                    PropB: 'This property is unexpected, but it\'s allowed',
                },
            },
        },
    });
    expect(() => {
        index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
            PropA: {
                foo: 'somevalue',
            },
        }));
    }).toThrowError(/PropA/);
});
test('haveResource allows to opt in value extension', () => {
    const synthStack = mkStack({
        Resources: {
            SomeResource: {
                Type: 'Some::Resource',
                Properties: {
                    PropA: {
                        foo: 'somevalue',
                        bar: 'Additional value is permitted, as we opted in',
                    },
                    PropB: 'Additional properties is always okay!',
                },
            },
        },
    });
    expect(() => index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
        PropA: {
            foo: 'somevalue',
        },
    }, undefined, true))).not.toThrowError();
});
describe('property absence', () => {
    test('pass on absence', () => {
        const synthStack = mkSomeResource({
            Prop: 'somevalue',
        });
        index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
            PropA: index_1.ABSENT,
        }));
    });
    test('fail on presence', () => {
        const synthStack = mkSomeResource({
            PropA: 3,
        });
        expect(() => {
            index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
                PropA: index_1.ABSENT,
            }));
        }).toThrowError(/PropA/);
    });
    test('pass on deep absence', () => {
        const synthStack = mkSomeResource({
            Deep: {
                Prop: 'somevalue',
            },
        });
        index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
            Deep: {
                Prop: 'somevalue',
                PropA: index_1.ABSENT,
            },
        }));
    });
    test('fail on deep presence', () => {
        const synthStack = mkSomeResource({
            Deep: {
                Prop: 'somevalue',
            },
        });
        expect(() => {
            index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
                Deep: {
                    Prop: index_1.ABSENT,
                },
            }));
        }).toThrowError(/Prop/);
    });
});
function mkStack(template) {
    const assembly = new cxapi.CloudAssemblyBuilder();
    assembly.addArtifact('test', {
        type: cxschema.ArtifactType.AWS_CLOUDFORMATION_STACK,
        environment: cxapi.EnvironmentUtils.format('123456789', 'us-west-2'),
        properties: {
            templateFile: 'template.json',
        },
    });
    fs_1.writeFileSync(path_1.join(assembly.outdir, 'template.json'), JSON.stringify(template));
    return assembly.buildAssembly().getStackByName('test');
}
function mkSomeResource(props) {
    return mkStack({
        Resources: {
            SomeResource: {
                Type: 'Some::Resource',
                Properties: props,
            },
        },
    });
}
//# sourceMappingURL=data:application/json;base64,