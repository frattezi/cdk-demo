"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("@aws-cdk/assert/jest");
const core_1 = require("@aws-cdk/core");
const amplify = require("../lib");
let stack;
let app;
beforeEach(() => {
    stack = new core_1.Stack();
    app = new amplify.App(stack, 'App', {
        sourceCodeProvider: new amplify.GitHubSourceCodeProvider({
            owner: 'aws',
            repository: 'aws-cdk',
            oauthToken: core_1.SecretValue.plainText('secret'),
        }),
    });
});
test('create a branch', () => {
    // WHEN
    app.addBranch('dev');
    // THEN
    expect(stack).toHaveResource('AWS::Amplify::Branch', {
        AppId: {
            'Fn::GetAtt': [
                'AppF1B96344',
                'AppId',
            ],
        },
        BranchName: 'dev',
        EnableAutoBuild: true,
        EnablePullRequestPreview: true,
    });
});
test('with basic auth from credentials', () => {
    // WHEN
    app.addBranch('dev', {
        basicAuth: amplify.BasicAuth.fromCredentials('username', core_1.SecretValue.plainText('password')),
    });
    // THEN
    expect(stack).toHaveResource('AWS::Amplify::Branch', {
        BasicAuthConfig: {
            EnableBasicAuth: true,
            Password: 'password',
            Username: 'username',
        },
    });
});
test('with basic auth from generated password', () => {
    // WHEN
    app.addBranch('dev', {
        basicAuth: amplify.BasicAuth.fromGeneratedPassword('username'),
    });
    // THEN
    expect(stack).toHaveResource('AWS::Amplify::Branch', {
        BasicAuthConfig: {
            EnableBasicAuth: true,
            Password: {
                'Fn::Join': [
                    '',
                    [
                        '{{resolve:secretsmanager:',
                        {
                            Ref: 'AppdevdevBasicAuthB25D2314',
                        },
                        ':SecretString:password::}}',
                    ],
                ],
            },
            Username: 'username',
        },
    });
});
test('with env vars', () => {
    // WHEN
    const branch = app.addBranch('dev', {
        environmentVariables: {
            key1: 'value1',
        },
    });
    branch.addEnvironment('key2', 'value2');
    // THEN
    expect(stack).toHaveResource('AWS::Amplify::Branch', {
        EnvironmentVariables: [
            {
                Name: 'key1',
                Value: 'value1',
            },
            {
                Name: 'key2',
                Value: 'value2',
            },
        ],
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJhbmNoLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJicmFuY2gudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGdDQUE4QjtBQUM5Qix3Q0FBbUQ7QUFDbkQsa0NBQWtDO0FBRWxDLElBQUksS0FBWSxDQUFDO0FBQ2pCLElBQUksR0FBZ0IsQ0FBQztBQUNyQixVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7SUFDcEIsR0FBRyxHQUFHLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFO1FBQ2xDLGtCQUFrQixFQUFFLElBQUksT0FBTyxDQUFDLHdCQUF3QixDQUFDO1lBQ3ZELEtBQUssRUFBRSxLQUFLO1lBQ1osVUFBVSxFQUFFLFNBQVM7WUFDckIsVUFBVSxFQUFFLGtCQUFXLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztTQUM1QyxDQUFDO0tBQ0gsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQzNCLE9BQU87SUFDUCxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLE9BQU87SUFDUCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsY0FBYyxDQUFDLHNCQUFzQixFQUFFO1FBQ25ELEtBQUssRUFBRTtZQUNMLFlBQVksRUFBRTtnQkFDWixhQUFhO2dCQUNiLE9BQU87YUFDUjtTQUNGO1FBQ0QsVUFBVSxFQUFFLEtBQUs7UUFDakIsZUFBZSxFQUFFLElBQUk7UUFDckIsd0JBQXdCLEVBQUUsSUFBSTtLQUMvQixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7SUFDNUMsT0FBTztJQUNQLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFO1FBQ25CLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxVQUFVLEVBQUUsa0JBQVcsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDNUYsQ0FBQyxDQUFDO0lBRUgsT0FBTztJQUNQLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxjQUFjLENBQUMsc0JBQXNCLEVBQUU7UUFDbkQsZUFBZSxFQUFFO1lBQ2YsZUFBZSxFQUFFLElBQUk7WUFDckIsUUFBUSxFQUFFLFVBQVU7WUFDcEIsUUFBUSxFQUFFLFVBQVU7U0FDckI7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyx5Q0FBeUMsRUFBRSxHQUFHLEVBQUU7SUFDbkQsT0FBTztJQUNQLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFO1FBQ25CLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQztLQUMvRCxDQUFDLENBQUM7SUFFSCxPQUFPO0lBQ1AsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsRUFBRTtRQUNuRCxlQUFlLEVBQUU7WUFDZixlQUFlLEVBQUUsSUFBSTtZQUNyQixRQUFRLEVBQUU7Z0JBQ1IsVUFBVSxFQUFFO29CQUNWLEVBQUU7b0JBQ0Y7d0JBQ0UsMkJBQTJCO3dCQUMzQjs0QkFDRSxHQUFHLEVBQUUsNEJBQTRCO3lCQUNsQzt3QkFDRCw0QkFBNEI7cUJBQzdCO2lCQUNGO2FBQ0Y7WUFDRCxRQUFRLEVBQUUsVUFBVTtTQUNyQjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7SUFDekIsT0FBTztJQUNQLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFO1FBQ2xDLG9CQUFvQixFQUFFO1lBQ3BCLElBQUksRUFBRSxRQUFRO1NBQ2Y7S0FDRixDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUV4QyxPQUFPO0lBQ1AsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsRUFBRTtRQUNuRCxvQkFBb0IsRUFBRTtZQUNwQjtnQkFDRSxJQUFJLEVBQUUsTUFBTTtnQkFDWixLQUFLLEVBQUUsUUFBUTthQUNoQjtZQUNEO2dCQUNFLElBQUksRUFBRSxNQUFNO2dCQUNaLEtBQUssRUFBRSxRQUFRO2FBQ2hCO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQGF3cy1jZGsvYXNzZXJ0L2plc3QnO1xuaW1wb3J0IHsgU2VjcmV0VmFsdWUsIFN0YWNrIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgKiBhcyBhbXBsaWZ5IGZyb20gJy4uL2xpYic7XG5cbmxldCBzdGFjazogU3RhY2s7XG5sZXQgYXBwOiBhbXBsaWZ5LkFwcDtcbmJlZm9yZUVhY2goKCkgPT4ge1xuICBzdGFjayA9IG5ldyBTdGFjaygpO1xuICBhcHAgPSBuZXcgYW1wbGlmeS5BcHAoc3RhY2ssICdBcHAnLCB7XG4gICAgc291cmNlQ29kZVByb3ZpZGVyOiBuZXcgYW1wbGlmeS5HaXRIdWJTb3VyY2VDb2RlUHJvdmlkZXIoe1xuICAgICAgb3duZXI6ICdhd3MnLFxuICAgICAgcmVwb3NpdG9yeTogJ2F3cy1jZGsnLFxuICAgICAgb2F1dGhUb2tlbjogU2VjcmV0VmFsdWUucGxhaW5UZXh0KCdzZWNyZXQnKSxcbiAgICB9KSxcbiAgfSk7XG59KTtcblxudGVzdCgnY3JlYXRlIGEgYnJhbmNoJywgKCkgPT4ge1xuICAvLyBXSEVOXG4gIGFwcC5hZGRCcmFuY2goJ2RldicpO1xuXG4gIC8vIFRIRU5cbiAgZXhwZWN0KHN0YWNrKS50b0hhdmVSZXNvdXJjZSgnQVdTOjpBbXBsaWZ5OjpCcmFuY2gnLCB7XG4gICAgQXBwSWQ6IHtcbiAgICAgICdGbjo6R2V0QXR0JzogW1xuICAgICAgICAnQXBwRjFCOTYzNDQnLFxuICAgICAgICAnQXBwSWQnLFxuICAgICAgXSxcbiAgICB9LFxuICAgIEJyYW5jaE5hbWU6ICdkZXYnLFxuICAgIEVuYWJsZUF1dG9CdWlsZDogdHJ1ZSxcbiAgICBFbmFibGVQdWxsUmVxdWVzdFByZXZpZXc6IHRydWUsXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3dpdGggYmFzaWMgYXV0aCBmcm9tIGNyZWRlbnRpYWxzJywgKCkgPT4ge1xuICAvLyBXSEVOXG4gIGFwcC5hZGRCcmFuY2goJ2RldicsIHtcbiAgICBiYXNpY0F1dGg6IGFtcGxpZnkuQmFzaWNBdXRoLmZyb21DcmVkZW50aWFscygndXNlcm5hbWUnLCBTZWNyZXRWYWx1ZS5wbGFpblRleHQoJ3Bhc3N3b3JkJykpLFxuICB9KTtcblxuICAvLyBUSEVOXG4gIGV4cGVjdChzdGFjaykudG9IYXZlUmVzb3VyY2UoJ0FXUzo6QW1wbGlmeTo6QnJhbmNoJywge1xuICAgIEJhc2ljQXV0aENvbmZpZzoge1xuICAgICAgRW5hYmxlQmFzaWNBdXRoOiB0cnVlLFxuICAgICAgUGFzc3dvcmQ6ICdwYXNzd29yZCcsXG4gICAgICBVc2VybmFtZTogJ3VzZXJuYW1lJyxcbiAgICB9LFxuICB9KTtcbn0pO1xuXG50ZXN0KCd3aXRoIGJhc2ljIGF1dGggZnJvbSBnZW5lcmF0ZWQgcGFzc3dvcmQnLCAoKSA9PiB7XG4gIC8vIFdIRU5cbiAgYXBwLmFkZEJyYW5jaCgnZGV2Jywge1xuICAgIGJhc2ljQXV0aDogYW1wbGlmeS5CYXNpY0F1dGguZnJvbUdlbmVyYXRlZFBhc3N3b3JkKCd1c2VybmFtZScpLFxuICB9KTtcblxuICAvLyBUSEVOXG4gIGV4cGVjdChzdGFjaykudG9IYXZlUmVzb3VyY2UoJ0FXUzo6QW1wbGlmeTo6QnJhbmNoJywge1xuICAgIEJhc2ljQXV0aENvbmZpZzoge1xuICAgICAgRW5hYmxlQmFzaWNBdXRoOiB0cnVlLFxuICAgICAgUGFzc3dvcmQ6IHtcbiAgICAgICAgJ0ZuOjpKb2luJzogW1xuICAgICAgICAgICcnLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgICd7e3Jlc29sdmU6c2VjcmV0c21hbmFnZXI6JyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgUmVmOiAnQXBwZGV2ZGV2QmFzaWNBdXRoQjI1RDIzMTQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICc6U2VjcmV0U3RyaW5nOnBhc3N3b3JkOjp9fScsXG4gICAgICAgICAgXSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICBVc2VybmFtZTogJ3VzZXJuYW1lJyxcbiAgICB9LFxuICB9KTtcbn0pO1xuXG50ZXN0KCd3aXRoIGVudiB2YXJzJywgKCkgPT4ge1xuICAvLyBXSEVOXG4gIGNvbnN0IGJyYW5jaCA9IGFwcC5hZGRCcmFuY2goJ2RldicsIHtcbiAgICBlbnZpcm9ubWVudFZhcmlhYmxlczoge1xuICAgICAga2V5MTogJ3ZhbHVlMScsXG4gICAgfSxcbiAgfSk7XG4gIGJyYW5jaC5hZGRFbnZpcm9ubWVudCgna2V5MicsICd2YWx1ZTInKTtcblxuICAvLyBUSEVOXG4gIGV4cGVjdChzdGFjaykudG9IYXZlUmVzb3VyY2UoJ0FXUzo6QW1wbGlmeTo6QnJhbmNoJywge1xuICAgIEVudmlyb25tZW50VmFyaWFibGVzOiBbXG4gICAgICB7XG4gICAgICAgIE5hbWU6ICdrZXkxJyxcbiAgICAgICAgVmFsdWU6ICd2YWx1ZTEnLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgTmFtZTogJ2tleTInLFxuICAgICAgICBWYWx1ZTogJ3ZhbHVlMicsXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xufSk7XG4iXX0=