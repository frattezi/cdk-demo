"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("@aws-cdk/assert/jest");
const core_1 = require("@aws-cdk/core");
const amplify = require("../lib");
test('create a domain', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const app = new amplify.App(stack, 'App', {
        sourceCodeProvider: new amplify.GitHubSourceCodeProvider({
            owner: 'aws',
            repository: 'aws-cdk',
            oauthToken: core_1.SecretValue.plainText('secret'),
        }),
    });
    const prodBranch = app.addBranch('master');
    const devBranch = app.addBranch('dev');
    // WHEN
    const domain = app.addDomain('amazon.com', {
        subDomains: [
            {
                branch: prodBranch,
                prefix: 'prod',
            },
        ],
    });
    domain.mapSubDomain(devBranch);
    // THEN
    expect(stack).toHaveResource('AWS::Amplify::Domain', {
        AppId: {
            'Fn::GetAtt': [
                'AppF1B96344',
                'AppId',
            ],
        },
        DomainName: 'amazon.com',
        SubDomainSettings: [
            {
                BranchName: {
                    'Fn::GetAtt': [
                        'Appmaster71597E87',
                        'BranchName',
                    ],
                },
                Prefix: 'prod',
            },
            {
                BranchName: {
                    'Fn::GetAtt': [
                        'AppdevB328DAFC',
                        'BranchName',
                    ],
                },
                Prefix: {
                    'Fn::GetAtt': [
                        'AppdevB328DAFC',
                        'BranchName',
                    ],
                },
            },
        ],
    });
});
test('map a branch to the domain root', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const app = new amplify.App(stack, 'App', {
        sourceCodeProvider: new amplify.GitHubSourceCodeProvider({
            owner: 'aws',
            repository: 'aws-cdk',
            oauthToken: core_1.SecretValue.plainText('secret'),
        }),
    });
    const prodBranch = app.addBranch('master');
    // WHEN
    const domain = app.addDomain('amazon.com');
    domain.mapRoot(prodBranch);
    // THEN
    expect(stack).toHaveResource('AWS::Amplify::Domain', {
        AppId: {
            'Fn::GetAtt': [
                'AppF1B96344',
                'AppId',
            ],
        },
        DomainName: 'amazon.com',
        SubDomainSettings: [
            {
                BranchName: {
                    'Fn::GetAtt': [
                        'Appmaster71597E87',
                        'BranchName',
                    ],
                },
                Prefix: '',
            },
        ],
    });
});
test('throws at synthesis without subdomains', () => {
    // GIVEN
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'test-stack');
    const amplifyApp = new amplify.App(stack, 'App', {
        sourceCodeProvider: new amplify.GitHubSourceCodeProvider({
            owner: 'aws',
            repository: 'aws-cdk',
            oauthToken: core_1.SecretValue.plainText('secret'),
        }),
    });
    // WHEN
    amplifyApp.addDomain('amazon.com');
    // THEN
    expect(() => app.synth()).toThrow(/The domain doesn't contain any subdomains/);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tYWluLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkb21haW4udGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGdDQUE4QjtBQUM5Qix3Q0FBd0Q7QUFDeEQsa0NBQWtDO0FBRWxDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7SUFDM0IsUUFBUTtJQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7SUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7UUFDeEMsa0JBQWtCLEVBQUUsSUFBSSxPQUFPLENBQUMsd0JBQXdCLENBQUM7WUFDdkQsS0FBSyxFQUFFLEtBQUs7WUFDWixVQUFVLEVBQUUsU0FBUztZQUNyQixVQUFVLEVBQUUsa0JBQVcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO1NBQzVDLENBQUM7S0FDSCxDQUFDLENBQUM7SUFDSCxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNDLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFdkMsT0FBTztJQUNQLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFO1FBQ3pDLFVBQVUsRUFBRTtZQUNWO2dCQUNFLE1BQU0sRUFBRSxVQUFVO2dCQUNsQixNQUFNLEVBQUUsTUFBTTthQUNmO1NBQ0Y7S0FDRixDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRS9CLE9BQU87SUFDUCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsY0FBYyxDQUFDLHNCQUFzQixFQUFFO1FBQ25ELEtBQUssRUFBRTtZQUNMLFlBQVksRUFBRTtnQkFDWixhQUFhO2dCQUNiLE9BQU87YUFDUjtTQUNGO1FBQ0QsVUFBVSxFQUFFLFlBQVk7UUFDeEIsaUJBQWlCLEVBQUU7WUFDakI7Z0JBQ0UsVUFBVSxFQUFFO29CQUNWLFlBQVksRUFBRTt3QkFDWixtQkFBbUI7d0JBQ25CLFlBQVk7cUJBQ2I7aUJBQ0Y7Z0JBQ0QsTUFBTSxFQUFFLE1BQU07YUFDZjtZQUNEO2dCQUNFLFVBQVUsRUFBRTtvQkFDVixZQUFZLEVBQUU7d0JBQ1osZ0JBQWdCO3dCQUNoQixZQUFZO3FCQUNiO2lCQUNGO2dCQUNELE1BQU0sRUFBRTtvQkFDTixZQUFZLEVBQUU7d0JBQ1osZ0JBQWdCO3dCQUNoQixZQUFZO3FCQUNiO2lCQUNGO2FBQ0Y7U0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtJQUMzQyxRQUFRO0lBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztJQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtRQUN4QyxrQkFBa0IsRUFBRSxJQUFJLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztZQUN2RCxLQUFLLEVBQUUsS0FBSztZQUNaLFVBQVUsRUFBRSxTQUFTO1lBQ3JCLFVBQVUsRUFBRSxrQkFBVyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7U0FDNUMsQ0FBQztLQUNILENBQUMsQ0FBQztJQUNILE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFM0MsT0FBTztJQUNQLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDM0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUUzQixPQUFPO0lBQ1AsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsRUFBRTtRQUNuRCxLQUFLLEVBQUU7WUFDTCxZQUFZLEVBQUU7Z0JBQ1osYUFBYTtnQkFDYixPQUFPO2FBQ1I7U0FDRjtRQUNELFVBQVUsRUFBRSxZQUFZO1FBQ3hCLGlCQUFpQixFQUFFO1lBQ2pCO2dCQUNFLFVBQVUsRUFBRTtvQkFDVixZQUFZLEVBQUU7d0JBQ1osbUJBQW1CO3dCQUNuQixZQUFZO3FCQUNiO2lCQUNGO2dCQUNELE1BQU0sRUFBRSxFQUFFO2FBQ1g7U0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHdDQUF3QyxFQUFFLEdBQUcsRUFBRTtJQUNsRCxRQUFRO0lBQ1IsTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFHLEVBQUUsQ0FBQztJQUN0QixNQUFNLEtBQUssR0FBRyxJQUFJLFlBQUssQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDM0MsTUFBTSxVQUFVLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7UUFDL0Msa0JBQWtCLEVBQUUsSUFBSSxPQUFPLENBQUMsd0JBQXdCLENBQUM7WUFDdkQsS0FBSyxFQUFFLEtBQUs7WUFDWixVQUFVLEVBQUUsU0FBUztZQUNyQixVQUFVLEVBQUUsa0JBQVcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO1NBQzVDLENBQUM7S0FDSCxDQUFDLENBQUM7SUFFSCxPQUFPO0lBQ1AsVUFBVSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUVuQyxPQUFPO0lBQ1AsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ2pGLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdAYXdzLWNkay9hc3NlcnQvamVzdCc7XG5pbXBvcnQgeyBBcHAsIFNlY3JldFZhbHVlLCBTdGFjayB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0ICogYXMgYW1wbGlmeSBmcm9tICcuLi9saWInO1xuXG50ZXN0KCdjcmVhdGUgYSBkb21haW4nLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gIGNvbnN0IGFwcCA9IG5ldyBhbXBsaWZ5LkFwcChzdGFjaywgJ0FwcCcsIHtcbiAgICBzb3VyY2VDb2RlUHJvdmlkZXI6IG5ldyBhbXBsaWZ5LkdpdEh1YlNvdXJjZUNvZGVQcm92aWRlcih7XG4gICAgICBvd25lcjogJ2F3cycsXG4gICAgICByZXBvc2l0b3J5OiAnYXdzLWNkaycsXG4gICAgICBvYXV0aFRva2VuOiBTZWNyZXRWYWx1ZS5wbGFpblRleHQoJ3NlY3JldCcpLFxuICAgIH0pLFxuICB9KTtcbiAgY29uc3QgcHJvZEJyYW5jaCA9IGFwcC5hZGRCcmFuY2goJ21hc3RlcicpO1xuICBjb25zdCBkZXZCcmFuY2ggPSBhcHAuYWRkQnJhbmNoKCdkZXYnKTtcblxuICAvLyBXSEVOXG4gIGNvbnN0IGRvbWFpbiA9IGFwcC5hZGREb21haW4oJ2FtYXpvbi5jb20nLCB7XG4gICAgc3ViRG9tYWluczogW1xuICAgICAge1xuICAgICAgICBicmFuY2g6IHByb2RCcmFuY2gsXG4gICAgICAgIHByZWZpeDogJ3Byb2QnLFxuICAgICAgfSxcbiAgICBdLFxuICB9KTtcbiAgZG9tYWluLm1hcFN1YkRvbWFpbihkZXZCcmFuY2gpO1xuXG4gIC8vIFRIRU5cbiAgZXhwZWN0KHN0YWNrKS50b0hhdmVSZXNvdXJjZSgnQVdTOjpBbXBsaWZ5OjpEb21haW4nLCB7XG4gICAgQXBwSWQ6IHtcbiAgICAgICdGbjo6R2V0QXR0JzogW1xuICAgICAgICAnQXBwRjFCOTYzNDQnLFxuICAgICAgICAnQXBwSWQnLFxuICAgICAgXSxcbiAgICB9LFxuICAgIERvbWFpbk5hbWU6ICdhbWF6b24uY29tJyxcbiAgICBTdWJEb21haW5TZXR0aW5nczogW1xuICAgICAge1xuICAgICAgICBCcmFuY2hOYW1lOiB7XG4gICAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgICAnQXBwbWFzdGVyNzE1OTdFODcnLFxuICAgICAgICAgICAgJ0JyYW5jaE5hbWUnLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIFByZWZpeDogJ3Byb2QnLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgQnJhbmNoTmFtZToge1xuICAgICAgICAgICdGbjo6R2V0QXR0JzogW1xuICAgICAgICAgICAgJ0FwcGRldkIzMjhEQUZDJyxcbiAgICAgICAgICAgICdCcmFuY2hOYW1lJyxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBQcmVmaXg6IHtcbiAgICAgICAgICAnRm46OkdldEF0dCc6IFtcbiAgICAgICAgICAgICdBcHBkZXZCMzI4REFGQycsXG4gICAgICAgICAgICAnQnJhbmNoTmFtZScsXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSk7XG59KTtcblxudGVzdCgnbWFwIGEgYnJhbmNoIHRvIHRoZSBkb21haW4gcm9vdCcsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgY29uc3QgYXBwID0gbmV3IGFtcGxpZnkuQXBwKHN0YWNrLCAnQXBwJywge1xuICAgIHNvdXJjZUNvZGVQcm92aWRlcjogbmV3IGFtcGxpZnkuR2l0SHViU291cmNlQ29kZVByb3ZpZGVyKHtcbiAgICAgIG93bmVyOiAnYXdzJyxcbiAgICAgIHJlcG9zaXRvcnk6ICdhd3MtY2RrJyxcbiAgICAgIG9hdXRoVG9rZW46IFNlY3JldFZhbHVlLnBsYWluVGV4dCgnc2VjcmV0JyksXG4gICAgfSksXG4gIH0pO1xuICBjb25zdCBwcm9kQnJhbmNoID0gYXBwLmFkZEJyYW5jaCgnbWFzdGVyJyk7XG5cbiAgLy8gV0hFTlxuICBjb25zdCBkb21haW4gPSBhcHAuYWRkRG9tYWluKCdhbWF6b24uY29tJyk7XG4gIGRvbWFpbi5tYXBSb290KHByb2RCcmFuY2gpO1xuXG4gIC8vIFRIRU5cbiAgZXhwZWN0KHN0YWNrKS50b0hhdmVSZXNvdXJjZSgnQVdTOjpBbXBsaWZ5OjpEb21haW4nLCB7XG4gICAgQXBwSWQ6IHtcbiAgICAgICdGbjo6R2V0QXR0JzogW1xuICAgICAgICAnQXBwRjFCOTYzNDQnLFxuICAgICAgICAnQXBwSWQnLFxuICAgICAgXSxcbiAgICB9LFxuICAgIERvbWFpbk5hbWU6ICdhbWF6b24uY29tJyxcbiAgICBTdWJEb21haW5TZXR0aW5nczogW1xuICAgICAge1xuICAgICAgICBCcmFuY2hOYW1lOiB7XG4gICAgICAgICAgJ0ZuOjpHZXRBdHQnOiBbXG4gICAgICAgICAgICAnQXBwbWFzdGVyNzE1OTdFODcnLFxuICAgICAgICAgICAgJ0JyYW5jaE5hbWUnLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIFByZWZpeDogJycsXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3Rocm93cyBhdCBzeW50aGVzaXMgd2l0aG91dCBzdWJkb21haW5zJywgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBhcHAgPSBuZXcgQXBwKCk7XG4gIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKGFwcCwgJ3Rlc3Qtc3RhY2snKTtcbiAgY29uc3QgYW1wbGlmeUFwcCA9IG5ldyBhbXBsaWZ5LkFwcChzdGFjaywgJ0FwcCcsIHtcbiAgICBzb3VyY2VDb2RlUHJvdmlkZXI6IG5ldyBhbXBsaWZ5LkdpdEh1YlNvdXJjZUNvZGVQcm92aWRlcih7XG4gICAgICBvd25lcjogJ2F3cycsXG4gICAgICByZXBvc2l0b3J5OiAnYXdzLWNkaycsXG4gICAgICBvYXV0aFRva2VuOiBTZWNyZXRWYWx1ZS5wbGFpblRleHQoJ3NlY3JldCcpLFxuICAgIH0pLFxuICB9KTtcblxuICAvLyBXSEVOXG4gIGFtcGxpZnlBcHAuYWRkRG9tYWluKCdhbWF6b24uY29tJyk7XG5cbiAgLy8gVEhFTlxuICBleHBlY3QoKCkgPT4gYXBwLnN5bnRoKCkpLnRvVGhyb3coL1RoZSBkb21haW4gZG9lc24ndCBjb250YWluIGFueSBzdWJkb21haW5zLyk7XG59KTtcbiJdfQ==