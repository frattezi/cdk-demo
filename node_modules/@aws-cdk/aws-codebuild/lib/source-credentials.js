"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const codebuild_generated_1 = require("./codebuild.generated");
/**
 * The source credentials used when contacting the GitHub API.
 *
 * **Note**: CodeBuild only allows a single credential for GitHub
 * to be saved in a given AWS account in a given region -
 * any attempt to add more than one will result in an error.
 *
 * @resource AWS::CodeBuild::SourceCredential
 */
class GitHubSourceCredentials extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        new codebuild_generated_1.CfnSourceCredential(this, 'Resource', {
            serverType: 'GITHUB',
            authType: 'PERSONAL_ACCESS_TOKEN',
            token: props.accessToken.toString(),
        });
    }
}
exports.GitHubSourceCredentials = GitHubSourceCredentials;
/**
 * The source credentials used when contacting the GitHub Enterprise API.
 *
 * **Note**: CodeBuild only allows a single credential for GitHub Enterprise
 * to be saved in a given AWS account in a given region -
 * any attempt to add more than one will result in an error.
 *
 * @resource AWS::CodeBuild::SourceCredential
 */
class GitHubEnterpriseSourceCredentials extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        new codebuild_generated_1.CfnSourceCredential(this, 'Resource', {
            serverType: 'GITHUB_ENTERPRISE',
            authType: 'PERSONAL_ACCESS_TOKEN',
            token: props.accessToken.toString(),
        });
    }
}
exports.GitHubEnterpriseSourceCredentials = GitHubEnterpriseSourceCredentials;
/**
 * The source credentials used when contacting the BitBucket API.
 *
 * **Note**: CodeBuild only allows a single credential for BitBucket
 * to be saved in a given AWS account in a given region -
 * any attempt to add more than one will result in an error.
 *
 * @resource AWS::CodeBuild::SourceCredential
 */
class BitBucketSourceCredentials extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        new codebuild_generated_1.CfnSourceCredential(this, 'Resource', {
            serverType: 'BITBUCKET',
            authType: 'BASIC_AUTH',
            username: props.username.toString(),
            token: props.password.toString(),
        });
    }
}
exports.BitBucketSourceCredentials = BitBucketSourceCredentials;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLWNyZWRlbnRpYWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic291cmNlLWNyZWRlbnRpYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQWlFO0FBQ2pFLCtEQUE0RDtBQVk1RDs7Ozs7Ozs7R0FRRztBQUNILE1BQWEsdUJBQXdCLFNBQVEsZUFBUTtJQUNuRCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQW1DO1FBQzNFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsSUFBSSx5Q0FBbUIsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQ3hDLFVBQVUsRUFBRSxRQUFRO1lBQ3BCLFFBQVEsRUFBRSx1QkFBdUI7WUFDakMsS0FBSyxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFO1NBQ3BDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQVZELDBEQVVDO0FBYUQ7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFhLGlDQUFrQyxTQUFRLGVBQVE7SUFDN0QsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUE2QztRQUNyRixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLElBQUkseUNBQW1CLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUN4QyxVQUFVLEVBQUUsbUJBQW1CO1lBQy9CLFFBQVEsRUFBRSx1QkFBdUI7WUFDakMsS0FBSyxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFO1NBQ3BDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQVZELDhFQVVDO0FBYUQ7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFhLDBCQUEyQixTQUFRLGVBQVE7SUFDdEQsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFzQztRQUM5RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLElBQUkseUNBQW1CLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUN4QyxVQUFVLEVBQUUsV0FBVztZQUN2QixRQUFRLEVBQUUsWUFBWTtZQUN0QixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUU7WUFDbkMsS0FBSyxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFO1NBQ2pDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQVhELGdFQVdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0LCBSZXNvdXJjZSwgU2VjcmV0VmFsdWUgfSBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IENmblNvdXJjZUNyZWRlbnRpYWwgfSBmcm9tICcuL2NvZGVidWlsZC5nZW5lcmF0ZWQnO1xuXG4vKipcbiAqIENyZWF0aW9uIHByb3BlcnRpZXMgZm9yIHtAbGluayBHaXRIdWJTb3VyY2VDcmVkZW50aWFsc30uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2l0SHViU291cmNlQ3JlZGVudGlhbHNQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgcGVyc29uYWwgYWNjZXNzIHRva2VuIHRvIHVzZSB3aGVuIGNvbnRhY3RpbmcgdGhlIEdpdEh1YiBBUEkuXG4gICAqL1xuICByZWFkb25seSBhY2Nlc3NUb2tlbjogU2VjcmV0VmFsdWU7XG59XG5cbi8qKlxuICogVGhlIHNvdXJjZSBjcmVkZW50aWFscyB1c2VkIHdoZW4gY29udGFjdGluZyB0aGUgR2l0SHViIEFQSS5cbiAqXG4gKiAqKk5vdGUqKjogQ29kZUJ1aWxkIG9ubHkgYWxsb3dzIGEgc2luZ2xlIGNyZWRlbnRpYWwgZm9yIEdpdEh1YlxuICogdG8gYmUgc2F2ZWQgaW4gYSBnaXZlbiBBV1MgYWNjb3VudCBpbiBhIGdpdmVuIHJlZ2lvbiAtXG4gKiBhbnkgYXR0ZW1wdCB0byBhZGQgbW9yZSB0aGFuIG9uZSB3aWxsIHJlc3VsdCBpbiBhbiBlcnJvci5cbiAqXG4gKiBAcmVzb3VyY2UgQVdTOjpDb2RlQnVpbGQ6OlNvdXJjZUNyZWRlbnRpYWxcbiAqL1xuZXhwb3J0IGNsYXNzIEdpdEh1YlNvdXJjZUNyZWRlbnRpYWxzIGV4dGVuZHMgUmVzb3VyY2Uge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogR2l0SHViU291cmNlQ3JlZGVudGlhbHNQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICBuZXcgQ2ZuU291cmNlQ3JlZGVudGlhbCh0aGlzLCAnUmVzb3VyY2UnLCB7XG4gICAgICBzZXJ2ZXJUeXBlOiAnR0lUSFVCJyxcbiAgICAgIGF1dGhUeXBlOiAnUEVSU09OQUxfQUNDRVNTX1RPS0VOJyxcbiAgICAgIHRva2VuOiBwcm9wcy5hY2Nlc3NUb2tlbi50b1N0cmluZygpLFxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogQ3JlYXRpb24gcHJvcGVydGllcyBmb3Ige0BsaW5rIEdpdEh1YkVudGVycHJpc2VTb3VyY2VDcmVkZW50aWFsc30uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2l0SHViRW50ZXJwcmlzZVNvdXJjZUNyZWRlbnRpYWxzUHJvcHMge1xuICAvKipcbiAgICogVGhlIHBlcnNvbmFsIGFjY2VzcyB0b2tlbiB0byB1c2Ugd2hlbiBjb250YWN0aW5nIHRoZVxuICAgKiBpbnN0YW5jZSBvZiB0aGUgR2l0SHViIEVudGVycHJpc2UgQVBJLlxuICAgKi9cbiAgcmVhZG9ubHkgYWNjZXNzVG9rZW46IFNlY3JldFZhbHVlO1xufVxuXG4vKipcbiAqIFRoZSBzb3VyY2UgY3JlZGVudGlhbHMgdXNlZCB3aGVuIGNvbnRhY3RpbmcgdGhlIEdpdEh1YiBFbnRlcnByaXNlIEFQSS5cbiAqXG4gKiAqKk5vdGUqKjogQ29kZUJ1aWxkIG9ubHkgYWxsb3dzIGEgc2luZ2xlIGNyZWRlbnRpYWwgZm9yIEdpdEh1YiBFbnRlcnByaXNlXG4gKiB0byBiZSBzYXZlZCBpbiBhIGdpdmVuIEFXUyBhY2NvdW50IGluIGEgZ2l2ZW4gcmVnaW9uIC1cbiAqIGFueSBhdHRlbXB0IHRvIGFkZCBtb3JlIHRoYW4gb25lIHdpbGwgcmVzdWx0IGluIGFuIGVycm9yLlxuICpcbiAqIEByZXNvdXJjZSBBV1M6OkNvZGVCdWlsZDo6U291cmNlQ3JlZGVudGlhbFxuICovXG5leHBvcnQgY2xhc3MgR2l0SHViRW50ZXJwcmlzZVNvdXJjZUNyZWRlbnRpYWxzIGV4dGVuZHMgUmVzb3VyY2Uge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogR2l0SHViRW50ZXJwcmlzZVNvdXJjZUNyZWRlbnRpYWxzUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgbmV3IENmblNvdXJjZUNyZWRlbnRpYWwodGhpcywgJ1Jlc291cmNlJywge1xuICAgICAgc2VydmVyVHlwZTogJ0dJVEhVQl9FTlRFUlBSSVNFJyxcbiAgICAgIGF1dGhUeXBlOiAnUEVSU09OQUxfQUNDRVNTX1RPS0VOJyxcbiAgICAgIHRva2VuOiBwcm9wcy5hY2Nlc3NUb2tlbi50b1N0cmluZygpLFxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogQ29uc3RydWN0aW9uIHByb3BlcnRpZXMgb2Yge0BsaW5rIEJpdEJ1Y2tldFNvdXJjZUNyZWRlbnRpYWxzfS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCaXRCdWNrZXRTb3VyY2VDcmVkZW50aWFsc1Byb3BzIHtcbiAgLyoqIFlvdXIgQml0QnVja2V0IHVzZXJuYW1lLiAqL1xuICByZWFkb25seSB1c2VybmFtZTogU2VjcmV0VmFsdWU7XG5cbiAgLyoqIFlvdXIgQml0QnVja2V0IGFwcGxpY2F0aW9uIHBhc3N3b3JkLiAqL1xuICByZWFkb25seSBwYXNzd29yZDogU2VjcmV0VmFsdWU7XG59XG5cbi8qKlxuICogVGhlIHNvdXJjZSBjcmVkZW50aWFscyB1c2VkIHdoZW4gY29udGFjdGluZyB0aGUgQml0QnVja2V0IEFQSS5cbiAqXG4gKiAqKk5vdGUqKjogQ29kZUJ1aWxkIG9ubHkgYWxsb3dzIGEgc2luZ2xlIGNyZWRlbnRpYWwgZm9yIEJpdEJ1Y2tldFxuICogdG8gYmUgc2F2ZWQgaW4gYSBnaXZlbiBBV1MgYWNjb3VudCBpbiBhIGdpdmVuIHJlZ2lvbiAtXG4gKiBhbnkgYXR0ZW1wdCB0byBhZGQgbW9yZSB0aGFuIG9uZSB3aWxsIHJlc3VsdCBpbiBhbiBlcnJvci5cbiAqXG4gKiBAcmVzb3VyY2UgQVdTOjpDb2RlQnVpbGQ6OlNvdXJjZUNyZWRlbnRpYWxcbiAqL1xuZXhwb3J0IGNsYXNzIEJpdEJ1Y2tldFNvdXJjZUNyZWRlbnRpYWxzIGV4dGVuZHMgUmVzb3VyY2Uge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQml0QnVja2V0U291cmNlQ3JlZGVudGlhbHNQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICBuZXcgQ2ZuU291cmNlQ3JlZGVudGlhbCh0aGlzLCAnUmVzb3VyY2UnLCB7XG4gICAgICBzZXJ2ZXJUeXBlOiAnQklUQlVDS0VUJyxcbiAgICAgIGF1dGhUeXBlOiAnQkFTSUNfQVVUSCcsXG4gICAgICB1c2VybmFtZTogcHJvcHMudXNlcm5hbWUudG9TdHJpbmcoKSxcbiAgICAgIHRva2VuOiBwcm9wcy5wYXNzd29yZC50b1N0cmluZygpLFxuICAgIH0pO1xuICB9XG59XG4iXX0=