"use strict";
const assert_1 = require("@aws-cdk/assert");
const iam = require("@aws-cdk/aws-iam");
const kms = require("@aws-cdk/aws-kms");
const s3 = require("@aws-cdk/aws-s3");
const cdk = require("@aws-cdk/core");
const codebuild = require("../lib");
module.exports = {
    'Test Reports Groups': {
        'get created with type=TEST and exportConfig=NO_EXPORT by default'(test) {
            const stack = new cdk.Stack();
            new codebuild.ReportGroup(stack, 'ReportGroup');
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::ReportGroup', {
                "Type": "TEST",
                "ExportConfig": {
                    "ExportConfigType": "NO_EXPORT",
                    "S3Destination": assert_1.ABSENT,
                },
            }));
            test.done();
        },
        'can be imported by name'(test) {
            const stack = new cdk.Stack();
            const reportGroup = codebuild.ReportGroup.fromReportGroupName(stack, 'ReportGroup', 'my-report-group');
            const role = new iam.Role(stack, 'Role', {
                assumedBy: new iam.AnyPrincipal(),
            });
            role.addToPolicy(new iam.PolicyStatement({
                actions: ['codebuild:*'],
                resources: [reportGroup.reportGroupArn],
            }));
            test.equal(reportGroup.reportGroupName, 'my-report-group');
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::IAM::Policy', {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "codebuild:*",
                            "Resource": {
                                "Fn::Join": ["", [
                                        "arn:",
                                        { "Ref": "AWS::Partition" },
                                        ":codebuild:",
                                        { "Ref": "AWS::Region" },
                                        ":",
                                        { "Ref": "AWS::AccountId" },
                                        ":report-group/my-report-group",
                                    ]],
                            },
                        },
                    ],
                },
            }));
            test.done();
        },
        'specify exportConfig=S3 when providing an exportBucket'(test) {
            const stack = new cdk.Stack();
            new codebuild.ReportGroup(stack, 'ReportGroup', {
                exportBucket: s3.Bucket.fromBucketName(stack, 'Bucket', 'my-bucket'),
            });
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::ReportGroup', {
                "Type": "TEST",
                "ExportConfig": {
                    "ExportConfigType": "S3",
                    "S3Destination": {
                        "Bucket": "my-bucket",
                        "EncryptionKey": assert_1.ABSENT,
                        "EncryptionDisabled": assert_1.ABSENT,
                        "Packaging": assert_1.ABSENT,
                    },
                },
            }));
            test.done();
        },
        'specify encryptionKey in ExportConfig.S3Destination if exportBucket has a Key'(test) {
            const stack = new cdk.Stack();
            new codebuild.ReportGroup(stack, 'ReportGroup', {
                exportBucket: s3.Bucket.fromBucketAttributes(stack, 'Bucket', {
                    bucketName: 'my-bucket',
                    encryptionKey: kms.Key.fromKeyArn(stack, 'Key', 'arn:aws:kms:us-east-1:123456789012:key/my-key'),
                }),
                zipExport: true,
            });
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::ReportGroup', {
                "Type": "TEST",
                "ExportConfig": {
                    "ExportConfigType": "S3",
                    "S3Destination": {
                        "Bucket": "my-bucket",
                        "EncryptionDisabled": false,
                        "EncryptionKey": "arn:aws:kms:us-east-1:123456789012:key/my-key",
                        "Packaging": "ZIP",
                    },
                },
            }));
            test.done();
        },
        'get created with RemovalPolicy.RETAIN by default'(test) {
            const stack = new cdk.Stack();
            new codebuild.ReportGroup(stack, 'ReportGroup');
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::ReportGroup', {
                "DeletionPolicy": "Retain",
                "UpdateReplacePolicy": "Retain",
            }, assert_1.ResourcePart.CompleteDefinition));
            test.done();
        },
        'can be created with RemovalPolicy.DESTROY'(test) {
            const stack = new cdk.Stack();
            new codebuild.ReportGroup(stack, 'ReportGroup', {
                removalPolicy: cdk.RemovalPolicy.DESTROY,
            });
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::ReportGroup', {
                "DeletionPolicy": "Delete",
                "UpdateReplacePolicy": "Delete",
            }, assert_1.ResourcePart.CompleteDefinition));
            test.done();
        },
    },
};
//# sourceMappingURL=data:application/json;base64,