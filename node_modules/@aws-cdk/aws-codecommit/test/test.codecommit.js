"use strict";
const assert_1 = require("@aws-cdk/assert");
const aws_iam_1 = require("@aws-cdk/aws-iam");
const core_1 = require("@aws-cdk/core");
const lib_1 = require("../lib");
module.exports = {
    'CodeCommit Repositories': {
        'add an SNS trigger to repository'(test) {
            const stack = new core_1.Stack();
            const props = {
                repositoryName: 'MyRepository',
            };
            const snsArn = 'arn:aws:sns:*:123456789012:my_topic';
            new lib_1.Repository(stack, 'MyRepository', props).notify(snsArn);
            assert_1.expect(stack).toMatch({
                Resources: {
                    MyRepository4C4BD5FC: {
                        Type: 'AWS::CodeCommit::Repository',
                        Properties: {
                            RepositoryName: 'MyRepository',
                            Triggers: [
                                {
                                    Events: [
                                        'all',
                                    ],
                                    DestinationArn: 'arn:aws:sns:*:123456789012:my_topic',
                                    Name: 'MyRepository/arn:aws:sns:*:123456789012:my_topic',
                                },
                            ],
                        },
                    },
                },
            });
            test.done();
        },
        'fails when triggers have duplicate names'(test) {
            const stack = new core_1.Stack();
            const myRepository = new lib_1.Repository(stack, 'MyRepository', {
                repositoryName: 'MyRepository',
            }).notify('myTrigger');
            test.throws(() => myRepository.notify('myTrigger'));
            test.done();
        },
        'can be imported using a Repository ARN'(test) {
            // GIVEN
            const stack = new core_1.Stack();
            const repositoryArn = 'arn:aws:codecommit:us-east-1:585695036304:my-repo';
            // WHEN
            const repo = lib_1.Repository.fromRepositoryArn(stack, 'ImportedRepo', repositoryArn);
            // THEN
            test.deepEqual(stack.resolve(repo.repositoryArn), repositoryArn);
            test.deepEqual(stack.resolve(repo.repositoryName), 'my-repo');
            test.done();
        },
        'can be imported using just a Repository name (the ARN is deduced)'(test) {
            // GIVEN
            const stack = new core_1.Stack();
            // WHEN
            const repo = lib_1.Repository.fromRepositoryName(stack, 'ImportedRepo', 'my-repo');
            // THEN
            test.deepEqual(stack.resolve(repo.repositoryArn), {
                'Fn::Join': ['', [
                        'arn:',
                        { Ref: 'AWS::Partition' },
                        ':codecommit:',
                        { Ref: 'AWS::Region' },
                        ':',
                        { Ref: 'AWS::AccountId' },
                        ':my-repo',
                    ]],
            });
            test.deepEqual(stack.resolve(repo.repositoryName), 'my-repo');
            test.done();
        },
        'grant push'(test) {
            // GIVEN
            const stack = new core_1.Stack();
            const repository = new lib_1.Repository(stack, 'Repo', {
                repositoryName: 'repo-name',
            });
            const role = new aws_iam_1.Role(stack, 'Role', {
                assumedBy: new aws_iam_1.ServicePrincipal('ec2.amazonaws.com'),
            });
            // WHEN
            repository.grantPullPush(role);
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
                PolicyDocument: {
                    Statement: [
                        {
                            Action: 'codecommit:GitPull',
                            Effect: 'Allow',
                            Resource: {
                                'Fn::GetAtt': [
                                    'Repo02AC86CF',
                                    'Arn',
                                ],
                            },
                        },
                        {
                            Action: 'codecommit:GitPush',
                            Effect: 'Allow',
                            Resource: {
                                'Fn::GetAtt': [
                                    'Repo02AC86CF',
                                    'Arn',
                                ],
                            },
                        },
                    ],
                    Version: '2012-10-17',
                },
            }));
            test.done();
        },
    },
};
//# sourceMappingURL=data:application/json;base64,