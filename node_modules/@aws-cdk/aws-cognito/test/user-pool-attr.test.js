"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("@aws-cdk/assert/jest");
const lib_1 = require("../lib");
describe('User Pool Attributes', () => {
    describe('mutable', () => {
        test('default', () => {
            // GIVEN
            const allAttributes = [
                new lib_1.StringAttribute(),
                new lib_1.NumberAttribute(),
                new lib_1.BooleanAttribute(),
                new lib_1.DateTimeAttribute(),
            ];
            // WHEN
            const bounds = allAttributes.map((attr) => attr.bind());
            // THEN
            bounds.forEach((bound) => {
                expect(bound.mutable).toBeUndefined();
            });
        });
        describe('mutable is set to true when specified', () => {
            // GIVEN
            const allTrueProps = {
                mutable: true,
            };
            const allAttributeTypes = [
                new lib_1.StringAttribute(allTrueProps),
                new lib_1.NumberAttribute(allTrueProps),
                new lib_1.BooleanAttribute(allTrueProps),
                new lib_1.DateTimeAttribute(allTrueProps),
            ];
            // WHEN
            const bounds = allAttributeTypes.map((attr) => attr.bind());
            // THEN
            bounds.forEach((bound) => {
                test(`in attribute of type ${bound.dataType}:`, () => {
                    expect(bound.mutable).toEqual(true);
                });
            });
        });
        describe('mutable is set to false', () => {
            // GIVEN
            const allFalseProps = {
                mutable: false,
            };
            const allAttributeTypes = [
                new lib_1.StringAttribute(allFalseProps),
                new lib_1.NumberAttribute(allFalseProps),
                new lib_1.BooleanAttribute(allFalseProps),
                new lib_1.DateTimeAttribute(allFalseProps),
            ];
            // WHEN
            const bounds = allAttributeTypes.map((attr) => attr.bind());
            // THEN
            bounds.forEach((bound) => {
                test(`in attribute of type ${bound.dataType}`, () => {
                    expect(bound.mutable).toEqual(false);
                });
            });
        });
    });
    describe('StringAttribute', () => {
        test('default', () => {
            // GIVEN
            const attr = new lib_1.StringAttribute();
            // WHEN
            const bound = attr.bind();
            // THEN
            expect(bound.dataType).toEqual('String');
            expect(bound.stringConstraints).toBeUndefined();
            expect(bound.numberConstraints).toBeUndefined();
        });
        test('specified constraints are recognized', () => {
            // GIVEN
            const attr = new lib_1.StringAttribute({ minLen: 10, maxLen: 60 });
            // WHEN
            const bound = attr.bind();
            // THEN
            expect(bound.stringConstraints).toEqual({
                minLen: 10,
                maxLen: 60,
            });
            expect(bound.numberConstraints).toBeUndefined();
        });
        test('throws error when crossing limits', () => {
            expect(() => new lib_1.StringAttribute({ minLen: -10 }))
                .toThrow(/minLen cannot be less than/);
            expect(() => new lib_1.StringAttribute({ maxLen: 5000 }))
                .toThrow(/maxLen cannot be greater than/);
        });
    });
    describe('NumberAttribute', () => {
        test('default', () => {
            // GIVEN
            const attr = new lib_1.NumberAttribute();
            // WHEN
            const bound = attr.bind();
            // THEN
            expect(bound.dataType).toEqual('Number');
            expect(bound.stringConstraints).toBeUndefined();
            expect(bound.numberConstraints).toBeUndefined();
        });
        test('specified constraints are recognized', () => {
            // GIVEN
            const attr = new lib_1.NumberAttribute({ min: 5, max: 600 });
            // WHEN
            const bound = attr.bind();
            // THEN
            expect(bound.numberConstraints).toEqual({
                min: 5,
                max: 600,
            });
            expect(bound.stringConstraints).toBeUndefined();
        });
    });
    describe('BooleanAttribute', () => {
        test('default', () => {
            // GIVEN
            const attr = new lib_1.BooleanAttribute();
            // WHEN
            const bound = attr.bind();
            // THEN
            expect(bound.dataType).toEqual('Boolean');
            expect(bound.stringConstraints).toBeUndefined();
            expect(bound.numberConstraints).toBeUndefined();
        });
    });
    describe('DateTimeAttribute', () => {
        test('default', () => {
            // GIVEN
            const attr = new lib_1.DateTimeAttribute();
            // WHEN
            const bound = attr.bind();
            // THEN
            expect(bound.dataType).toEqual('DateTime');
            expect(bound.stringConstraints).toBeUndefined();
            expect(bound.numberConstraints).toBeUndefined();
        });
    });
});
//# sourceMappingURL=data:application/json;base64,