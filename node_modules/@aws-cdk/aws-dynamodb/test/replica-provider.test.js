"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk-mock");
const sinon = require("sinon");
const replica_handler_1 = require("../lib/replica-handler");
AWS.setSDK(require.resolve('aws-sdk'));
const createEvent = {
    RequestType: 'Create',
    ResourceProperties: {
        TableName: 'my-table',
        Region: 'eu-west-2',
        ServiceToken: 'token',
    },
    ServiceToken: 'token',
    ResponseURL: 'url',
    LogicalResourceId: 'logical-id',
    RequestId: 'request-id',
    StackId: 'stack-id',
    ResourceType: 'resource-type',
};
afterEach(() => {
    AWS.restore();
});
test('on event', async () => {
    const updateTableMock = sinon.fake.resolves({});
    AWS.mock('DynamoDB', 'updateTable', updateTableMock);
    const data = await replica_handler_1.onEventHandler(createEvent);
    sinon.assert.calledWith(updateTableMock, {
        TableName: 'my-table',
        ReplicaUpdates: [
            {
                Create: {
                    RegionName: 'eu-west-2',
                },
            },
        ],
    });
    expect(data).toEqual({
        PhysicalResourceId: 'eu-west-2',
    });
});
test('on event does not call updateTable for Update requests', async () => {
    const updateTableMock = sinon.fake.resolves({});
    AWS.mock('DynamoDB', 'updateTable', updateTableMock);
    const data = await replica_handler_1.onEventHandler({
        ...createEvent,
        RequestType: 'Update',
    });
    sinon.assert.notCalled(updateTableMock);
    expect(data).toEqual({
        PhysicalResourceId: 'eu-west-2',
    });
});
test('is complete for create returns false without replicas', async () => {
    const describeTableMock = sinon.fake.resolves({
        Table: {},
    });
    AWS.mock('DynamoDB', 'describeTable', describeTableMock);
    const data = await replica_handler_1.isCompleteHandler(createEvent);
    expect(data).toEqual({ IsComplete: false });
});
test('is complete for create returns false when replica is not active', async () => {
    const describeTableMock = sinon.fake.resolves({
        Table: {
            Replicas: [
                {
                    RegionName: 'eu-west-2',
                    ReplicaStatus: 'CREATING',
                },
            ],
        },
    });
    AWS.mock('DynamoDB', 'describeTable', describeTableMock);
    const data = await replica_handler_1.isCompleteHandler(createEvent);
    expect(data).toEqual({ IsComplete: false });
});
test('is complete for create returns false when table is not active', async () => {
    const describeTableMock = sinon.fake.resolves({
        Table: {
            Replicas: [
                {
                    RegionName: 'eu-west-2',
                    ReplicaStatus: 'ACTIVE',
                },
            ],
            TableStatus: 'UPDATING',
        },
    });
    AWS.mock('DynamoDB', 'describeTable', describeTableMock);
    const data = await replica_handler_1.isCompleteHandler(createEvent);
    expect(data).toEqual({ IsComplete: false });
});
test('is complete for create returns true when replica is active', async () => {
    const describeTableMock = sinon.fake.resolves({
        Table: {
            Replicas: [
                {
                    RegionName: 'eu-west-2',
                    ReplicaStatus: 'ACTIVE',
                },
            ],
            TableStatus: 'ACTIVE',
        },
    });
    AWS.mock('DynamoDB', 'describeTable', describeTableMock);
    const data = await replica_handler_1.isCompleteHandler(createEvent);
    expect(data).toEqual({ IsComplete: true });
});
test('is complete for delete returns true when replica is gone', async () => {
    const describeTableMock = sinon.fake.resolves({
        Table: {
            Replicas: [
                {
                    RegionName: 'eu-west-1',
                    ReplicaStatus: 'ACTIVE',
                },
            ],
            TableStatus: 'ACTIVE',
        },
    });
    AWS.mock('DynamoDB', 'describeTable', describeTableMock);
    const data = await replica_handler_1.isCompleteHandler({
        ...createEvent,
        RequestType: 'Delete',
    });
    expect(data).toEqual({ IsComplete: true });
});
//# sourceMappingURL=data:application/json;base64,