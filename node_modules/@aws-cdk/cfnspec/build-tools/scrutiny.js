"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
const schema_1 = require("../lib/schema");
/**
 * Auto-detect common properties to apply scrutiny to by using heuristics
 *
 * Manually enhancing scrutiny attributes for each property does not scale
 * well. Fortunately, the most important ones follow a common naming scheme and
 * we tag all of them at once in this way.
 *
 * If the heuristic scheme gets it wrong in some individual cases, those can be
 * fixed using schema patches.
 */
function detectScrutinyTypes(spec) {
    for (const [typeName, typeSpec] of Object.entries(spec.ResourceTypes)) {
        if (typeSpec.ScrutinyType !== undefined) {
            continue;
        } // Already assigned
        detectResourceScrutiny(typeName, typeSpec);
        // If a resource scrutiny is set by now, we don't need to look at the properties anymore
        if (typeSpec.ScrutinyType !== undefined) {
            continue;
        }
        for (const [propertyName, propertySpec] of Object.entries(typeSpec.Properties || {})) {
            if (propertySpec.ScrutinyType !== undefined) {
                continue;
            } // Already assigned
            detectPropertyScrutiny(typeName, propertyName, propertySpec);
        }
    }
}
exports.detectScrutinyTypes = detectScrutinyTypes;
/**
 * Detect and assign a scrutiny type for the resource
 */
function detectResourceScrutiny(typeName, typeSpec) {
    const properties = Object.entries(typeSpec.Properties || {});
    // If this resource is named like *Policy and has a PolicyDocument property
    if (typeName.endsWith('Policy') && properties.some(apply2(isPolicyDocumentProperty))) {
        typeSpec.ScrutinyType = isIamType(typeName) ? schema_1.ResourceScrutinyType.IdentityPolicyResource : schema_1.ResourceScrutinyType.ResourcePolicyResource;
        return;
    }
}
/**
 * Detect and assign a scrutiny type for the property
 */
function detectPropertyScrutiny(_typeName, propertyName, propertySpec) {
    // Detect fields named like ManagedPolicyArns
    if (propertyName === 'ManagedPolicyArns') {
        propertySpec.ScrutinyType = schema_1.PropertyScrutinyType.ManagedPolicies;
        return;
    }
    if (propertyName === 'Policies' && lib_1.schema.isComplexListProperty(propertySpec) && propertySpec.ItemType === 'Policy') {
        propertySpec.ScrutinyType = schema_1.PropertyScrutinyType.InlineIdentityPolicies;
        return;
    }
    if (isPolicyDocumentProperty(propertyName, propertySpec)) {
        propertySpec.ScrutinyType = schema_1.PropertyScrutinyType.InlineResourcePolicy;
        return;
    }
}
function isIamType(typeName) {
    return typeName.indexOf('::IAM::') > 1;
}
function isPolicyDocumentProperty(propertyName, propertySpec) {
    const nameContainsPolicy = propertyName.indexOf('Policy') > -1;
    const primitiveType = lib_1.schema.isPrimitiveProperty(propertySpec) && propertySpec.PrimitiveType;
    if (nameContainsPolicy && primitiveType === 'Json') {
        return true;
    }
    return false;
}
/**
 * Make a function that takes 2 arguments take an array of 2 elements instead
 *
 * Makes it possible to map it over an array of arrays. TypeScript won't allow
 * me to overload this type declaration so we need a different function for
 * every # of arguments.
 */
function apply2(fn) {
    return (as) => fn.apply(fn, as);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NydXRpbnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzY3J1dGlueS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGdDQUFnQztBQUNoQywwQ0FBMkU7QUFFM0U7Ozs7Ozs7OztHQVNHO0FBQ0gsU0FBZ0IsbUJBQW1CLENBQUMsSUFBMEI7SUFDNUQsS0FBSyxNQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQ3JFLElBQUksUUFBUSxDQUFDLFlBQVksS0FBSyxTQUFTLEVBQUU7WUFBRSxTQUFTO1NBQUUsQ0FBQyxtQkFBbUI7UUFFMUUsc0JBQXNCLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRTNDLHdGQUF3RjtRQUN4RixJQUFJLFFBQVEsQ0FBQyxZQUFZLEtBQUssU0FBUyxFQUFFO1lBQUUsU0FBUztTQUFFO1FBRXRELEtBQUssTUFBTSxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLEVBQUU7WUFDcEYsSUFBSSxZQUFZLENBQUMsWUFBWSxLQUFLLFNBQVMsRUFBRTtnQkFBRSxTQUFTO2FBQUUsQ0FBQyxtQkFBbUI7WUFFOUUsc0JBQXNCLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQztTQUU5RDtLQUNGO0FBQ0gsQ0FBQztBQWhCRCxrREFnQkM7QUFFRDs7R0FFRztBQUNILFNBQVMsc0JBQXNCLENBQUMsUUFBZ0IsRUFBRSxRQUE2QjtJQUM3RSxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUM7SUFFN0QsMkVBQTJFO0lBQzNFLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLEVBQUU7UUFDcEYsUUFBUSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLDZCQUFvQixDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyw2QkFBb0IsQ0FBQyxzQkFBc0IsQ0FBQztRQUN4SSxPQUFPO0tBQ1I7QUFDSCxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxTQUFTLHNCQUFzQixDQUFDLFNBQWlCLEVBQUUsWUFBb0IsRUFBRSxZQUE2QjtJQUNwRyw2Q0FBNkM7SUFDN0MsSUFBSSxZQUFZLEtBQUssbUJBQW1CLEVBQUU7UUFDeEMsWUFBWSxDQUFDLFlBQVksR0FBRyw2QkFBb0IsQ0FBQyxlQUFlLENBQUM7UUFDakUsT0FBTztLQUNSO0lBRUQsSUFBSSxZQUFZLEtBQUssVUFBVSxJQUFJLFlBQU0sQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsSUFBSSxZQUFZLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRTtRQUNuSCxZQUFZLENBQUMsWUFBWSxHQUFHLDZCQUFvQixDQUFDLHNCQUFzQixDQUFDO1FBQ3hFLE9BQU87S0FDUjtJQUVELElBQUksd0JBQXdCLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxFQUFFO1FBQ3hELFlBQVksQ0FBQyxZQUFZLEdBQUcsNkJBQW9CLENBQUMsb0JBQW9CLENBQUM7UUFDdEUsT0FBTztLQUNSO0FBQ0gsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLFFBQWdCO0lBQ2pDLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUVELFNBQVMsd0JBQXdCLENBQUMsWUFBb0IsRUFBRSxZQUE2QjtJQUNuRixNQUFNLGtCQUFrQixHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDL0QsTUFBTSxhQUFhLEdBQUcsWUFBTSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxJQUFJLFlBQVksQ0FBQyxhQUFhLENBQUM7SUFFN0YsSUFBSSxrQkFBa0IsSUFBSSxhQUFhLEtBQUssTUFBTSxFQUFFO1FBQ2xELE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxTQUFTLE1BQU0sQ0FBWSxFQUF5QjtJQUNsRCxPQUFPLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2NoZW1hIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IFByb3BlcnR5U2NydXRpbnlUeXBlLCBSZXNvdXJjZVNjcnV0aW55VHlwZSB9IGZyb20gJy4uL2xpYi9zY2hlbWEnO1xuXG4vKipcbiAqIEF1dG8tZGV0ZWN0IGNvbW1vbiBwcm9wZXJ0aWVzIHRvIGFwcGx5IHNjcnV0aW55IHRvIGJ5IHVzaW5nIGhldXJpc3RpY3NcbiAqXG4gKiBNYW51YWxseSBlbmhhbmNpbmcgc2NydXRpbnkgYXR0cmlidXRlcyBmb3IgZWFjaCBwcm9wZXJ0eSBkb2VzIG5vdCBzY2FsZVxuICogd2VsbC4gRm9ydHVuYXRlbHksIHRoZSBtb3N0IGltcG9ydGFudCBvbmVzIGZvbGxvdyBhIGNvbW1vbiBuYW1pbmcgc2NoZW1lIGFuZFxuICogd2UgdGFnIGFsbCBvZiB0aGVtIGF0IG9uY2UgaW4gdGhpcyB3YXkuXG4gKlxuICogSWYgdGhlIGhldXJpc3RpYyBzY2hlbWUgZ2V0cyBpdCB3cm9uZyBpbiBzb21lIGluZGl2aWR1YWwgY2FzZXMsIHRob3NlIGNhbiBiZVxuICogZml4ZWQgdXNpbmcgc2NoZW1hIHBhdGNoZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RTY3J1dGlueVR5cGVzKHNwZWM6IHNjaGVtYS5TcGVjaWZpY2F0aW9uKSB7XG4gIGZvciAoY29uc3QgW3R5cGVOYW1lLCB0eXBlU3BlY10gb2YgT2JqZWN0LmVudHJpZXMoc3BlYy5SZXNvdXJjZVR5cGVzKSkge1xuICAgIGlmICh0eXBlU3BlYy5TY3J1dGlueVR5cGUgIT09IHVuZGVmaW5lZCkgeyBjb250aW51ZTsgfSAvLyBBbHJlYWR5IGFzc2lnbmVkXG5cbiAgICBkZXRlY3RSZXNvdXJjZVNjcnV0aW55KHR5cGVOYW1lLCB0eXBlU3BlYyk7XG5cbiAgICAvLyBJZiBhIHJlc291cmNlIHNjcnV0aW55IGlzIHNldCBieSBub3csIHdlIGRvbid0IG5lZWQgdG8gbG9vayBhdCB0aGUgcHJvcGVydGllcyBhbnltb3JlXG4gICAgaWYgKHR5cGVTcGVjLlNjcnV0aW55VHlwZSAhPT0gdW5kZWZpbmVkKSB7IGNvbnRpbnVlOyB9XG5cbiAgICBmb3IgKGNvbnN0IFtwcm9wZXJ0eU5hbWUsIHByb3BlcnR5U3BlY10gb2YgT2JqZWN0LmVudHJpZXModHlwZVNwZWMuUHJvcGVydGllcyB8fCB7fSkpIHtcbiAgICAgIGlmIChwcm9wZXJ0eVNwZWMuU2NydXRpbnlUeXBlICE9PSB1bmRlZmluZWQpIHsgY29udGludWU7IH0gLy8gQWxyZWFkeSBhc3NpZ25lZFxuXG4gICAgICBkZXRlY3RQcm9wZXJ0eVNjcnV0aW55KHR5cGVOYW1lLCBwcm9wZXJ0eU5hbWUsIHByb3BlcnR5U3BlYyk7XG5cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBEZXRlY3QgYW5kIGFzc2lnbiBhIHNjcnV0aW55IHR5cGUgZm9yIHRoZSByZXNvdXJjZVxuICovXG5mdW5jdGlvbiBkZXRlY3RSZXNvdXJjZVNjcnV0aW55KHR5cGVOYW1lOiBzdHJpbmcsIHR5cGVTcGVjOiBzY2hlbWEuUmVzb3VyY2VUeXBlKSB7XG4gIGNvbnN0IHByb3BlcnRpZXMgPSBPYmplY3QuZW50cmllcyh0eXBlU3BlYy5Qcm9wZXJ0aWVzIHx8IHt9KTtcblxuICAvLyBJZiB0aGlzIHJlc291cmNlIGlzIG5hbWVkIGxpa2UgKlBvbGljeSBhbmQgaGFzIGEgUG9saWN5RG9jdW1lbnQgcHJvcGVydHlcbiAgaWYgKHR5cGVOYW1lLmVuZHNXaXRoKCdQb2xpY3knKSAmJiBwcm9wZXJ0aWVzLnNvbWUoYXBwbHkyKGlzUG9saWN5RG9jdW1lbnRQcm9wZXJ0eSkpKSB7XG4gICAgdHlwZVNwZWMuU2NydXRpbnlUeXBlID0gaXNJYW1UeXBlKHR5cGVOYW1lKSA/IFJlc291cmNlU2NydXRpbnlUeXBlLklkZW50aXR5UG9saWN5UmVzb3VyY2UgOiBSZXNvdXJjZVNjcnV0aW55VHlwZS5SZXNvdXJjZVBvbGljeVJlc291cmNlO1xuICAgIHJldHVybjtcbiAgfVxufVxuXG4vKipcbiAqIERldGVjdCBhbmQgYXNzaWduIGEgc2NydXRpbnkgdHlwZSBmb3IgdGhlIHByb3BlcnR5XG4gKi9cbmZ1bmN0aW9uIGRldGVjdFByb3BlcnR5U2NydXRpbnkoX3R5cGVOYW1lOiBzdHJpbmcsIHByb3BlcnR5TmFtZTogc3RyaW5nLCBwcm9wZXJ0eVNwZWM6IHNjaGVtYS5Qcm9wZXJ0eSkge1xuICAvLyBEZXRlY3QgZmllbGRzIG5hbWVkIGxpa2UgTWFuYWdlZFBvbGljeUFybnNcbiAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ01hbmFnZWRQb2xpY3lBcm5zJykge1xuICAgIHByb3BlcnR5U3BlYy5TY3J1dGlueVR5cGUgPSBQcm9wZXJ0eVNjcnV0aW55VHlwZS5NYW5hZ2VkUG9saWNpZXM7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ1BvbGljaWVzJyAmJiBzY2hlbWEuaXNDb21wbGV4TGlzdFByb3BlcnR5KHByb3BlcnR5U3BlYykgJiYgcHJvcGVydHlTcGVjLkl0ZW1UeXBlID09PSAnUG9saWN5Jykge1xuICAgIHByb3BlcnR5U3BlYy5TY3J1dGlueVR5cGUgPSBQcm9wZXJ0eVNjcnV0aW55VHlwZS5JbmxpbmVJZGVudGl0eVBvbGljaWVzO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpc1BvbGljeURvY3VtZW50UHJvcGVydHkocHJvcGVydHlOYW1lLCBwcm9wZXJ0eVNwZWMpKSB7XG4gICAgcHJvcGVydHlTcGVjLlNjcnV0aW55VHlwZSA9IFByb3BlcnR5U2NydXRpbnlUeXBlLklubGluZVJlc291cmNlUG9saWN5O1xuICAgIHJldHVybjtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0lhbVR5cGUodHlwZU5hbWU6IHN0cmluZykge1xuICByZXR1cm4gdHlwZU5hbWUuaW5kZXhPZignOjpJQU06OicpID4gMTtcbn1cblxuZnVuY3Rpb24gaXNQb2xpY3lEb2N1bWVudFByb3BlcnR5KHByb3BlcnR5TmFtZTogc3RyaW5nLCBwcm9wZXJ0eVNwZWM6IHNjaGVtYS5Qcm9wZXJ0eSkge1xuICBjb25zdCBuYW1lQ29udGFpbnNQb2xpY3kgPSBwcm9wZXJ0eU5hbWUuaW5kZXhPZignUG9saWN5JykgPiAtMTtcbiAgY29uc3QgcHJpbWl0aXZlVHlwZSA9IHNjaGVtYS5pc1ByaW1pdGl2ZVByb3BlcnR5KHByb3BlcnR5U3BlYykgJiYgcHJvcGVydHlTcGVjLlByaW1pdGl2ZVR5cGU7XG5cbiAgaWYgKG5hbWVDb250YWluc1BvbGljeSAmJiBwcmltaXRpdmVUeXBlID09PSAnSnNvbicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogTWFrZSBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgMiBhcmd1bWVudHMgdGFrZSBhbiBhcnJheSBvZiAyIGVsZW1lbnRzIGluc3RlYWRcbiAqXG4gKiBNYWtlcyBpdCBwb3NzaWJsZSB0byBtYXAgaXQgb3ZlciBhbiBhcnJheSBvZiBhcnJheXMuIFR5cGVTY3JpcHQgd29uJ3QgYWxsb3dcbiAqIG1lIHRvIG92ZXJsb2FkIHRoaXMgdHlwZSBkZWNsYXJhdGlvbiBzbyB3ZSBuZWVkIGEgZGlmZmVyZW50IGZ1bmN0aW9uIGZvclxuICogZXZlcnkgIyBvZiBhcmd1bWVudHMuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5MjxUMSwgVDIsIFI+KGZuOiAoYTE6IFQxLCBhMjogVDIpID0+IFIpOiAoYXM6IFtUMSwgVDJdKSA9PiBSIHtcbiAgcmV0dXJuIChhcykgPT4gZm4uYXBwbHkoZm4sIGFzKTtcbn0iXX0=