"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_types_1 = require("./base-types");
var UpdateType;
(function (UpdateType) {
    UpdateType["Conditional"] = "Conditional";
    UpdateType["Immutable"] = "Immutable";
    UpdateType["Mutable"] = "Mutable";
})(UpdateType = exports.UpdateType || (exports.UpdateType = {}));
function isUpdateType(str) {
    switch (str) {
        case UpdateType.Conditional:
        case UpdateType.Immutable:
        case UpdateType.Mutable:
            return true;
        default:
            return false;
    }
}
exports.isUpdateType = isUpdateType;
function isScalarProperty(prop) {
    return isPrimitiveProperty(prop)
        || isComplexProperty(prop)
        // A UnionProperty is only Scalar if it defines Types or PrimitiveTypes
        || (isUnionProperty(prop) && !!(prop.Types || prop.PrimitiveTypes));
}
exports.isScalarProperty = isScalarProperty;
function isPrimitiveProperty(prop) {
    return !!prop.PrimitiveType;
}
exports.isPrimitiveProperty = isPrimitiveProperty;
function isComplexProperty(prop) {
    const propType = prop.Type;
    return propType != null && propType !== 'Map' && propType !== 'List';
}
exports.isComplexProperty = isComplexProperty;
function isCollectionProperty(prop) {
    return isListProperty(prop)
        || isMapProperty(prop)
        // A UnionProperty is only Collection if it defines ItemTypes or PrimitiveItemTypes
        || (isUnionProperty(prop) && !!(prop.ItemTypes || prop.PrimitiveItemTypes));
}
exports.isCollectionProperty = isCollectionProperty;
function isListProperty(prop) {
    return prop.Type === 'List';
}
exports.isListProperty = isListProperty;
function isPrimitiveListProperty(prop) {
    return isListProperty(prop) && !!prop.PrimitiveItemType;
}
exports.isPrimitiveListProperty = isPrimitiveListProperty;
function isComplexListProperty(prop) {
    return isListProperty(prop) && !!prop.ItemType;
}
exports.isComplexListProperty = isComplexListProperty;
function isMapProperty(prop) {
    return prop.Type === 'Map';
}
exports.isMapProperty = isMapProperty;
function isPrimitiveMapProperty(prop) {
    return isMapProperty(prop) && !!prop.PrimitiveItemType;
}
exports.isPrimitiveMapProperty = isPrimitiveMapProperty;
function isComplexMapProperty(prop) {
    return isMapProperty(prop) && !!prop.ItemType;
}
exports.isComplexMapProperty = isComplexMapProperty;
function isUnionProperty(prop) {
    const castProp = prop;
    return !!(castProp.ItemTypes || castProp.PrimitiveTypes || castProp.Types);
}
exports.isUnionProperty = isUnionProperty;
var PropertyScrutinyType;
(function (PropertyScrutinyType) {
    /**
     * No additional scrutiny
     */
    PropertyScrutinyType["None"] = "None";
    /**
     * This is an IAM policy directly on a resource
     */
    PropertyScrutinyType["InlineResourcePolicy"] = "InlineResourcePolicy";
    /**
     * Either an AssumeRolePolicyDocument or a dictionary of policy documents
     */
    PropertyScrutinyType["InlineIdentityPolicies"] = "InlineIdentityPolicies";
    /**
     * A list of managed policies (on an identity resource)
     */
    PropertyScrutinyType["ManagedPolicies"] = "ManagedPolicies";
    /**
     * A set of ingress rules (on a security group)
     */
    PropertyScrutinyType["IngressRules"] = "IngressRules";
    /**
     * A set of egress rules (on a security group)
     */
    PropertyScrutinyType["EgressRules"] = "EgressRules";
})(PropertyScrutinyType = exports.PropertyScrutinyType || (exports.PropertyScrutinyType = {}));
function isPropertyScrutinyType(str) {
    return PropertyScrutinyType[str] !== undefined;
}
exports.isPropertyScrutinyType = isPropertyScrutinyType;
const tagPropertyNames = {
    FileSystemTags: '',
    HostedZoneTags: '',
    Tags: '',
    UserPoolTags: '',
};
function isTagPropertyName(name) {
    if (undefined === name) {
        return false;
    }
    return tagPropertyNames.hasOwnProperty(name);
}
exports.isTagPropertyName = isTagPropertyName;
/**
 * This function validates that the property **can** be a Tag Property
 *
 * The property is only a Tag if the name of this property is Tags, which is
 * validated using `ResourceType.isTaggable(resource)`.
 */
function isTagProperty(prop) {
    return (isTagPropertyStandard(prop) ||
        isTagPropertyAutoScalingGroup(prop) ||
        isTagPropertyJson(prop) ||
        isTagPropertyStringMap(prop));
}
exports.isTagProperty = isTagProperty;
function isTagPropertyStandard(prop) {
    return (prop.ItemType === 'Tag' ||
        prop.ItemType === 'TagsEntry' ||
        prop.Type === 'Tags' ||
        prop.ItemType === 'TagRef' ||
        prop.ItemType === 'ElasticFileSystemTag' ||
        prop.ItemType === 'HostedZoneTag');
}
exports.isTagPropertyStandard = isTagPropertyStandard;
function isTagPropertyAutoScalingGroup(prop) {
    return prop.ItemType === 'TagProperty';
}
exports.isTagPropertyAutoScalingGroup = isTagPropertyAutoScalingGroup;
function isTagPropertyJson(prop) {
    return prop.PrimitiveType === base_types_1.PrimitiveType.Json;
}
exports.isTagPropertyJson = isTagPropertyJson;
function isTagPropertyStringMap(prop) {
    return prop.PrimitiveItemType === 'String';
}
exports.isTagPropertyStringMap = isTagPropertyStringMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwcm9wZXJ0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUF5RDtBQXVIekQsSUFBWSxVQUlYO0FBSkQsV0FBWSxVQUFVO0lBQ3BCLHlDQUEyQixDQUFBO0lBQzNCLHFDQUF1QixDQUFBO0lBQ3ZCLGlDQUFtQixDQUFBO0FBQ3JCLENBQUMsRUFKVyxVQUFVLEdBQVYsa0JBQVUsS0FBVixrQkFBVSxRQUlyQjtBQUVELFNBQWdCLFlBQVksQ0FBQyxHQUFXO0lBQ3RDLFFBQVEsR0FBRyxFQUFFO1FBQ1gsS0FBSyxVQUFVLENBQUMsV0FBVyxDQUFDO1FBQzVCLEtBQUssVUFBVSxDQUFDLFNBQVMsQ0FBQztRQUMxQixLQUFLLFVBQVUsQ0FBQyxPQUFPO1lBQ3JCLE9BQU8sSUFBSSxDQUFDO1FBQ2Q7WUFDRSxPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNILENBQUM7QUFURCxvQ0FTQztBQUVELFNBQWdCLGdCQUFnQixDQUFDLElBQWM7SUFDN0MsT0FBTyxtQkFBbUIsQ0FBQyxJQUFJLENBQUM7V0FDM0IsaUJBQWlCLENBQUMsSUFBSSxDQUFDO1FBQzFCLHVFQUF1RTtXQUNwRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0FBQ3hFLENBQUM7QUFMRCw0Q0FLQztBQUVELFNBQWdCLG1CQUFtQixDQUFDLElBQWM7SUFDaEQsT0FBTyxDQUFDLENBQUUsSUFBMEIsQ0FBQyxhQUFhLENBQUM7QUFDckQsQ0FBQztBQUZELGtEQUVDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUMsSUFBYztJQUM5QyxNQUFNLFFBQVEsR0FBSSxJQUF3QixDQUFDLElBQUksQ0FBQztJQUNoRCxPQUFPLFFBQVEsSUFBSSxJQUFJLElBQUksUUFBUSxLQUFLLEtBQUssSUFBSSxRQUFRLEtB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QTZCLENBQUMsSUFBSSxDQUFDO1FBQ25DLGlCQUFpQixDQUFDLElBQUksQ0FBQztRQUN2QixzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FDN0IsQ0FBQztBQUNKLENBQUM7QUFQRCxzQ0FPQztBQUVELFNBQWdCLHFCQUFxQixDQUFDLElBQWM7SUFDbEQsT0FBTyxDQUNKLElBQTRCLENBQUMsUUFBUSxLQUFLLEtBQUs7UUFDL0MsSUFBNEIsQ0FBQyxRQUFRLEtBQUssV0FBVztRQUNyRCxJQUE0QixDQUFDLElBQUksS0FBSyxNQUFNO1FBQzVDLElBQTRCLENBQUMsUUFBUSxLQUFLLFFBQVE7UUFDbEQsSUFBNEIsQ0FBQyxRQUFRLEtBQUssc0JBQXNCO1FBQ2hFLElBQTRCLENBQUMsUUFBUSxLQUFLLGVBQWUsQ0FDM0QsQ0FBQztBQUVKLENBQUM7QUFWRCxzREFVQztBQUVELFNBQWdCLDZCQUE2QixDQUFDLElBQWM7SUFDMUQsT0FBUSxJQUFvQyxDQUFDLFFBQVEsS0FBSyxhQUFhLENBQUM7QUFDMUUsQ0FBQztBQUZELHNFQUVDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUMsSUFBYztJQUM5QyxPQUFRLElBQXdCLENBQUMsYUFBYSxLQUFLLDBCQUFhLENBQUMsSUFBSSxDQUFDO0FBQ3hFLENBQUM7QUFGRCw4Q0FFQztBQUVELFNBQWdCLHNCQUFzQixDQUFDLElBQWM7SUFDbkQsT0FBUSxJQUE2QixDQUFDLGlCQUFpQixLQUFLLFFBQVEsQ0FBQztBQUN2RSxDQUFDO0FBRkQsd0RBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb2N1bWVudGVkLCBQcmltaXRpdmVUeXBlIH0gZnJvbSAnLi9iYXNlLXR5cGVzJztcblxuZXhwb3J0IHR5cGUgUHJvcGVydHkgPSBTY2FsYXJQcm9wZXJ0eSB8IENvbGxlY3Rpb25Qcm9wZXJ0eTtcbmV4cG9ydCB0eXBlIFNjYWxhclByb3BlcnR5ID0gUHJpbWl0aXZlUHJvcGVydHkgfCBDb21wbGV4UHJvcGVydHkgfCBVbmlvblByb3BlcnR5O1xuZXhwb3J0IHR5cGUgQ29sbGVjdGlvblByb3BlcnR5ID0gTGlzdFByb3BlcnR5IHwgTWFwUHJvcGVydHkgfCBVbmlvblByb3BlcnR5O1xuZXhwb3J0IHR5cGUgTGlzdFByb3BlcnR5ID0gUHJpbWl0aXZlTGlzdFByb3BlcnR5IHwgQ29tcGxleExpc3RQcm9wZXJ0eTtcbmV4cG9ydCB0eXBlIE1hcFByb3BlcnR5ID0gUHJpbWl0aXZlTWFwUHJvcGVydHkgfCBDb21wbGV4TWFwUHJvcGVydHk7XG5leHBvcnQgdHlwZSBUYWdQcm9wZXJ0eSA9IFRhZ1Byb3BlcnR5U3RhbmRhcmQgfCBUYWdQcm9wZXJ0eUF1dG9TY2FsaW5nR3JvdXAgfCBUYWdQcm9wZXJ0eUpzb24gfCBUYWdQcm9wZXJ0eVN0cmluZ01hcDtcblxuZXhwb3J0IGludGVyZmFjZSBQcm9wZXJ0eUJhc2UgZXh0ZW5kcyBEb2N1bWVudGVkIHtcbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBwcm9wZXJ0eSBpcyByZXF1aXJlZC5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIFJlcXVpcmVkPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIER1cmluZyBhIHN0YWNrIHVwZGF0ZSwgdGhlIHVwZGF0ZSBiZWhhdmlvciB3aGVuIHlvdSBhZGQsIHJlbW92ZSwgb3IgbW9kaWZ5IHRoZSBwcm9wZXJ0eS4gQVdTIENsb3VkRm9ybWF0aW9uXG4gICAqIHJlcGxhY2VzIHRoZSByZXNvdXJjZSB3aGVuIHlvdSBjaGFuZ2UgYMOMbW11dGFibGVgYHByb3BlcnRpZXMuIEFXUyBDbG91ZEZvcm1hdGlvbiBkb2Vzbid0IHJlcGxhY2UgdGhlIHJlc291cmNlXG4gICAqIHdoZW4geW91IGNoYW5nZSBgYE11dGFibGVgYCBwcm9wZXJ0aWVzLiBgYENvbmRpdGlvbmFsYGAgdXBkYXRlcyBjYW4gYmUgbXV0YWJsZSBvciBpbW11dGFibGUsIGRlcGVuZGluZyBvbiwgZm9yXG4gICAqIGV4YW1wbGUsIHdoaWNoIG90aGVyIHByb3BlcnRpZXMgeW91IHVwZGF0ZWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IFVwZGF0ZVR5cGUuTXV0YWJsZVxuICAgKi9cbiAgVXBkYXRlVHlwZT86IFVwZGF0ZVR5cGU7XG5cbiAgLyoqXG4gICAqIER1cmluZyBhIHN0YWNrIHVwZGF0ZSwgd2hhdCBraW5kIG9mIGFkZGl0aW9uYWwgc2NydXRpbnkgY2hhbmdlcyB0byB0aGlzIHByb3BlcnR5IHNob3VsZCBiZSBzdWJqZWN0ZWQgdG9cbiAgICpcbiAgICogQGRlZmF1bHQgTm9uZVxuICAgKi9cbiAgU2NydXRpbnlUeXBlPzogUHJvcGVydHlTY3J1dGlueVR5cGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJpbWl0aXZlUHJvcGVydHkgZXh0ZW5kcyBQcm9wZXJ0eUJhc2Uge1xuICAvKiogVGhlIHZhbGlkIHByaW1pdGl2ZSB0eXBlIGZvciB0aGUgcHJvcGVydHkuICovXG4gIFByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGxleFByb3BlcnR5IGV4dGVuZHMgUHJvcGVydHlCYXNlIHtcbiAgLyoqIFRoZSB0eXBlIG9mIHZhbGlkIHZhbHVlcyBmb3IgdGhpcyBwcm9wZXJ0eSAqL1xuICBUeXBlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlzdFByb3BlcnR5QmFzZSBleHRlbmRzIFByb3BlcnR5QmFzZSB7XG4gIC8qKlxuICAgKiBBIGxpc3QgaXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiB2YWx1ZXMuXG4gICAqL1xuICBUeXBlOiAnTGlzdCc7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciBBV1MgQ2xvdWRGb3JtYXRpb24gYWxsb3dzIGR1cGxpY2F0ZSB2YWx1ZXMuIElmIHRoZSB2YWx1ZSBpcyBgYHRydWVgYCwgQVdTIENsb3VkRm9ybWF0aW9uXG4gICAqIGlnbm9yZXMgZHVwbGljYXRlIHZhbHVlcy4gaWYgdGhlIHZhbHVlIGlzICBgYGZhbHNlYGAsIEFXUyBDbG91ZEZvcm1hdGlvbiByZXR1cm5zIGFuIGFycm9yIGlmIHlvdSBzdWJtaXQgZHVwbGljYXRlXG4gICAqIHZhbHVlcy5cbiAgICovXG4gIER1cGxpY2F0ZXNBbGxvd2VkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQcmltaXRpdmVMaXN0UHJvcGVydHkgZXh0ZW5kcyBMaXN0UHJvcGVydHlCYXNlIHtcbiAgLyoqIFRoZSB2YWxpZCBwcmltaXRpdmUgdHlwZSBmb3IgdGhlIHByb3BlcnR5LiAqL1xuICBQcmltaXRpdmVJdGVtVHlwZTogUHJpbWl0aXZlVHlwZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21wbGV4TGlzdFByb3BlcnR5IGV4dGVuZHMgTGlzdFByb3BlcnR5QmFzZSB7XG4gIC8qKiBWYWxpZCB2YWx1ZXMgZm9yIHRoZSBwcm9wZXJ0eSAqL1xuICBJdGVtVHlwZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1hcFByb3BlcnR5QmFzZSBleHRlbmRzIFByb3BlcnR5QmFzZSB7XG4gIC8qKiBBIG1hcCBpcyBhIHNldCBvZiBrZXktdmFsdWUgcGFpcnMsIHdoZXJlIHRoZSBrZXlzIGFyZSBhbHdheXMgc3RyaW5ncy4gKi9cbiAgVHlwZTogJ01hcCc7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciBBV1MgQ2xvdWRGb3JtYXRpb24gYWxsb3dzIGR1cGxpY2F0ZSB2YWx1ZXMuIElmIHRoZSB2YWx1ZSBpcyBgYHRydWVgYCwgQVdTIENsb3VkRm9ybWF0aW9uXG4gICAqIGlnbm9yZXMgZHVwbGljYXRlIHZhbHVlcy4gaWYgdGhlIHZhbHVlIGlzICBgYGZhbHNlYGAsIEFXUyBDbG91ZEZvcm1hdGlvbiByZXR1cm5zIGFuIGFycm9yIGlmIHlvdSBzdWJtaXQgZHVwbGljYXRlXG4gICAqIHZhbHVlcy5cbiAgICovXG4gIER1cGxpY2F0ZXNBbGxvd2VkPzogZmFsc2U7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJpbWl0aXZlTWFwUHJvcGVydHkgZXh0ZW5kcyBNYXBQcm9wZXJ0eUJhc2Uge1xuICAvKiogVGhlIHZhbGlkIHByaW1pdGl2ZSB0eXBlIGZvciB0aGUgcHJvcGVydHkuICovXG4gIFByaW1pdGl2ZUl0ZW1UeXBlOiBQcmltaXRpdmVUeXBlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBsZXhNYXBQcm9wZXJ0eSBleHRlbmRzIE1hcFByb3BlcnR5QmFzZSB7XG4gIC8qKiBWYWxpZCB2YWx1ZXMgZm9yIHRoZSBwcm9wZXJ0eSAqL1xuICBJdGVtVHlwZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRhZ1Byb3BlcnR5U3RhbmRhcmQgZXh0ZW5kcyBQcm9wZXJ0eUJhc2Uge1xuICBJdGVtVHlwZTogJ1RhZycgfCAnVGFnc0VudHJ5JyB8ICdUYWdSZWYnIHwgJ0VsYXN0aWNGaWxlU3lzdGVtVGFnJyB8ICdIb3N0ZWRab25lVGFnJztcbiAgVHlwZTogJ1RhZ3MnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRhZ1Byb3BlcnR5QXV0b1NjYWxpbmdHcm91cCBleHRlbmRzIFByb3BlcnR5QmFzZSB7XG4gIEl0ZW1UeXBlOiAnVGFnUHJvcGVydHknO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRhZ1Byb3BlcnR5SnNvbiBleHRlbmRzIFByb3BlcnR5QmFzZSB7XG4gIFByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGUuSnNvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUYWdQcm9wZXJ0eVN0cmluZ01hcCBleHRlbmRzIFByb3BlcnR5QmFzZSB7XG4gIFByaW1pdGl2ZUl0ZW1UeXBlOiAnU3RyaW5nJztcbn1cblxuLyoqXG4gKiBBIHByb3BlcnR5IHR5cGUgdGhhdCBjYW4gYmUgb25lIG9mIHNldmVyYWwgdHlwZXMuIEN1cnJlbnRseSB1c2VkIG9ubHkgaW4gU0FNLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFVuaW9uUHJvcGVydHkgZXh0ZW5kcyBQcm9wZXJ0eUJhc2Uge1xuICAvKiogVmFsaWQgcHJpbWl0aXZlIHR5cGVzIGZvciB0aGUgcHJvcGVydHkgKi9cbiAgUHJpbWl0aXZlVHlwZXM/OiBQcmltaXRpdmVUeXBlW107XG4gIC8qKiBWYWxpZCBjb21wbGV4IHR5cGVzIGZvciB0aGUgcHJvcGVydHkgKi9cbiAgVHlwZXM/OiBzdHJpbmdbXVxuICAvKiogVmFsaWQgcHJpbWl0aXZlIGl0ZW0gdHlwZXMgZm9yIHRoaXMgcHJvcGVydHkgKi9cbiAgUHJpbWl0aXZlSXRlbVR5cGVzPzogUHJpbWl0aXZlVHlwZVtdO1xuICAvKiogVmFsaWQgbGlzdCBpdGVtIHR5cGVzIGZvciB0aGUgcHJvcGVydHkgKi9cbiAgSXRlbVR5cGVzPzogc3RyaW5nW107XG59XG5cbmV4cG9ydCBlbnVtIFVwZGF0ZVR5cGUge1xuICBDb25kaXRpb25hbCA9ICdDb25kaXRpb25hbCcsXG4gIEltbXV0YWJsZSA9ICdJbW11dGFibGUnLFxuICBNdXRhYmxlID0gJ011dGFibGUnXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1VwZGF0ZVR5cGUoc3RyOiBzdHJpbmcpOiBzdHIgaXMgVXBkYXRlVHlwZSB7XG4gIHN3aXRjaCAoc3RyKSB7XG4gICAgY2FzZSBVcGRhdGVUeXBlLkNvbmRpdGlvbmFsOlxuICAgIGNhc2UgVXBkYXRlVHlwZS5JbW11dGFibGU6XG4gICAgY2FzZSBVcGRhdGVUeXBlLk11dGFibGU6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NjYWxhclByb3BlcnR5KHByb3A6IFByb3BlcnR5KTogcHJvcCBpcyBTY2FsYXJQcm9wZXJ0eSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZVByb3BlcnR5KHByb3ApXG4gICAgfHwgaXNDb21wbGV4UHJvcGVydHkocHJvcClcbiAgICAvLyBBIFVuaW9uUHJvcGVydHkgaXMgb25seSBTY2FsYXIgaWYgaXQgZGVmaW5lcyBUeXBlcyBvciBQcmltaXRpdmVUeXBlc1xuICAgIHx8IChpc1VuaW9uUHJvcGVydHkocHJvcCkgJiYgISEocHJvcC5UeXBlcyB8fCBwcm9wLlByaW1pdGl2ZVR5cGVzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ByaW1pdGl2ZVByb3BlcnR5KHByb3A6IFByb3BlcnR5KTogcHJvcCBpcyBQcmltaXRpdmVQcm9wZXJ0eSB7XG4gIHJldHVybiAhIShwcm9wIGFzIFByaW1pdGl2ZVByb3BlcnR5KS5QcmltaXRpdmVUeXBlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb21wbGV4UHJvcGVydHkocHJvcDogUHJvcGVydHkpOiBwcm9wIGlzIENvbXBsZXhQcm9wZXJ0eSB7XG4gIGNvbnN0IHByb3BUeXBlID0gKHByb3AgYXMgQ29tcGxleFByb3BlcnR5KS5UeXBlO1xuICByZXR1cm4gcHJvcFR5cGUgIT0gbnVsbCAmJiBwcm9wVHlwZSAhPT0gJ01hcCcgJiYgcHJvcFR5cGUgIT09ICdMaXN0Jztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29sbGVjdGlvblByb3BlcnR5KHByb3A6IFByb3BlcnR5KTogcHJvcCBpcyBDb2xsZWN0aW9uUHJvcGVydHkge1xuICByZXR1cm4gaXNMaXN0UHJvcGVydHkocHJvcClcbiAgICB8fCBpc01hcFByb3BlcnR5KHByb3ApXG4gICAgLy8gQSBVbmlvblByb3BlcnR5IGlzIG9ubHkgQ29sbGVjdGlvbiBpZiBpdCBkZWZpbmVzIEl0ZW1UeXBlcyBvciBQcmltaXRpdmVJdGVtVHlwZXNcbiAgICB8fCAoaXNVbmlvblByb3BlcnR5KHByb3ApICYmICEhKHByb3AuSXRlbVR5cGVzIHx8IHByb3AuUHJpbWl0aXZlSXRlbVR5cGVzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xpc3RQcm9wZXJ0eShwcm9wOiBQcm9wZXJ0eSk6IHByb3AgaXMgTGlzdFByb3BlcnR5IHtcbiAgcmV0dXJuIChwcm9wIGFzIExpc3RQcm9wZXJ0eSkuVHlwZSA9PT0gJ0xpc3QnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQcmltaXRpdmVMaXN0UHJvcGVydHkocHJvcDogUHJvcGVydHkpOiBwcm9wIGlzIFByaW1pdGl2ZUxpc3RQcm9wZXJ0eSB7XG4gIHJldHVybiBpc0xpc3RQcm9wZXJ0eShwcm9wKSAmJiAhIShwcm9wIGFzIFByaW1pdGl2ZUxpc3RQcm9wZXJ0eSkuUHJpbWl0aXZlSXRlbVR5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbXBsZXhMaXN0UHJvcGVydHkocHJvcDogUHJvcGVydHkpOiBwcm9wIGlzIENvbXBsZXhMaXN0UHJvcGVydHkge1xuICByZXR1cm4gaXNMaXN0UHJvcGVydHkocHJvcCkgJiYgISEocHJvcCBhcyBDb21wbGV4TGlzdFByb3BlcnR5KS5JdGVtVHlwZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTWFwUHJvcGVydHkocHJvcDogUHJvcGVydHkpOiBwcm9wIGlzIE1hcFByb3BlcnR5IHtcbiAgcmV0dXJuIChwcm9wIGFzIE1hcFByb3BlcnR5KS5UeXBlID09PSAnTWFwJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpbWl0aXZlTWFwUHJvcGVydHkocHJvcDogUHJvcGVydHkpOiBwcm9wIGlzIFByaW1pdGl2ZU1hcFByb3BlcnR5IHtcbiAgcmV0dXJuIGlzTWFwUHJvcGVydHkocHJvcCkgJiYgISEocHJvcCBhcyBQcmltaXRpdmVNYXBQcm9wZXJ0eSkuUHJpbWl0aXZlSXRlbVR5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbXBsZXhNYXBQcm9wZXJ0eShwcm9wOiBQcm9wZXJ0eSk6IHByb3AgaXMgQ29tcGxleE1hcFByb3BlcnR5IHtcbiAgcmV0dXJuIGlzTWFwUHJvcGVydHkocHJvcCkgJiYgISEocHJvcCBhcyBDb21wbGV4TWFwUHJvcGVydHkpLkl0ZW1UeXBlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNVbmlvblByb3BlcnR5KHByb3A6IFByb3BlcnR5KTogcHJvcCBpcyBVbmlvblByb3BlcnR5IHtcbiAgY29uc3QgY2FzdFByb3AgPSBwcm9wIGFzIFVuaW9uUHJvcGVydHk7XG4gIHJldHVybiAhIShjYXN0UHJvcC5JdGVtVHlwZXMgfHwgY2FzdFByb3AuUHJpbWl0aXZlVHlwZXMgfHwgY2FzdFByb3AuVHlwZXMpO1xufVxuXG5leHBvcnQgZW51bSBQcm9wZXJ0eVNjcnV0aW55VHlwZSB7XG4gIC8qKlxuICAgKiBObyBhZGRpdGlvbmFsIHNjcnV0aW55XG4gICAqL1xuICBOb25lID0gJ05vbmUnLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGFuIElBTSBwb2xpY3kgZGlyZWN0bHkgb24gYSByZXNvdXJjZVxuICAgKi9cbiAgSW5saW5lUmVzb3VyY2VQb2xpY3kgPSAnSW5saW5lUmVzb3VyY2VQb2xpY3knLFxuXG4gIC8qKlxuICAgKiBFaXRoZXIgYW4gQXNzdW1lUm9sZVBvbGljeURvY3VtZW50IG9yIGEgZGljdGlvbmFyeSBvZiBwb2xpY3kgZG9jdW1lbnRzXG4gICAqL1xuICBJbmxpbmVJZGVudGl0eVBvbGljaWVzID0gJ0lubGluZUlkZW50aXR5UG9saWNpZXMnLFxuXG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgbWFuYWdlZCBwb2xpY2llcyAob24gYW4gaWRlbnRpdHkgcmVzb3VyY2UpXG4gICAqL1xuICBNYW5hZ2VkUG9saWNpZXMgPSAnTWFuYWdlZFBvbGljaWVzJyxcblxuICAvKipcbiAgICogQSBzZXQgb2YgaW5ncmVzcyBydWxlcyAob24gYSBzZWN1cml0eSBncm91cClcbiAgICovXG4gIEluZ3Jlc3NSdWxlcyA9ICdJbmdyZXNzUnVsZXMnLFxuXG4gIC8qKlxuICAgKiBBIHNldCBvZiBlZ3Jlc3MgcnVsZXMgKG9uIGEgc2VjdXJpdHkgZ3JvdXApXG4gICAqL1xuICBFZ3Jlc3NSdWxlcyA9ICdFZ3Jlc3NSdWxlcycsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3BlcnR5U2NydXRpbnlUeXBlKHN0cjogc3RyaW5nKTogc3RyIGlzIFByb3BlcnR5U2NydXRpbnlUeXBlIHtcbiAgcmV0dXJuIChQcm9wZXJ0eVNjcnV0aW55VHlwZSBhcyBhbnkpW3N0cl0gIT09IHVuZGVmaW5lZDtcbn1cblxuY29uc3QgdGFnUHJvcGVydHlOYW1lcyA9IHtcbiAgRmlsZVN5c3RlbVRhZ3M6ICcnLFxuICBIb3N0ZWRab25lVGFnczogJycsXG4gIFRhZ3M6ICcnLFxuICBVc2VyUG9vbFRhZ3M6ICcnLFxufTtcblxuZXhwb3J0IHR5cGUgVGFnUHJvcGVydHlOYW1lID0ga2V5b2YgdHlwZW9mIHRhZ1Byb3BlcnR5TmFtZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RhZ1Byb3BlcnR5TmFtZShuYW1lPzogc3RyaW5nKTogbmFtZSBpcyBUYWdQcm9wZXJ0eU5hbWUge1xuICBpZiAodW5kZWZpbmVkID09PSBuYW1lKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0YWdQcm9wZXJ0eU5hbWVzLmhhc093blByb3BlcnR5KG5hbWUpO1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHZhbGlkYXRlcyB0aGF0IHRoZSBwcm9wZXJ0eSAqKmNhbioqIGJlIGEgVGFnIFByb3BlcnR5XG4gKlxuICogVGhlIHByb3BlcnR5IGlzIG9ubHkgYSBUYWcgaWYgdGhlIG5hbWUgb2YgdGhpcyBwcm9wZXJ0eSBpcyBUYWdzLCB3aGljaCBpc1xuICogdmFsaWRhdGVkIHVzaW5nIGBSZXNvdXJjZVR5cGUuaXNUYWdnYWJsZShyZXNvdXJjZSlgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNUYWdQcm9wZXJ0eShwcm9wOiBQcm9wZXJ0eSk6IHByb3AgaXMgVGFnUHJvcGVydHkge1xuICByZXR1cm4gKFxuICAgIGlzVGFnUHJvcGVydHlTdGFuZGFyZChwcm9wKSB8fFxuICAgIGlzVGFnUHJvcGVydHlBdXRvU2NhbGluZ0dyb3VwKHByb3ApIHx8XG4gICAgaXNUYWdQcm9wZXJ0eUpzb24ocHJvcCkgfHxcbiAgICBpc1RhZ1Byb3BlcnR5U3RyaW5nTWFwKHByb3ApXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RhZ1Byb3BlcnR5U3RhbmRhcmQocHJvcDogUHJvcGVydHkpOiBwcm9wIGlzIFRhZ1Byb3BlcnR5U3RhbmRhcmQge1xuICByZXR1cm4gKFxuICAgIChwcm9wIGFzIFRhZ1Byb3BlcnR5U3RhbmRhcmQpLkl0ZW1UeXBlID09PSAnVGFnJyB8fFxuICAgIChwcm9wIGFzIFRhZ1Byb3BlcnR5U3RhbmRhcmQpLkl0ZW1UeXBlID09PSAnVGFnc0VudHJ5JyB8fFxuICAgIChwcm9wIGFzIFRhZ1Byb3BlcnR5U3RhbmRhcmQpLlR5cGUgPT09ICdUYWdzJyB8fFxuICAgIChwcm9wIGFzIFRhZ1Byb3BlcnR5U3RhbmRhcmQpLkl0ZW1UeXBlID09PSAnVGFnUmVmJyB8fFxuICAgIChwcm9wIGFzIFRhZ1Byb3BlcnR5U3RhbmRhcmQpLkl0ZW1UeXBlID09PSAnRWxhc3RpY0ZpbGVTeXN0ZW1UYWcnIHx8XG4gICAgKHByb3AgYXMgVGFnUHJvcGVydHlTdGFuZGFyZCkuSXRlbVR5cGUgPT09ICdIb3N0ZWRab25lVGFnJ1xuICApO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RhZ1Byb3BlcnR5QXV0b1NjYWxpbmdHcm91cChwcm9wOiBQcm9wZXJ0eSk6IHByb3AgaXMgVGFnUHJvcGVydHlBdXRvU2NhbGluZ0dyb3VwIHtcbiAgcmV0dXJuIChwcm9wIGFzIFRhZ1Byb3BlcnR5QXV0b1NjYWxpbmdHcm91cCkuSXRlbVR5cGUgPT09ICdUYWdQcm9wZXJ0eSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RhZ1Byb3BlcnR5SnNvbihwcm9wOiBQcm9wZXJ0eSk6IHByb3AgaXMgVGFnUHJvcGVydHlKc29uIHtcbiAgcmV0dXJuIChwcm9wIGFzIFRhZ1Byb3BlcnR5SnNvbikuUHJpbWl0aXZlVHlwZSA9PT0gUHJpbWl0aXZlVHlwZS5Kc29uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNUYWdQcm9wZXJ0eVN0cmluZ01hcChwcm9wOiBQcm9wZXJ0eSk6IHByb3AgaXMgVGFnUHJvcGVydHlTdHJpbmdNYXAge1xuICByZXR1cm4gKHByb3AgYXMgVGFnUHJvcGVydHlTdHJpbmdNYXApLlByaW1pdGl2ZUl0ZW1UeXBlID09PSAnU3RyaW5nJztcbn1cbiJdfQ==