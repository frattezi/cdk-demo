"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Calculate differences of immutable elements
 */
class DiffableCollection {
    constructor() {
        this.additions = [];
        this.removals = [];
        this.oldElements = [];
        this.newElements = [];
    }
    addOld(...elements) {
        this.oldElements.push(...elements);
    }
    addNew(...elements) {
        this.newElements.push(...elements);
    }
    calculateDiff() {
        this.additions.push(...difference(this.newElements, this.oldElements));
        this.removals.push(...difference(this.oldElements, this.newElements));
    }
    get hasChanges() {
        return this.additions.length + this.removals.length > 0;
    }
    get hasAdditions() {
        return this.additions.length > 0;
    }
    get hasRemovals() {
        return this.removals.length > 0;
    }
}
exports.DiffableCollection = DiffableCollection;
/**
 * Whether a collection contains some element (by value)
 */
function contains(element, xs) {
    return xs.some(x => x.equal(element));
}
/**
 * Return collection except for elements
 */
function difference(collection, elements) {
    return collection.filter(x => !contains(x, elements));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlmZmFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkaWZmYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztHQUVHO0FBQ0gsTUFBYSxrQkFBa0I7SUFBL0I7UUFDa0IsY0FBUyxHQUFRLEVBQUUsQ0FBQztRQUNwQixhQUFRLEdBQVEsRUFBRSxDQUFDO1FBRWxCLGdCQUFXLEdBQVEsRUFBRSxDQUFDO1FBQ3RCLGdCQUFXLEdBQVEsRUFBRSxDQUFDO0lBMEJ6QyxDQUFDO0lBeEJRLE1BQU0sQ0FBQyxHQUFHLFFBQWE7UUFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRU0sTUFBTSxDQUFDLEdBQUcsUUFBYTtRQUM1QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFTSxhQUFhO1FBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxJQUFXLFlBQVk7UUFDckIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELElBQVcsV0FBVztRQUNwQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDO0NBQ0Y7QUEvQkQsZ0RBK0JDO0FBU0Q7O0dBRUc7QUFDSCxTQUFTLFFBQVEsQ0FBa0IsT0FBVSxFQUFFLEVBQU87SUFDcEQsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFFRDs7R0FFRztBQUNILFNBQVMsVUFBVSxDQUFrQixVQUFlLEVBQUUsUUFBYTtJQUNqRSxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUN4RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDYWxjdWxhdGUgZGlmZmVyZW5jZXMgb2YgaW1tdXRhYmxlIGVsZW1lbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBEaWZmYWJsZUNvbGxlY3Rpb248VCBleHRlbmRzIEVxPFQ+PiB7XG4gIHB1YmxpYyByZWFkb25seSBhZGRpdGlvbnM6IFRbXSA9IFtdO1xuICBwdWJsaWMgcmVhZG9ubHkgcmVtb3ZhbHM6IFRbXSA9IFtdO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgb2xkRWxlbWVudHM6IFRbXSA9IFtdO1xuICBwcml2YXRlIHJlYWRvbmx5IG5ld0VsZW1lbnRzOiBUW10gPSBbXTtcblxuICBwdWJsaWMgYWRkT2xkKC4uLmVsZW1lbnRzOiBUW10pIHtcbiAgICB0aGlzLm9sZEVsZW1lbnRzLnB1c2goLi4uZWxlbWVudHMpO1xuICB9XG5cbiAgcHVibGljIGFkZE5ldyguLi5lbGVtZW50czogVFtdKSB7XG4gICAgdGhpcy5uZXdFbGVtZW50cy5wdXNoKC4uLmVsZW1lbnRzKTtcbiAgfVxuXG4gIHB1YmxpYyBjYWxjdWxhdGVEaWZmKCkge1xuICAgIHRoaXMuYWRkaXRpb25zLnB1c2goLi4uZGlmZmVyZW5jZSh0aGlzLm5ld0VsZW1lbnRzLCB0aGlzLm9sZEVsZW1lbnRzKSk7XG4gICAgdGhpcy5yZW1vdmFscy5wdXNoKC4uLmRpZmZlcmVuY2UodGhpcy5vbGRFbGVtZW50cywgdGhpcy5uZXdFbGVtZW50cykpO1xuICB9XG5cbiAgcHVibGljIGdldCBoYXNDaGFuZ2VzKCkge1xuICAgIHJldHVybiB0aGlzLmFkZGl0aW9ucy5sZW5ndGggKyB0aGlzLnJlbW92YWxzLmxlbmd0aCA+IDA7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGhhc0FkZGl0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5hZGRpdGlvbnMubGVuZ3RoID4gMDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaGFzUmVtb3ZhbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVtb3ZhbHMubGVuZ3RoID4gMDtcbiAgfVxufVxuXG4vKipcbiAqIFRoaW5ncyB0aGF0IGNhbiBiZSBjb21wYXJlZCB0byB0aGVtc2VsdmVzIChieSB2YWx1ZSlcbiAqL1xuaW50ZXJmYWNlIEVxPFQ+IHtcbiAgZXF1YWwob3RoZXI6IFQpOiBib29sZWFuO1xufVxuXG4vKipcbiAqIFdoZXRoZXIgYSBjb2xsZWN0aW9uIGNvbnRhaW5zIHNvbWUgZWxlbWVudCAoYnkgdmFsdWUpXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zPFQgZXh0ZW5kcyBFcTxUPj4oZWxlbWVudDogVCwgeHM6IFRbXSkge1xuICByZXR1cm4geHMuc29tZSh4ID0+IHguZXF1YWwoZWxlbWVudCkpO1xufVxuXG4vKipcbiAqIFJldHVybiBjb2xsZWN0aW9uIGV4Y2VwdCBmb3IgZWxlbWVudHNcbiAqL1xuZnVuY3Rpb24gZGlmZmVyZW5jZTxUIGV4dGVuZHMgRXE8VD4+KGNvbGxlY3Rpb246IFRbXSwgZWxlbWVudHM6IFRbXSkge1xuICByZXR1cm4gY29sbGVjdGlvbi5maWx0ZXIoeCA9PiAhY29udGFpbnMoeCwgZWxlbWVudHMpKTtcbn1cbiJdfQ==