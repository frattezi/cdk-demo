"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Turn CloudFormation intrinsics into strings
 *
 * ------
 *
 * This stringification is not intended to be mechanically reversible! It's intended
 * to be understood by humans!
 *
 * ------
 *
 * Turns Fn::GetAtt and Fn::Ref objects into the same strings that can be
 * parsed by Fn::Sub, but without the surrounding intrinsics.
 *
 * Evaluates Fn::Join directly if the second argument is a literal list of strings.
 *
 * Removes list and object values evaluating to { Ref: 'AWS::NoValue' }.
 *
 * For other intrinsics we choose a string representation that CloudFormation
 * cannot actually parse, but is comprehensible to humans.
 */
function renderIntrinsics(x) {
    if (Array.isArray(x)) {
        return x.filter(el => !isNoValue(el)).map(renderIntrinsics);
    }
    if (isNoValue(x)) {
        return undefined;
    }
    const intrinsic = getIntrinsic(x);
    if (intrinsic) {
        if (intrinsic.fn === 'Ref') {
            return '${' + intrinsic.args + '}';
        }
        if (intrinsic.fn === 'Fn::GetAtt') {
            return '${' + intrinsic.args[0] + '.' + intrinsic.args[1] + '}';
        }
        if (intrinsic.fn === 'Fn::Join') {
            return unCloudFormationFnJoin(intrinsic.args[0], intrinsic.args[1]);
        }
        return stringifyIntrinsic(intrinsic.fn, intrinsic.args);
    }
    if (typeof x === 'object' && x !== null) {
        const ret = {};
        for (const [key, value] of Object.entries(x)) {
            if (!isNoValue(value)) {
                ret[key] = renderIntrinsics(value);
            }
        }
        return ret;
    }
    return x;
}
exports.renderIntrinsics = renderIntrinsics;
function unCloudFormationFnJoin(separator, args) {
    if (Array.isArray(args)) {
        return args.filter(el => !isNoValue(el)).map(renderIntrinsics).join(separator);
    }
    return stringifyIntrinsic('Fn::Join', [separator, args]);
}
function stringifyIntrinsic(fn, args) {
    return JSON.stringify({ [fn]: renderIntrinsics(args) });
}
function getIntrinsic(x) {
    if (x === undefined || x === null || Array.isArray(x)) {
        return undefined;
    }
    if (typeof x !== 'object') {
        return undefined;
    }
    const keys = Object.keys(x);
    return keys.length === 1 && (keys[0] === 'Ref' || keys[0].startsWith('Fn::')) ? { fn: keys[0], args: x[keys[0]] } : undefined;
}
function isNoValue(x) {
    const int = getIntrinsic(x);
    return int && int.fn === 'Ref' && int.args === 'AWS::NoValue';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLWludHJpbnNpY3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZW5kZXItaW50cmluc2ljcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBQ0gsU0FBZ0IsZ0JBQWdCLENBQUMsQ0FBTTtJQUNyQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDcEIsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztLQUM3RDtJQUVELElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQUUsT0FBTyxTQUFTLENBQUM7S0FBRTtJQUV2QyxNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEMsSUFBSSxTQUFTLEVBQUU7UUFDYixJQUFJLFNBQVMsQ0FBQyxFQUFFLEtBQUssS0FBSyxFQUFFO1lBQUUsT0FBTyxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7U0FBRTtRQUNuRSxJQUFJLFNBQVMsQ0FBQyxFQUFFLEtBQUssWUFBWSxFQUFFO1lBQUUsT0FBTyxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7U0FBRTtRQUN2RyxJQUFJLFNBQVMsQ0FBQyxFQUFFLEtBQUssVUFBVSxFQUFFO1lBQUUsT0FBTyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUFFO1FBQ3pHLE9BQU8sa0JBQWtCLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDekQ7SUFFRCxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3ZDLE1BQU0sR0FBRyxHQUFRLEVBQUUsQ0FBQztRQUNwQixLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUM1QyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNyQixHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDcEM7U0FDRjtRQUNELE9BQU8sR0FBRyxDQUFDO0tBQ1o7SUFDRCxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUM7QUF6QkQsNENBeUJDO0FBRUQsU0FBUyxzQkFBc0IsQ0FBQyxTQUFpQixFQUFFLElBQVM7SUFDMUQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ2hGO0lBQ0QsT0FBTyxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxFQUFVLEVBQUUsSUFBUztJQUMvQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsQ0FBTTtJQUMxQixJQUFJLENBQUMsS0FBSyxTQUFTLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQUUsT0FBTyxTQUFTLENBQUM7S0FBRTtJQUM1RSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUFFLE9BQU8sU0FBUyxDQUFDO0tBQUU7SUFDaEQsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QixPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNoSSxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsQ0FBTTtJQUN2QixNQUFNLEdBQUcsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUIsT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxLQUFLLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxjQUFjLENBQUM7QUFDaEUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVHVybiBDbG91ZEZvcm1hdGlvbiBpbnRyaW5zaWNzIGludG8gc3RyaW5nc1xuICpcbiAqIC0tLS0tLVxuICpcbiAqIFRoaXMgc3RyaW5naWZpY2F0aW9uIGlzIG5vdCBpbnRlbmRlZCB0byBiZSBtZWNoYW5pY2FsbHkgcmV2ZXJzaWJsZSEgSXQncyBpbnRlbmRlZFxuICogdG8gYmUgdW5kZXJzdG9vZCBieSBodW1hbnMhXG4gKlxuICogLS0tLS0tXG4gKlxuICogVHVybnMgRm46OkdldEF0dCBhbmQgRm46OlJlZiBvYmplY3RzIGludG8gdGhlIHNhbWUgc3RyaW5ncyB0aGF0IGNhbiBiZVxuICogcGFyc2VkIGJ5IEZuOjpTdWIsIGJ1dCB3aXRob3V0IHRoZSBzdXJyb3VuZGluZyBpbnRyaW5zaWNzLlxuICpcbiAqIEV2YWx1YXRlcyBGbjo6Sm9pbiBkaXJlY3RseSBpZiB0aGUgc2Vjb25kIGFyZ3VtZW50IGlzIGEgbGl0ZXJhbCBsaXN0IG9mIHN0cmluZ3MuXG4gKlxuICogUmVtb3ZlcyBsaXN0IGFuZCBvYmplY3QgdmFsdWVzIGV2YWx1YXRpbmcgdG8geyBSZWY6ICdBV1M6Ok5vVmFsdWUnIH0uXG4gKlxuICogRm9yIG90aGVyIGludHJpbnNpY3Mgd2UgY2hvb3NlIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIHRoYXQgQ2xvdWRGb3JtYXRpb25cbiAqIGNhbm5vdCBhY3R1YWxseSBwYXJzZSwgYnV0IGlzIGNvbXByZWhlbnNpYmxlIHRvIGh1bWFucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckludHJpbnNpY3MoeDogYW55KTogYW55IHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcbiAgICByZXR1cm4geC5maWx0ZXIoZWwgPT4gIWlzTm9WYWx1ZShlbCkpLm1hcChyZW5kZXJJbnRyaW5zaWNzKTtcbiAgfVxuXG4gIGlmIChpc05vVmFsdWUoeCkpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfVxuXG4gIGNvbnN0IGludHJpbnNpYyA9IGdldEludHJpbnNpYyh4KTtcbiAgaWYgKGludHJpbnNpYykge1xuICAgIGlmIChpbnRyaW5zaWMuZm4gPT09ICdSZWYnKSB7IHJldHVybiAnJHsnICsgaW50cmluc2ljLmFyZ3MgKyAnfSc7IH1cbiAgICBpZiAoaW50cmluc2ljLmZuID09PSAnRm46OkdldEF0dCcpIHsgcmV0dXJuICckeycgKyBpbnRyaW5zaWMuYXJnc1swXSArICcuJyArIGludHJpbnNpYy5hcmdzWzFdICsgJ30nOyB9XG4gICAgaWYgKGludHJpbnNpYy5mbiA9PT0gJ0ZuOjpKb2luJykgeyByZXR1cm4gdW5DbG91ZEZvcm1hdGlvbkZuSm9pbihpbnRyaW5zaWMuYXJnc1swXSwgaW50cmluc2ljLmFyZ3NbMV0pOyB9XG4gICAgcmV0dXJuIHN0cmluZ2lmeUludHJpbnNpYyhpbnRyaW5zaWMuZm4sIGludHJpbnNpYy5hcmdzKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgeCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHJldDogYW55ID0ge307XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoeCkpIHtcbiAgICAgIGlmICghaXNOb1ZhbHVlKHZhbHVlKSkge1xuICAgICAgICByZXRba2V5XSA9IHJlbmRlckludHJpbnNpY3ModmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG4gIHJldHVybiB4O1xufVxuXG5mdW5jdGlvbiB1bkNsb3VkRm9ybWF0aW9uRm5Kb2luKHNlcGFyYXRvcjogc3RyaW5nLCBhcmdzOiBhbnkpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJncykpIHtcbiAgICByZXR1cm4gYXJncy5maWx0ZXIoZWwgPT4gIWlzTm9WYWx1ZShlbCkpLm1hcChyZW5kZXJJbnRyaW5zaWNzKS5qb2luKHNlcGFyYXRvcik7XG4gIH1cbiAgcmV0dXJuIHN0cmluZ2lmeUludHJpbnNpYygnRm46OkpvaW4nLCBbc2VwYXJhdG9yLCBhcmdzXSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUludHJpbnNpYyhmbjogc3RyaW5nLCBhcmdzOiBhbnkpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHsgW2ZuXTogcmVuZGVySW50cmluc2ljcyhhcmdzKSB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0SW50cmluc2ljKHg6IGFueSk6IEludHJpbnNpYyB8IHVuZGVmaW5lZCB7XG4gIGlmICh4ID09PSB1bmRlZmluZWQgfHwgeCA9PT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KHgpKSB7IHJldHVybiB1bmRlZmluZWQ7IH1cbiAgaWYgKHR5cGVvZiB4ICE9PSAnb2JqZWN0JykgeyByZXR1cm4gdW5kZWZpbmVkOyB9XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh4KTtcbiAgcmV0dXJuIGtleXMubGVuZ3RoID09PSAxICYmIChrZXlzWzBdID09PSAnUmVmJyB8fCBrZXlzWzBdLnN0YXJ0c1dpdGgoJ0ZuOjonKSkgPyB7IGZuOiBrZXlzWzBdLCBhcmdzOiB4W2tleXNbMF1dIH0gOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGlzTm9WYWx1ZSh4OiBhbnkpIHtcbiAgY29uc3QgaW50ID0gZ2V0SW50cmluc2ljKHgpO1xuICByZXR1cm4gaW50ICYmIGludC5mbiA9PT0gJ1JlZicgJiYgaW50LmFyZ3MgPT09ICdBV1M6Ok5vVmFsdWUnO1xufVxuXG5pbnRlcmZhY2UgSW50cmluc2ljIHtcbiAgZm46IHN0cmluZztcbiAgYXJnczogYW55O1xufSJdfQ==