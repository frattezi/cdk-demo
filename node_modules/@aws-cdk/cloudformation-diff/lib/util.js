"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Turn a (multi-key) extraction function into a comparator for use in Array.sort()
 */
function makeComparator(keyFn) {
    return (a, b) => {
        const keyA = keyFn(a);
        const keyB = keyFn(b);
        const len = Math.min(keyA.length, keyB.length);
        for (let i = 0; i < len; i++) {
            const c = compare(keyA[i], keyB[i]);
            if (c !== 0) {
                return c;
            }
        }
        // Arrays are the same up to the min length -- shorter array sorts first
        return keyA.length - keyB.length;
    };
}
exports.makeComparator = makeComparator;
function compare(a, b) {
    if (a < b) {
        return -1;
    }
    if (b < a) {
        return 1;
    }
    return 0;
}
function dropIfEmpty(xs) {
    return xs.length > 0 ? xs : undefined;
}
exports.dropIfEmpty = dropIfEmpty;
function deepRemoveUndefined(x) {
    if (typeof x === undefined || x === null) {
        return x;
    }
    if (Array.isArray(x)) {
        return x.map(deepRemoveUndefined);
    }
    if (typeof x === 'object') {
        for (const [key, value] of Object.entries(x)) {
            x[key] = deepRemoveUndefined(value);
            if (x[key] === undefined) {
                delete x[key];
            }
        }
        return x;
    }
    return x;
}
exports.deepRemoveUndefined = deepRemoveUndefined;
function flatMap(xs, f) {
    const ret = new Array();
    for (const x of xs) {
        ret.push(...f(x));
    }
    return ret;
}
exports.flatMap = flatMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7R0FFRztBQUNILFNBQWdCLGNBQWMsQ0FBTyxLQUFvQjtJQUN2RCxPQUFPLENBQUMsQ0FBSSxFQUFFLENBQUksRUFBRSxFQUFFO1FBQ3BCLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUvQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzVCLE1BQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQUU7U0FDM0I7UUFFRCx3RUFBd0U7UUFDeEUsT0FBTyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDbkMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQWRELHdDQWNDO0FBRUQsU0FBUyxPQUFPLENBQUksQ0FBSSxFQUFFLENBQUk7SUFDNUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUFFO0lBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQUU7SUFDeEIsT0FBTyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBRUQsU0FBZ0IsV0FBVyxDQUFJLEVBQU87SUFDcEMsT0FBTyxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDeEMsQ0FBQztBQUZELGtDQUVDO0FBRUQsU0FBZ0IsbUJBQW1CLENBQUMsQ0FBTTtJQUN4QyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFNBQVMsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQUUsT0FBTyxDQUFDLENBQUM7S0FBRTtJQUN2RCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFBRSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztLQUFFO0lBQzVELElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQ3pCLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzVDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLEVBQUU7Z0JBQUUsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7YUFBRTtTQUM3QztRQUNELE9BQU8sQ0FBQyxDQUFDO0tBQ1Y7SUFDRCxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUM7QUFYRCxrREFXQztBQUVELFNBQWdCLE9BQU8sQ0FBTyxFQUFPLEVBQUUsQ0FBZ0I7SUFDckQsTUFBTSxHQUFHLEdBQUcsSUFBSSxLQUFLLEVBQUssQ0FBQztJQUMzQixLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNsQixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbkI7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFORCwwQkFNQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVHVybiBhIChtdWx0aS1rZXkpIGV4dHJhY3Rpb24gZnVuY3Rpb24gaW50byBhIGNvbXBhcmF0b3IgZm9yIHVzZSBpbiBBcnJheS5zb3J0KClcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VDb21wYXJhdG9yPFQsIFU+KGtleUZuOiAoeDogVCkgPT4gVVtdKSB7XG4gIHJldHVybiAoYTogVCwgYjogVCkgPT4ge1xuICAgIGNvbnN0IGtleUEgPSBrZXlGbihhKTtcbiAgICBjb25zdCBrZXlCID0ga2V5Rm4oYik7XG4gICAgY29uc3QgbGVuID0gTWF0aC5taW4oa2V5QS5sZW5ndGgsIGtleUIubGVuZ3RoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGMgPSBjb21wYXJlKGtleUFbaV0sIGtleUJbaV0pO1xuICAgICAgaWYgKGMgIT09IDApIHsgcmV0dXJuIGM7IH1cbiAgICB9XG5cbiAgICAvLyBBcnJheXMgYXJlIHRoZSBzYW1lIHVwIHRvIHRoZSBtaW4gbGVuZ3RoIC0tIHNob3J0ZXIgYXJyYXkgc29ydHMgZmlyc3RcbiAgICByZXR1cm4ga2V5QS5sZW5ndGggLSBrZXlCLmxlbmd0aDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZTxUPihhOiBULCBiOiBUKSB7XG4gIGlmIChhIDwgYikgeyByZXR1cm4gLTE7IH1cbiAgaWYgKGIgPCBhKSB7IHJldHVybiAxOyB9XG4gIHJldHVybiAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZHJvcElmRW1wdHk8VD4oeHM6IFRbXSk6IFRbXSB8IHVuZGVmaW5lZCB7XG4gIHJldHVybiB4cy5sZW5ndGggPiAwID8geHMgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWVwUmVtb3ZlVW5kZWZpbmVkKHg6IGFueSk6IGFueSB7XG4gIGlmICh0eXBlb2YgeCA9PT0gdW5kZWZpbmVkIHx8IHggPT09IG51bGwpIHsgcmV0dXJuIHg7IH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHsgcmV0dXJuIHgubWFwKGRlZXBSZW1vdmVVbmRlZmluZWQpOyB9XG4gIGlmICh0eXBlb2YgeCA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh4KSkge1xuICAgICAgeFtrZXldID0gZGVlcFJlbW92ZVVuZGVmaW5lZCh2YWx1ZSk7XG4gICAgICBpZiAoeFtrZXldID09PSB1bmRlZmluZWQpIHsgZGVsZXRlIHhba2V5XTsgfVxuICAgIH1cbiAgICByZXR1cm4geDtcbiAgfVxuICByZXR1cm4geDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZsYXRNYXA8VCwgVT4oeHM6IFRbXSwgZjogKHg6IFQpID0+IFVbXSk6IFVbXSB7XG4gIGNvbnN0IHJldCA9IG5ldyBBcnJheTxVPigpO1xuICBmb3IgKGNvbnN0IHggb2YgeHMpIHtcbiAgICByZXQucHVzaCguLi5mKHgpKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufSJdfQ==