"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../../lib");
const util_1 = require("../util");
describe('broadening is', () => {
    test('adding of positive statements', () => {
        // WHEN
        const diff = lib_1.diffTemplate({}, util_1.template({
            QueuePolicy: util_1.resource('AWS::SQS::QueuePolicy', {
                Queues: [{ Ref: 'MyQueue' }],
                PolicyDocument: util_1.poldoc({
                    Effect: 'Allow',
                    Action: 'sqs:SendMessage',
                    Resource: '*',
                    Principal: { Service: 'sns.amazonaws.com' },
                }),
            }),
        }));
        // THEN
        expect(diff.permissionsBroadened).toBe(true);
    });
    test('adding of positive statements to an existing policy', () => {
        // WHEN
        const diff = lib_1.diffTemplate(util_1.template({
            QueuePolicy: util_1.resource('AWS::SQS::QueuePolicy', {
                Queues: [{ Ref: 'MyQueue' }],
                PolicyDocument: util_1.poldoc({
                    Effect: 'Allow',
                    Action: 'sqs:SendMessage',
                    Resource: '*',
                    Principal: { Service: 'sns.amazonaws.com' },
                }),
            }),
        }), util_1.template({
            QueuePolicy: util_1.resource('AWS::SQS::QueuePolicy', {
                Queues: [{ Ref: 'MyQueue' }],
                PolicyDocument: util_1.poldoc({
                    Effect: 'Allow',
                    Action: 'sqs:SendMessage',
                    Resource: '*',
                    Principal: { Service: 'sns.amazonaws.com' },
                }, {
                    Effect: 'Allow',
                    Action: 'sqs:LookAtMessage',
                    Resource: '*',
                    Principal: { Service: 'sns.amazonaws.com' },
                }),
            }),
        }));
        // THEN
        expect(diff.permissionsBroadened).toBe(true);
    });
    test('removal of not-statements', () => {
        // WHEN
        const diff = lib_1.diffTemplate(util_1.template({
            QueuePolicy: util_1.resource('AWS::SQS::QueuePolicy', {
                Queues: [{ Ref: 'MyQueue' }],
                PolicyDocument: util_1.poldoc({
                    Effect: 'Allow',
                    Action: 'sqs:SendMessage',
                    Resource: '*',
                    NotPrincipal: { Service: 'sns.amazonaws.com' },
                }),
            }),
        }), {});
        // THEN
        expect(diff.permissionsBroadened).toBe(true);
    });
    test('changing of resource target', () => {
        // WHEN
        const diff = lib_1.diffTemplate(util_1.template({
            QueuePolicy: util_1.resource('AWS::SQS::QueuePolicy', {
                Queues: [{ Ref: 'MyQueue' }],
                PolicyDocument: util_1.poldoc({
                    Effect: 'Allow',
                    Action: 'sqs:SendMessage',
                    Resource: '*',
                    Principal: { Service: 'sns.amazonaws.com' },
                }),
            }),
        }), util_1.template({
            QueuePolicy: util_1.resource('AWS::SQS::QueuePolicy', {
                Queues: [{ Ref: 'MyOtherQueue' }],
                PolicyDocument: util_1.poldoc({
                    Effect: 'Allow',
                    Action: 'sqs:SendMessage',
                    Resource: '*',
                    Principal: { Service: 'sns.amazonaws.com' },
                }),
            }),
        }));
        // THEN
        expect(diff.permissionsBroadened).toBe(true);
    });
    test('addition of ingress rules', () => {
        // WHEN
        const diff = lib_1.diffTemplate(util_1.template({}), util_1.template({
            SG: util_1.resource('AWS::EC2::SecurityGroup', {
                SecurityGroupIngress: [
                    {
                        CidrIp: '1.2.3.4/8',
                        FromPort: 80,
                        ToPort: 80,
                        IpProtocol: 'tcp',
                    },
                ],
            }),
        }));
        // THEN
        expect(diff.permissionsBroadened).toBe(true);
    });
    test('addition of egress rules', () => {
        // WHEN
        const diff = lib_1.diffTemplate(util_1.template({}), util_1.template({
            SG: util_1.resource('AWS::EC2::SecurityGroup', {
                SecurityGroupEgress: [
                    {
                        DestinationSecurityGroupId: { 'Fn::GetAtt': ['ThatOtherGroup', 'GroupId'] },
                        FromPort: 80,
                        ToPort: 80,
                        IpProtocol: 'tcp',
                    },
                ],
            }),
        }));
        // THEN
        expect(diff.permissionsBroadened).toBe(true);
    });
});
describe('broadening is not', () => {
    test('removal of positive statements from an existing policy', () => {
        // WHEN
        const diff = lib_1.diffTemplate(util_1.template({
            QueuePolicy: util_1.resource('AWS::SQS::QueuePolicy', {
                Queues: [{ Ref: 'MyQueue' }],
                PolicyDocument: util_1.poldoc({
                    Effect: 'Allow',
                    Action: 'sqs:SendMessage',
                    Resource: '*',
                    Principal: { Service: 'sns.amazonaws.com' },
                }, {
                    Effect: 'Allow',
                    Action: 'sqs:LookAtMessage',
                    Resource: '*',
                    Principal: { Service: 'sns.amazonaws.com' },
                }),
            }),
        }), util_1.template({
            QueuePolicy: util_1.resource('AWS::SQS::QueuePolicy', {
                Queues: [{ Ref: 'MyQueue' }],
                PolicyDocument: util_1.poldoc({
                    Effect: 'Allow',
                    Action: 'sqs:SendMessage',
                    Resource: '*',
                    Principal: { Service: 'sns.amazonaws.com' },
                }),
            }),
        }));
        // THEN
        expect(diff.permissionsBroadened).toBe(false);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvYWRlbmluZy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYnJvYWRlbmluZy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQXlDO0FBQ3pDLGtDQUFxRDtBQUVyRCxRQUFRLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtJQUM3QixJQUFJLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO1FBQ3pDLE9BQU87UUFDUCxNQUFNLElBQUksR0FBRyxrQkFBWSxDQUFDLEVBQUUsRUFBRSxlQUFRLENBQUM7WUFDckMsV0FBVyxFQUFFLGVBQVEsQ0FBQyx1QkFBdUIsRUFBRTtnQkFDN0MsTUFBTSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLENBQUM7Z0JBQzVCLGNBQWMsRUFBRSxhQUFNLENBQUM7b0JBQ3JCLE1BQU0sRUFBRSxPQUFPO29CQUNmLE1BQU0sRUFBRSxpQkFBaUI7b0JBQ3pCLFFBQVEsRUFBRSxHQUFHO29CQUNiLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRTtpQkFDNUMsQ0FBQzthQUNILENBQUM7U0FDSCxDQUFDLENBQUMsQ0FBQztRQUVKLE9BQU87UUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLHFEQUFxRCxFQUFFLEdBQUcsRUFBRTtRQUMvRCxPQUFPO1FBQ1AsTUFBTSxJQUFJLEdBQUcsa0JBQVksQ0FBQyxlQUFRLENBQUM7WUFDakMsV0FBVyxFQUFFLGVBQVEsQ0FBQyx1QkFBdUIsRUFBRTtnQkFDN0MsTUFBTSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLENBQUM7Z0JBQzVCLGNBQWMsRUFBRSxhQUFNLENBQ3BCO29CQUNFLE1BQU0sRUFBRSxPQUFPO29CQUNmLE1BQU0sRUFBRSxpQkFBaUI7b0JBQ3pC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ZlRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCB7IHBvbGRvYywgcmVzb3VyY2UsIHRlbXBsYXRlIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmRlc2NyaWJlKCdicm9hZGVuaW5nIGlzJywgKCkgPT4ge1xuICB0ZXN0KCdhZGRpbmcgb2YgcG9zaXRpdmUgc3RhdGVtZW50cycsICgpID0+IHtcbiAgICAvLyBXSEVOXG4gICAgY29uc3QgZGlmZiA9IGRpZmZUZW1wbGF0ZSh7fSwgdGVtcGxhdGUoe1xuICAgICAgUXVldWVQb2xpY3k6IHJlc291cmNlKCdBV1M6OlNRUzo6UXVldWVQb2xpY3knLCB7XG4gICAgICAgIFF1ZXVlczogW3sgUmVmOiAnTXlRdWV1ZScgfV0sXG4gICAgICAgIFBvbGljeURvY3VtZW50OiBwb2xkb2Moe1xuICAgICAgICAgIEVmZmVjdDogJ0FsbG93JyxcbiAgICAgICAgICBBY3Rpb246ICdzcXM6U2VuZE1lc3NhZ2UnLFxuICAgICAgICAgIFJlc291cmNlOiAnKicsXG4gICAgICAgICAgUHJpbmNpcGFsOiB7IFNlcnZpY2U6ICdzbnMuYW1hem9uYXdzLmNvbScgfSxcbiAgICAgICAgfSksXG4gICAgICB9KSxcbiAgICB9KSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KGRpZmYucGVybWlzc2lvbnNCcm9hZGVuZWQpLnRvQmUodHJ1ZSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2FkZGluZyBvZiBwb3NpdGl2ZSBzdGF0ZW1lbnRzIHRvIGFuIGV4aXN0aW5nIHBvbGljeScsICgpID0+IHtcbiAgICAvLyBXSEVOXG4gICAgY29uc3QgZGlmZiA9IGRpZmZUZW1wbGF0ZSh0ZW1wbGF0ZSh7XG4gICAgICBRdWV1ZVBvbGljeTogcmVzb3VyY2UoJ0FXUzo6U1FTOjpRdWV1ZVBvbGljeScsIHtcbiAgICAgICAgUXVldWVzOiBbeyBSZWY6ICdNeVF1ZXVlJyB9XSxcbiAgICAgICAgUG9saWN5RG9jdW1lbnQ6IHBvbGRvYyhcbiAgICAgICAgICB7XG4gICAgICAgICAgICBFZmZlY3Q6ICdBbGxvdycsXG4gICAgICAgICAgICBBY3Rpb246ICdzcXM6U2VuZE1lc3NhZ2UnLFxuICAgICAgICAgICAgUmVzb3VyY2U6ICcqJyxcbiAgICAgICAgICAgIFByaW5jaXBhbDogeyBTZXJ2aWNlOiAnc25zLmFtYXpvbmF3cy5jb20nIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgKSxcbiAgICAgIH0pLFxuICAgIH0pLCB0ZW1wbGF0ZSh7XG4gICAgICBRdWV1ZVBvbGljeTogcmVzb3VyY2UoJ0FXUzo6U1FTOjpRdWV1ZVBvbGljeScsIHtcbiAgICAgICAgUXVldWVzOiBbeyBSZWY6ICdNeVF1ZXVlJyB9XSxcbiAgICAgICAgUG9saWN5RG9jdW1lbnQ6IHBvbGRvYyhcbiAgICAgICAgICB7XG4gICAgICAgICAgICBFZmZlY3Q6ICdBbGxvdycsXG4gICAgICAgICAgICBBY3Rpb246ICdzcXM6U2VuZE1lc3NhZ2UnLFxuICAgICAgICAgICAgUmVzb3VyY2U6ICcqJyxcbiAgICAgICAgICAgIFByaW5jaXBhbDogeyBTZXJ2aWNlOiAnc25zLmFtYXpvbmF3cy5jb20nIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBFZmZlY3Q6ICdBbGxvdycsXG4gICAgICAgICAgICBBY3Rpb246ICdzcXM6TG9va0F0TWVzc2FnZScsXG4gICAgICAgICAgICBSZXNvdXJjZTogJyonLFxuICAgICAgICAgICAgUHJpbmNpcGFsOiB7IFNlcnZpY2U6ICdzbnMuYW1hem9uYXdzLmNvbScgfSxcbiAgICAgICAgICB9LFxuICAgICAgICApLFxuICAgICAgfSksXG4gICAgfSkpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChkaWZmLnBlcm1pc3Npb25zQnJvYWRlbmVkKS50b0JlKHRydWUpO1xuICB9KTtcblxuICB0ZXN0KCdyZW1vdmFsIG9mIG5vdC1zdGF0ZW1lbnRzJywgKCkgPT4ge1xuICAgIC8vIFdIRU5cbiAgICBjb25zdCBkaWZmID0gZGlmZlRlbXBsYXRlKHRlbXBsYXRlKHtcbiAgICAgIFF1ZXVlUG9saWN5OiByZXNvdXJjZSgnQVdTOjpTUVM6OlF1ZXVlUG9saWN5Jywge1xuICAgICAgICBRdWV1ZXM6IFt7IFJlZjogJ015UXVldWUnIH1dLFxuICAgICAgICBQb2xpY3lEb2N1bWVudDogcG9sZG9jKHtcbiAgICAgICAgICBFZmZlY3Q6ICdBbGxvdycsXG4gICAgICAgICAgQWN0aW9uOiAnc3FzOlNlbmRNZXNzYWdlJyxcbiAgICAgICAgICBSZXNvdXJjZTogJyonLFxuICAgICAgICAgIE5vdFByaW5jaXBhbDogeyBTZXJ2aWNlOiAnc25zLmFtYXpvbmF3cy5jb20nIH0sXG4gICAgICAgIH0pLFxuICAgICAgfSksXG4gICAgfSksIHt9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoZGlmZi5wZXJtaXNzaW9uc0Jyb2FkZW5lZCkudG9CZSh0cnVlKTtcbiAgfSk7XG5cbiAgdGVzdCgnY2hhbmdpbmcgb2YgcmVzb3VyY2UgdGFyZ2V0JywgKCkgPT4ge1xuICAgIC8vIFdIRU5cbiAgICBjb25zdCBkaWZmID0gZGlmZlRlbXBsYXRlKHRlbXBsYXRlKHtcbiAgICAgIFF1ZXVlUG9saWN5OiByZXNvdXJjZSgnQVdTOjpTUVM6OlF1ZXVlUG9saWN5Jywge1xuICAgICAgICBRdWV1ZXM6IFt7IFJlZjogJ015UXVldWUnIH1dLFxuICAgICAgICBQb2xpY3lEb2N1bWVudDogcG9sZG9jKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIEVmZmVjdDogJ0FsbG93JyxcbiAgICAgICAgICAgIEFjdGlvbjogJ3NxczpTZW5kTWVzc2FnZScsXG4gICAgICAgICAgICBSZXNvdXJjZTogJyonLFxuICAgICAgICAgICAgUHJpbmNpcGFsOiB7IFNlcnZpY2U6ICdzbnMuYW1hem9uYXdzLmNvbScgfSxcbiAgICAgICAgICB9LFxuICAgICAgICApLFxuICAgICAgfSksXG4gICAgfSksIHRlbXBsYXRlKHtcbiAgICAgIFF1ZXVlUG9saWN5OiByZXNvdXJjZSgnQVdTOjpTUVM6OlF1ZXVlUG9saWN5Jywge1xuICAgICAgICBRdWV1ZXM6IFt7IFJlZjogJ015T3RoZXJRdWV1ZScgfV0sXG4gICAgICAgIFBvbGljeURvY3VtZW50OiBwb2xkb2MoXG4gICAgICAgICAge1xuICAgICAgICAgICAgRWZmZWN0OiAnQWxsb3cnLFxuICAgICAgICAgICAgQWN0aW9uOiAnc3FzOlNlbmRNZXNzYWdlJyxcbiAgICAgICAgICAgIFJlc291cmNlOiAnKicsXG4gICAgICAgICAgICBQcmluY2lwYWw6IHsgU2VydmljZTogJ3Nucy5hbWF6b25hd3MuY29tJyB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICksXG4gICAgICB9KSxcbiAgICB9KSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KGRpZmYucGVybWlzc2lvbnNCcm9hZGVuZWQpLnRvQmUodHJ1ZSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2FkZGl0aW9uIG9mIGluZ3Jlc3MgcnVsZXMnLCAoKSA9PiB7XG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IGRpZmYgPSBkaWZmVGVtcGxhdGUoXG4gICAgICB0ZW1wbGF0ZSh7XG4gICAgICB9KSxcbiAgICAgIHRlbXBsYXRlKHtcbiAgICAgICAgU0c6IHJlc291cmNlKCdBV1M6OkVDMjo6U2VjdXJpdHlHcm91cCcsIHtcbiAgICAgICAgICBTZWN1cml0eUdyb3VwSW5ncmVzczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBDaWRySXA6ICcxLjIuMy40LzgnLFxuICAgICAgICAgICAgICBGcm9tUG9ydDogODAsXG4gICAgICAgICAgICAgIFRvUG9ydDogODAsXG4gICAgICAgICAgICAgIElwUHJvdG9jb2w6ICd0Y3AnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9KSxcbiAgICAgIH0pKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoZGlmZi5wZXJtaXNzaW9uc0Jyb2FkZW5lZCkudG9CZSh0cnVlKTtcbiAgfSk7XG5cbiAgdGVzdCgnYWRkaXRpb24gb2YgZWdyZXNzIHJ1bGVzJywgKCkgPT4ge1xuICAgIC8vIFdIRU5cbiAgICBjb25zdCBkaWZmID0gZGlmZlRlbXBsYXRlKFxuICAgICAgdGVtcGxhdGUoe1xuICAgICAgfSksXG4gICAgICB0ZW1wbGF0ZSh7XG4gICAgICAgIFNHOiByZXNvdXJjZSgnQVdTOjpFQzI6OlNlY3VyaXR5R3JvdXAnLCB7XG4gICAgICAgICAgU2VjdXJpdHlHcm91cEVncmVzczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBEZXN0aW5hdGlvblNlY3VyaXR5R3JvdXBJZDogeyAnRm46OkdldEF0dCc6IFsnVGhhdE90aGVyR3JvdXAnLCAnR3JvdXBJZCddIH0sXG4gICAgICAgICAgICAgIEZyb21Qb3J0OiA4MCxcbiAgICAgICAgICAgICAgVG9Qb3J0OiA4MCxcbiAgICAgICAgICAgICAgSXBQcm90b2NvbDogJ3RjcCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pLFxuICAgICAgfSkpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChkaWZmLnBlcm1pc3Npb25zQnJvYWRlbmVkKS50b0JlKHRydWUpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnYnJvYWRlbmluZyBpcyBub3QnLCAoKSA9PiB7XG4gIHRlc3QoJ3JlbW92YWwgb2YgcG9zaXRpdmUgc3RhdGVtZW50cyBmcm9tIGFuIGV4aXN0aW5nIHBvbGljeScsICgpID0+IHtcbiAgICAvLyBXSEVOXG4gICAgY29uc3QgZGlmZiA9IGRpZmZUZW1wbGF0ZSh0ZW1wbGF0ZSh7XG4gICAgICBRdWV1ZVBvbGljeTogcmVzb3VyY2UoJ0FXUzo6U1FTOjpRdWV1ZVBvbGljeScsIHtcbiAgICAgICAgUXVldWVzOiBbeyBSZWY6ICdNeVF1ZXVlJyB9XSxcbiAgICAgICAgUG9saWN5RG9jdW1lbnQ6IHBvbGRvYyhcbiAgICAgICAgICB7XG4gICAgICAgICAgICBFZmZlY3Q6ICdBbGxvdycsXG4gICAgICAgICAgICBBY3Rpb246ICdzcXM6U2VuZE1lc3NhZ2UnLFxuICAgICAgICAgICAgUmVzb3VyY2U6ICcqJyxcbiAgICAgICAgICAgIFByaW5jaXBhbDogeyBTZXJ2aWNlOiAnc25zLmFtYXpvbmF3cy5jb20nIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBFZmZlY3Q6ICdBbGxvdycsXG4gICAgICAgICAgICBBY3Rpb246ICdzcXM6TG9va0F0TWVzc2FnZScsXG4gICAgICAgICAgICBSZXNvdXJjZTogJyonLFxuICAgICAgICAgICAgUHJpbmNpcGFsOiB7IFNlcnZpY2U6ICdzbnMuYW1hem9uYXdzLmNvbScgfSxcbiAgICAgICAgICB9LFxuICAgICAgICApLFxuICAgICAgfSksXG4gICAgfSksIHRlbXBsYXRlKHtcbiAgICAgIFF1ZXVlUG9saWN5OiByZXNvdXJjZSgnQVdTOjpTUVM6OlF1ZXVlUG9saWN5Jywge1xuICAgICAgICBRdWV1ZXM6IFt7IFJlZjogJ015UXVldWUnIH1dLFxuICAgICAgICBQb2xpY3lEb2N1bWVudDogcG9sZG9jKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIEVmZmVjdDogJ0FsbG93JyxcbiAgICAgICAgICAgIEFjdGlvbjogJ3NxczpTZW5kTWVzc2FnZScsXG4gICAgICAgICAgICBSZXNvdXJjZTogJyonLFxuICAgICAgICAgICAgUHJpbmNpcGFsOiB7IFNlcnZpY2U6ICdzbnMuYW1hem9uYXdzLmNvbScgfSxcbiAgICAgICAgICB9LFxuICAgICAgICApLFxuICAgICAgfSksXG4gICAgfSkpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChkaWZmLnBlcm1pc3Npb25zQnJvYWRlbmVkKS50b0JlKGZhbHNlKTtcbiAgfSk7XG59KTtcbiJdfQ==