#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sns = require("@aws-cdk/aws-sns");
const ssm = require("@aws-cdk/aws-ssm");
const cdk = require("@aws-cdk/core");
const lib_1 = require("../../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-sdk-js');
const topic = new sns.Topic(stack, 'Topic');
const snsPublish = new lib_1.AwsCustomResource(stack, 'Publish', {
    resourceType: 'Custom::SNSPublisher',
    onUpdate: {
        service: 'SNS',
        action: 'publish',
        parameters: {
            Message: 'hello',
            TopicArn: topic.topicArn,
        },
        physicalResourceId: lib_1.PhysicalResourceId.of(topic.topicArn),
    },
    policy: lib_1.AwsCustomResourcePolicy.fromSdkCalls({ resources: lib_1.AwsCustomResourcePolicy.ANY_RESOURCE }),
});
const listTopics = new lib_1.AwsCustomResource(stack, 'ListTopics', {
    onUpdate: {
        service: 'SNS',
        action: 'listTopics',
        physicalResourceId: lib_1.PhysicalResourceId.fromResponse('Topics.0.TopicArn'),
    },
    policy: lib_1.AwsCustomResourcePolicy.fromSdkCalls({ resources: lib_1.AwsCustomResourcePolicy.ANY_RESOURCE }),
});
listTopics.node.addDependency(topic);
const ssmParameter = new ssm.StringParameter(stack, 'DummyParameter', {
    stringValue: '1337',
});
const getParameter = new lib_1.AwsCustomResource(stack, 'GetParameter', {
    resourceType: 'Custom::SSMParameter',
    onUpdate: {
        service: 'SSM',
        action: 'getParameter',
        parameters: {
            Name: ssmParameter.parameterName,
            WithDecryption: true,
        },
        physicalResourceId: lib_1.PhysicalResourceId.fromResponse('Parameter.ARN'),
    },
    policy: lib_1.AwsCustomResourcePolicy.fromSdkCalls({ resources: lib_1.AwsCustomResourcePolicy.ANY_RESOURCE }),
});
new cdk.CfnOutput(stack, 'MessageId', { value: snsPublish.getResponseField('MessageId') });
new cdk.CfnOutput(stack, 'TopicArn', { value: listTopics.getResponseField('Topics.0.TopicArn') });
new cdk.CfnOutput(stack, 'ParameterValue', { value: getParameter.getResponseField('Parameter.Value') });
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuYXdzLWN1c3RvbS1yZXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmF3cy1jdXN0b20tcmVzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0Esd0NBQXdDO0FBQ3hDLHdDQUF3QztBQUN4QyxxQ0FBcUM7QUFDckMsbUNBQTJGO0FBRTNGLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUVuRCxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBRTVDLE1BQU0sVUFBVSxHQUFHLElBQUksdUJBQWlCLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtJQUN6RCxZQUFZLEVBQUUsc0JBQXNCO0lBQ3BDLFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxLQUFLO1FBQ2QsTUFBTSxFQUFFLFNBQVM7UUFDakIsVUFBVSxFQUFFO1lBQ1YsT0FBTyxFQUFFLE9BQU87WUFDaEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1NBQ3pCO1FBQ0Qsa0JBQWtCLEVBQUUsd0JBQWtCLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7S0FDMUQ7SUFDRCxNQUFNLEVBQUUsNkJBQXVCLENBQUMsWUFBWSxDQUFDLEVBQUMsU0FBUyxFQUFFLDZCQUF1QixDQUFDLFlBQVksRUFBQyxDQUFDO0NBQ2hHLENBQUMsQ0FBQztBQUVILE1BQU0sVUFBVSxHQUFHLElBQUksdUJBQWlCLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtJQUM1RCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsS0FBSztRQUNkLE1BQU0sRUFBRSxZQUFZO1FBQ3BCLGtCQUFrQixFQUFFLHdCQUFrQixDQUFDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQztLQUN6RTtJQUNELE1BQU0sRUFBRSw2QkFBdUIsQ0FBQyxZQUFZLENBQUMsRUFBQyxTQUFTLEVBQUUsNkJBQXVCLENBQUMsWUFBWSxFQUFDLENBQUM7Q0FDaEcsQ0FBQyxDQUFDO0FBQ0gsVUFBVSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFckMsTUFBTSxZQUFZLEdBQUcsSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRTtJQUNwRSxXQUFXLEVBQUUsTUFBTTtDQUNwQixDQUFDLENBQUM7QUFDSCxNQUFNLFlBQVksR0FBRyxJQUFJLHVCQUFpQixDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7SUFDaEUsWUFBWSxFQUFFLHNCQUFzQjtJQUNwQyxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsS0FBSztRQUNkLE1BQU0sRUFBRSxjQUFjO1FBQ3RCLFVBQVUsRUFBRTtZQUNWLElBQUksRUFBRSxZQUFZLENBQUMsYUFBYTtZQUNoQyxjQUFjLEVBQUUsSUFBSTtTQUNyQjtRQUNELGtCQUFrQixFQUFFLHdCQUFrQixDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUM7S0FDckU7SUFDRCxNQUFNLEVBQUUsNkJBQXVCLENBQUMsWUFBWSxDQUFDLEVBQUMsU0FBUyxFQUFFLDZCQUF1QixDQUFDLFlBQVksRUFBQyxDQUFDO0NBQ2hHLENBQUMsQ0FBQztBQUVILElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDM0YsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRXhHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbmltcG9ydCAqIGFzIHNucyBmcm9tICdAYXdzLWNkay9hd3Mtc25zJztcbmltcG9ydCAqIGFzIHNzbSBmcm9tICdAYXdzLWNkay9hd3Mtc3NtJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IEF3c0N1c3RvbVJlc291cmNlLCBBd3NDdXN0b21SZXNvdXJjZVBvbGljeSwgUGh5c2ljYWxSZXNvdXJjZUlkIH0gZnJvbSAnLi4vLi4vbGliJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2F3cy1jZGstc2RrLWpzJyk7XG5cbmNvbnN0IHRvcGljID0gbmV3IHNucy5Ub3BpYyhzdGFjaywgJ1RvcGljJyk7XG5cbmNvbnN0IHNuc1B1Ymxpc2ggPSBuZXcgQXdzQ3VzdG9tUmVzb3VyY2Uoc3RhY2ssICdQdWJsaXNoJywge1xuICByZXNvdXJjZVR5cGU6ICdDdXN0b206OlNOU1B1Ymxpc2hlcicsXG4gIG9uVXBkYXRlOiB7XG4gICAgc2VydmljZTogJ1NOUycsXG4gICAgYWN0aW9uOiAncHVibGlzaCcsXG4gICAgcGFyYW1ldGVyczoge1xuICAgICAgTWVzc2FnZTogJ2hlbGxvJyxcbiAgICAgIFRvcGljQXJuOiB0b3BpYy50b3BpY0FybixcbiAgICB9LFxuICAgIHBoeXNpY2FsUmVzb3VyY2VJZDogUGh5c2ljYWxSZXNvdXJjZUlkLm9mKHRvcGljLnRvcGljQXJuKSxcbiAgfSxcbiAgcG9saWN5OiBBd3NDdXN0b21SZXNvdXJjZVBvbGljeS5mcm9tU2RrQ2FsbHMoe3Jlc291cmNlczogQXdzQ3VzdG9tUmVzb3VyY2VQb2xpY3kuQU5ZX1JFU09VUkNFfSksXG59KTtcblxuY29uc3QgbGlzdFRvcGljcyA9IG5ldyBBd3NDdXN0b21SZXNvdXJjZShzdGFjaywgJ0xpc3RUb3BpY3MnLCB7XG4gIG9uVXBkYXRlOiB7XG4gICAgc2VydmljZTogJ1NOUycsXG4gICAgYWN0aW9uOiAnbGlzdFRvcGljcycsXG4gICAgcGh5c2ljYWxSZXNvdXJjZUlkOiBQaHlzaWNhbFJlc291cmNlSWQuZnJvbVJlc3BvbnNlKCdUb3BpY3MuMC5Ub3BpY0FybicpLFxuICB9LFxuICBwb2xpY3k6IEF3c0N1c3RvbVJlc291cmNlUG9saWN5LmZyb21TZGtDYWxscyh7cmVzb3VyY2VzOiBBd3NDdXN0b21SZXNvdXJjZVBvbGljeS5BTllfUkVTT1VSQ0V9KSxcbn0pO1xubGlzdFRvcGljcy5ub2RlLmFkZERlcGVuZGVuY3kodG9waWMpO1xuXG5jb25zdCBzc21QYXJhbWV0ZXIgPSBuZXcgc3NtLlN0cmluZ1BhcmFtZXRlcihzdGFjaywgJ0R1bW15UGFyYW1ldGVyJywge1xuICBzdHJpbmdWYWx1ZTogJzEzMzcnLFxufSk7XG5jb25zdCBnZXRQYXJhbWV0ZXIgPSBuZXcgQXdzQ3VzdG9tUmVzb3VyY2Uoc3RhY2ssICdHZXRQYXJhbWV0ZXInLCB7XG4gIHJlc291cmNlVHlwZTogJ0N1c3RvbTo6U1NNUGFyYW1ldGVyJyxcbiAgb25VcGRhdGU6IHtcbiAgICBzZXJ2aWNlOiAnU1NNJyxcbiAgICBhY3Rpb246ICdnZXRQYXJhbWV0ZXInLFxuICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgIE5hbWU6IHNzbVBhcmFtZXRlci5wYXJhbWV0ZXJOYW1lLFxuICAgICAgV2l0aERlY3J5cHRpb246IHRydWUsXG4gICAgfSxcbiAgICBwaHlzaWNhbFJlc291cmNlSWQ6IFBoeXNpY2FsUmVzb3VyY2VJZC5mcm9tUmVzcG9uc2UoJ1BhcmFtZXRlci5BUk4nKSxcbiAgfSxcbiAgcG9saWN5OiBBd3NDdXN0b21SZXNvdXJjZVBvbGljeS5mcm9tU2RrQ2FsbHMoe3Jlc291cmNlczogQXdzQ3VzdG9tUmVzb3VyY2VQb2xpY3kuQU5ZX1JFU09VUkNFfSksXG59KTtcblxubmV3IGNkay5DZm5PdXRwdXQoc3RhY2ssICdNZXNzYWdlSWQnLCB7IHZhbHVlOiBzbnNQdWJsaXNoLmdldFJlc3BvbnNlRmllbGQoJ01lc3NhZ2VJZCcpIH0pO1xubmV3IGNkay5DZm5PdXRwdXQoc3RhY2ssICdUb3BpY0FybicsIHsgdmFsdWU6IGxpc3RUb3BpY3MuZ2V0UmVzcG9uc2VGaWVsZCgnVG9waWNzLjAuVG9waWNBcm4nKSB9KTtcbm5ldyBjZGsuQ2ZuT3V0cHV0KHN0YWNrLCAnUGFyYW1ldGVyVmFsdWUnLCB7IHZhbHVlOiBnZXRQYXJhbWV0ZXIuZ2V0UmVzcG9uc2VGaWVsZCgnUGFyYW1ldGVyLlZhbHVlJykgfSk7XG5cbmFwcC5zeW50aCgpO1xuIl19