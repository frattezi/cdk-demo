"use strict";
/// !cdk-integ *
Object.defineProperty(exports, "__esModule", { value: true });
const s3 = require("@aws-cdk/aws-s3");
const core_1 = require("@aws-cdk/core");
const s3_assert_1 = require("./integration-test-fixtures/s3-assert");
const s3_file_1 = require("./integration-test-fixtures/s3-file");
class TestStack extends core_1.Stack {
    constructor(scope, id) {
        super(scope, id);
        const file2Contents = 'this file has a generated physical id';
        const bucket = new s3.Bucket(this, 'MyBucket');
        const file1 = new s3_file_1.S3File(this, 'file1', {
            bucket,
            objectKey: 'second.txt',
            contents: 'Hello, world, 1980!',
            public: true,
        });
        const file2 = new s3_file_1.S3File(this, 'file2', {
            bucket,
            contents: file2Contents,
        });
        new s3_assert_1.S3Assert(this, 'assert-file', {
            bucket,
            objectKey: file2.objectKey,
            expectedContent: file2Contents,
        });
        // delay file2 updates so we can test async assertions
        file2.node.addDependency(file1);
        new core_1.CfnOutput(this, 'file1-url', { value: file1.url });
        new core_1.CfnOutput(this, 'file2-url', { value: file2.url });
    }
}
const app = new core_1.App();
new TestStack(app, 'integ-provider-framework');
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsZ0JBQWdCOztBQUVoQixzQ0FBc0M7QUFDdEMsd0NBQWlFO0FBQ2pFLHFFQUFpRTtBQUNqRSxpRUFBNkQ7QUFFN0QsTUFBTSxTQUFVLFNBQVEsWUFBSztJQUMzQixZQUFZLEtBQWdCLEVBQUUsRUFBVTtRQUN0QyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sYUFBYSxHQUFHLHVDQUF1QyxDQUFDO1FBQzlELE1BQU0sTUFBTSxHQUFHLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFL0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxnQkFBTSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUU7WUFDdEMsTUFBTTtZQUNOLFNBQVMsRUFBRSxZQUFZO1lBQ3ZCLFFBQVEsRUFBRSxxQkFBcUI7WUFDL0IsTUFBTSxFQUFFLElBQUk7U0FDYixDQUFDLENBQUM7UUFFSCxNQUFNLEtBQUssR0FBRyxJQUFJLGdCQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRTtZQUN0QyxNQUFNO1lBQ04sUUFBUSxFQUFFLGFBQWE7U0FDeEIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxvQkFBUSxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUU7WUFDaEMsTUFBTTtZQUNOLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixlQUFlLEVBQUUsYUFBYTtTQUMvQixDQUFDLENBQUM7UUFFSCxzREFBc0Q7UUFDdEQsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFaEMsSUFBSSxnQkFBUyxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDdkQsSUFBSSxnQkFBUyxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDekQsQ0FBQztDQUNGO0FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFHLEVBQUUsQ0FBQztBQUV0QixJQUFJLFNBQVMsQ0FBQyxHQUFHLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztBQUUvQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gIWNkay1pbnRlZyAqXG5cbmltcG9ydCAqIGFzIHMzIGZyb20gJ0Bhd3MtY2RrL2F3cy1zMyc7XG5pbXBvcnQgeyBBcHAsIENmbk91dHB1dCwgQ29uc3RydWN0LCBTdGFjayB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IHsgUzNBc3NlcnQgfSBmcm9tICcuL2ludGVncmF0aW9uLXRlc3QtZml4dHVyZXMvczMtYXNzZXJ0JztcbmltcG9ydCB7IFMzRmlsZSB9IGZyb20gJy4vaW50ZWdyYXRpb24tdGVzdC1maXh0dXJlcy9zMy1maWxlJztcblxuY2xhc3MgVGVzdFN0YWNrIGV4dGVuZHMgU3RhY2sge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIGNvbnN0IGZpbGUyQ29udGVudHMgPSAndGhpcyBmaWxlIGhhcyBhIGdlbmVyYXRlZCBwaHlzaWNhbCBpZCc7XG4gICAgY29uc3QgYnVja2V0ID0gbmV3IHMzLkJ1Y2tldCh0aGlzLCAnTXlCdWNrZXQnKTtcblxuICAgIGNvbnN0IGZpbGUxID0gbmV3IFMzRmlsZSh0aGlzLCAnZmlsZTEnLCB7XG4gICAgICBidWNrZXQsXG4gICAgICBvYmplY3RLZXk6ICdzZWNvbmQudHh0JyxcbiAgICAgIGNvbnRlbnRzOiAnSGVsbG8sIHdvcmxkLCAxOTgwIScsXG4gICAgICBwdWJsaWM6IHRydWUsXG4gICAgfSk7XG5cbiAgICBjb25zdCBmaWxlMiA9IG5ldyBTM0ZpbGUodGhpcywgJ2ZpbGUyJywge1xuICAgICAgYnVja2V0LFxuICAgICAgY29udGVudHM6IGZpbGUyQ29udGVudHMsXG4gICAgfSk7XG5cbiAgICBuZXcgUzNBc3NlcnQodGhpcywgJ2Fzc2VydC1maWxlJywge1xuICAgICAgYnVja2V0LFxuICAgICAgb2JqZWN0S2V5OiBmaWxlMi5vYmplY3RLZXksXG4gICAgICBleHBlY3RlZENvbnRlbnQ6IGZpbGUyQ29udGVudHMsXG4gICAgfSk7XG5cbiAgICAvLyBkZWxheSBmaWxlMiB1cGRhdGVzIHNvIHdlIGNhbiB0ZXN0IGFzeW5jIGFzc2VydGlvbnNcbiAgICBmaWxlMi5ub2RlLmFkZERlcGVuZGVuY3koZmlsZTEpO1xuXG4gICAgbmV3IENmbk91dHB1dCh0aGlzLCAnZmlsZTEtdXJsJywgeyB2YWx1ZTogZmlsZTEudXJsIH0pO1xuICAgIG5ldyBDZm5PdXRwdXQodGhpcywgJ2ZpbGUyLXVybCcsIHsgdmFsdWU6IGZpbGUyLnVybCB9KTtcbiAgfVxufVxuXG5jb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5cbm5ldyBUZXN0U3RhY2soYXBwLCAnaW50ZWctcHJvdmlkZXItZnJhbWV3b3JrJyk7XG5cbmFwcC5zeW50aCgpO1xuIl19