"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable: no-console
const AWS = require("aws-sdk");
const api = require("./api");
const s3 = new AWS.S3();
async function onEvent(event) {
    switch (event.RequestType) {
        case 'Create':
        case 'Update':
            return await putObject(event);
        case 'Delete':
            return await deleteObject(event);
    }
}
exports.onEvent = onEvent;
async function putObject(event) {
    const bucketName = event.ResourceProperties[api.PROP_BUCKET_NAME];
    if (!bucketName) {
        throw new Error('"BucketName" is required');
    }
    const contents = event.ResourceProperties[api.PROP_CONTENTS];
    if (!contents) {
        throw new Error('"Contents" is required');
    }
    // determine the object key which is the physical ID of the resource.
    // if it was not provided by the user, we generated it using the request ID.
    let objectKey = event.ResourceProperties[api.PROP_OBJECT_KEY] || event.LogicalResourceId + '-' + event.RequestId.replace(/-/g, '') + '.txt';
    // trim trailing `/`
    if (objectKey.startsWith('/')) {
        objectKey = objectKey.substr(1);
    }
    const publicRead = event.ResourceProperties[api.PROP_PUBLIC] || false;
    console.log(`writing s3://${bucketName}/${objectKey}`);
    const resp = await s3.putObject({
        Bucket: bucketName,
        Key: objectKey,
        Body: contents,
        ACL: publicRead ? 'public-read' : undefined,
    }).promise();
    // NOTE: updates to the object key will be handled automatically: a new object will be put and then we return
    // the new name. this will tell cloudformation that the resource has been replaced and it will issue a DELETE
    // for the old object.
    return {
        PhysicalResourceId: objectKey,
        Data: {
            [api.ATTR_OBJECT_KEY]: objectKey,
            [api.ATTR_ETAG]: resp.ETag,
            [api.ATTR_URL]: `https://${bucketName}.s3.amazonaws.com/${objectKey}`,
        },
    };
}
exports.putObject = putObject;
async function deleteObject(event) {
    const bucketName = event.ResourceProperties.BucketName;
    if (!bucketName) {
        throw new Error('"BucketName" is required');
    }
    const objectKey = event.PhysicalResourceId;
    if (!objectKey) {
        throw new Error('PhysicalResourceId expected for DELETE events');
    }
    await s3.deleteObject({
        Bucket: bucketName,
        Key: objectKey,
    }).promise();
}
exports.deleteObject = deleteObject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUM3QiwrQkFBK0I7QUFDL0IsNkJBQTZCO0FBRTdCLE1BQU0sRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBRWpCLEtBQUssVUFBVSxPQUFPLENBQUMsS0FBK0M7SUFDM0UsUUFBUSxLQUFLLENBQUMsV0FBVyxFQUFFO1FBQ3pCLEtBQUssUUFBUSxDQUFDO1FBQ2QsS0FBSyxRQUFRO1lBQ1gsT0FBTyxNQUFNLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVoQyxLQUFLLFFBQVE7WUFDWCxPQUFPLE1BQU0sWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3BDO0FBQ0gsQ0FBQztBQVRELDBCQVNDO0FBRU0sS0FBSyxVQUFVLFNBQVMsQ0FBQyxLQUErQztJQUM3RSxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDbEUsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztLQUFFO0lBRWpFLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDN0QsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQztLQUFFO0lBRTdELHFFQUFxRTtJQUNyRSw0RUFBNEU7SUFDNUUsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxLQUFLLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUM7SUFFNUksb0JBQW9CO0lBQ3BCLElBQUksU0FBUyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUM3QixTQUFTLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNqQztJQUVELE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksS0FBSyxDQUFDO0lBRXRFLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLFVBQVUsSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBRXZELE1BQU0sSUFBSSxHQUFHLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQztRQUM5QixNQUFNLEVBQUUsVUFBVTtRQUNsQixHQUFHLEVBQUUsU0FBUztRQUNkLElBQUksRUFBRSxRQUFRO1FBQ2QsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxTQUFTO0tBQzVDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUViLDZHQUE2RztJQUM3Ryw2R0FBNkc7SUFDN0csc0JBQXNCO0lBRXRCLE9BQU87UUFDTCxrQkFBa0IsRUFBRSxTQUFTO1FBQzdCLElBQUksRUFBRTtZQUNKLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxFQUFFLFNBQVM7WUFDaEMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDMUIsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsV0FBVyxVQUFVLHFCQUFxQixTQUFTLEVBQUU7U0FDdEU7S0FDRixDQUFDO0FBQ0osQ0FBQztBQXZDRCw4QkF1Q0M7QUFFTSxLQUFLLFVBQVUsWUFBWSxDQUFDLEtBQStDO0lBQ2hGLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUM7SUFDdkQsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztLQUFFO0lBRWpFLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztJQUMzQyxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0tBQ2xFO0lBRUQsTUFBTSxFQUFFLENBQUMsWUFBWSxDQUFDO1FBQ3BCLE1BQU0sRUFBRSxVQUFVO1FBQ2xCLEdBQUcsRUFBRSxTQUFTO0tBQ2YsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2YsQ0FBQztBQWJELG9DQWFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGU6IG5vLWNvbnNvbGVcbmltcG9ydCAqIGFzIEFXUyBmcm9tICdhd3Mtc2RrJztcbmltcG9ydCAqIGFzIGFwaSBmcm9tICcuL2FwaSc7XG5cbmNvbnN0IHMzID0gbmV3IEFXUy5TMygpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gb25FdmVudChldmVudDogQVdTQ0RLQXN5bmNDdXN0b21SZXNvdXJjZS5PbkV2ZW50UmVxdWVzdCkge1xuICBzd2l0Y2ggKGV2ZW50LlJlcXVlc3RUeXBlKSB7XG4gICAgY2FzZSAnQ3JlYXRlJzpcbiAgICBjYXNlICdVcGRhdGUnOlxuICAgICAgcmV0dXJuIGF3YWl0IHB1dE9iamVjdChldmVudCk7XG5cbiAgICBjYXNlICdEZWxldGUnOlxuICAgICAgcmV0dXJuIGF3YWl0IGRlbGV0ZU9iamVjdChldmVudCk7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHB1dE9iamVjdChldmVudDogQVdTQ0RLQXN5bmNDdXN0b21SZXNvdXJjZS5PbkV2ZW50UmVxdWVzdCk6IFByb21pc2U8QVdTQ0RLQXN5bmNDdXN0b21SZXNvdXJjZS5PbkV2ZW50UmVzcG9uc2U+IHtcbiAgY29uc3QgYnVja2V0TmFtZSA9IGV2ZW50LlJlc291cmNlUHJvcGVydGllc1thcGkuUFJPUF9CVUNLRVRfTkFNRV07XG4gIGlmICghYnVja2V0TmFtZSkgeyB0aHJvdyBuZXcgRXJyb3IoJ1wiQnVja2V0TmFtZVwiIGlzIHJlcXVpcmVkJyk7IH1cblxuICBjb25zdCBjb250ZW50cyA9IGV2ZW50LlJlc291cmNlUHJvcGVydGllc1thcGkuUFJPUF9DT05URU5UU107XG4gIGlmICghY29udGVudHMpIHsgdGhyb3cgbmV3IEVycm9yKCdcIkNvbnRlbnRzXCIgaXMgcmVxdWlyZWQnKTsgfVxuXG4gIC8vIGRldGVybWluZSB0aGUgb2JqZWN0IGtleSB3aGljaCBpcyB0aGUgcGh5c2ljYWwgSUQgb2YgdGhlIHJlc291cmNlLlxuICAvLyBpZiBpdCB3YXMgbm90IHByb3ZpZGVkIGJ5IHRoZSB1c2VyLCB3ZSBnZW5lcmF0ZWQgaXQgdXNpbmcgdGhlIHJlcXVlc3QgSUQuXG4gIGxldCBvYmplY3RLZXkgPSBldmVudC5SZXNvdXJjZVByb3BlcnRpZXNbYXBpLlBST1BfT0JKRUNUX0tFWV0gfHwgZXZlbnQuTG9naWNhbFJlc291cmNlSWQgKyAnLScgKyBldmVudC5SZXF1ZXN0SWQucmVwbGFjZSgvLS9nLCAnJykgKyAnLnR4dCc7XG5cbiAgLy8gdHJpbSB0cmFpbGluZyBgL2BcbiAgaWYgKG9iamVjdEtleS5zdGFydHNXaXRoKCcvJykpIHtcbiAgICBvYmplY3RLZXkgPSBvYmplY3RLZXkuc3Vic3RyKDEpO1xuICB9XG5cbiAgY29uc3QgcHVibGljUmVhZCA9IGV2ZW50LlJlc291cmNlUHJvcGVydGllc1thcGkuUFJPUF9QVUJMSUNdIHx8IGZhbHNlO1xuXG4gIGNvbnNvbGUubG9nKGB3cml0aW5nIHMzOi8vJHtidWNrZXROYW1lfS8ke29iamVjdEtleX1gKTtcblxuICBjb25zdCByZXNwID0gYXdhaXQgczMucHV0T2JqZWN0KHtcbiAgICBCdWNrZXQ6IGJ1Y2tldE5hbWUsXG4gICAgS2V5OiBvYmplY3RLZXksXG4gICAgQm9keTogY29udGVudHMsXG4gICAgQUNMOiBwdWJsaWNSZWFkID8gJ3B1YmxpYy1yZWFkJyA6IHVuZGVmaW5lZCxcbiAgfSkucHJvbWlzZSgpO1xuXG4gIC8vIE5PVEU6IHVwZGF0ZXMgdG8gdGhlIG9iamVjdCBrZXkgd2lsbCBiZSBoYW5kbGVkIGF1dG9tYXRpY2FsbHk6IGEgbmV3IG9iamVjdCB3aWxsIGJlIHB1dCBhbmQgdGhlbiB3ZSByZXR1cm5cbiAgLy8gdGhlIG5ldyBuYW1lLiB0aGlzIHdpbGwgdGVsbCBjbG91ZGZvcm1hdGlvbiB0aGF0IHRoZSByZXNvdXJjZSBoYXMgYmVlbiByZXBsYWNlZCBhbmQgaXQgd2lsbCBpc3N1ZSBhIERFTEVURVxuICAvLyBmb3IgdGhlIG9sZCBvYmplY3QuXG5cbiAgcmV0dXJuIHtcbiAgICBQaHlzaWNhbFJlc291cmNlSWQ6IG9iamVjdEtleSxcbiAgICBEYXRhOiB7XG4gICAgICBbYXBpLkFUVFJfT0JKRUNUX0tFWV06IG9iamVjdEtleSxcbiAgICAgIFthcGkuQVRUUl9FVEFHXTogcmVzcC5FVGFnLFxuICAgICAgW2FwaS5BVFRSX1VSTF06IGBodHRwczovLyR7YnVja2V0TmFtZX0uczMuYW1hem9uYXdzLmNvbS8ke29iamVjdEtleX1gLFxuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVPYmplY3QoZXZlbnQ6IEFXU0NES0FzeW5jQ3VzdG9tUmVzb3VyY2UuT25FdmVudFJlcXVlc3QpIHtcbiAgY29uc3QgYnVja2V0TmFtZSA9IGV2ZW50LlJlc291cmNlUHJvcGVydGllcy5CdWNrZXROYW1lO1xuICBpZiAoIWJ1Y2tldE5hbWUpIHsgdGhyb3cgbmV3IEVycm9yKCdcIkJ1Y2tldE5hbWVcIiBpcyByZXF1aXJlZCcpOyB9XG5cbiAgY29uc3Qgb2JqZWN0S2V5ID0gZXZlbnQuUGh5c2ljYWxSZXNvdXJjZUlkO1xuICBpZiAoIW9iamVjdEtleSkge1xuICAgIHRocm93IG5ldyBFcnJvcignUGh5c2ljYWxSZXNvdXJjZUlkIGV4cGVjdGVkIGZvciBERUxFVEUgZXZlbnRzJyk7XG4gIH1cblxuICBhd2FpdCBzMy5kZWxldGVPYmplY3Qoe1xuICAgIEJ1Y2tldDogYnVja2V0TmFtZSxcbiAgICBLZXk6IG9iamVjdEtleSxcbiAgfSkucHJvbWlzZSgpO1xufVxuIl19