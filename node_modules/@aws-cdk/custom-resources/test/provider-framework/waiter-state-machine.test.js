"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("@aws-cdk/assert/jest");
const aws_lambda_1 = require("@aws-cdk/aws-lambda");
const core_1 = require("@aws-cdk/core");
const waiter_state_machine_1 = require("../../lib/provider-framework/waiter-state-machine");
describe('state machine', () => {
    test('contains the needed resources', () => {
        // GIVEN
        const stack = new core_1.Stack();
        const isCompleteHandler = new aws_lambda_1.Function(stack, 'isComplete', {
            code: aws_lambda_1.Code.fromInline('foo'),
            runtime: aws_lambda_1.Runtime.NODEJS_12_X,
            handler: 'index.handler',
        });
        const timeoutHandler = new aws_lambda_1.Function(stack, 'isTimeout', {
            code: aws_lambda_1.Code.fromInline('foo'),
            runtime: aws_lambda_1.Runtime.NODEJS_12_X,
            handler: 'index.handler',
        });
        const interval = core_1.Duration.hours(2);
        const maxAttempts = 2;
        const backoffRate = 5;
        // WHEN
        new waiter_state_machine_1.WaiterStateMachine(stack, 'statemachine', {
            isCompleteHandler,
            timeoutHandler,
            backoffRate,
            interval,
            maxAttempts,
        });
        // THEN
        const roleId = 'statemachineRole52044F93';
        expect(stack).toHaveResourceLike('AWS::StepFunctions::StateMachine', {
            DefinitionString: {
                'Fn::Join': [
                    '',
                    [
                        '{"StartAt":"framework-isComplete-task","States":{"framework-isComplete-task":{"End":true,"Retry":[{"ErrorEquals":["States.ALL"],' +
                            `"IntervalSeconds":${interval.toSeconds()},"MaxAttempts":${maxAttempts},"BackoffRate":${backoffRate}}],` +
                            '"Catch":[{"ErrorEquals":["States.ALL"],"Next":"framework-onTimeout-task"}],"Type":"Task","Resource":"',
                        stack.resolve(isCompleteHandler.functionArn),
                        '"},"framework-onTimeout-task":{"End":true,"Type":"Task","Resource":"',
                        stack.resolve(timeoutHandler.functionArn),
                        '"}}}',
                    ],
                ],
            },
            RoleArn: {
                'Fn::GetAtt': [roleId, 'Arn'],
            },
        });
        expect(stack).toHaveResourceLike('AWS::IAM::Role', {
            AssumeRolePolicyDocument: {
                Statement: [
                    {
                        Action: 'sts:AssumeRole',
                        Effect: 'Allow',
                        Principal: {
                            Service: {
                                'Fn::Join': [
                                    '',
                                    [
                                        'states.',
                                        stack.resolve(stack.region),
                                        '.amazonaws.com',
                                    ],
                                ],
                            },
                        },
                    },
                ],
                Version: '2012-10-17',
            },
        });
        expect(stack).toHaveResourceLike('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [
                    {
                        Action: 'lambda:InvokeFunction',
                        Effect: 'Allow',
                        Resource: stack.resolve(isCompleteHandler.functionArn),
                    },
                    {
                        Action: 'lambda:InvokeFunction',
                        Effect: 'Allow',
                        Resource: stack.resolve(timeoutHandler.functionArn),
                    },
                ],
                Version: '2012-10-17',
            },
            Roles: [{ Ref: roleId }],
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FpdGVyLXN0YXRlLW1hY2hpbmUudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndhaXRlci1zdGF0ZS1tYWNoaW5lLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxnQ0FBOEI7QUFDOUIsb0RBQTBFO0FBQzFFLHdDQUFnRDtBQUNoRCw0RkFBdUY7QUFFdkYsUUFBUSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7SUFDN0IsSUFBSSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtRQUN6QyxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztRQUMxQixNQUFNLGlCQUFpQixHQUFHLElBQUkscUJBQVEsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFO1lBQzFELElBQUksRUFBRSxpQkFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7WUFDNUIsT0FBTyxFQUFFLG9CQUFPLENBQUMsV0FBVztZQUM1QixPQUFPLEVBQUUsZUFBZTtTQUN6QixDQUFDLENBQUM7UUFDSCxNQUFNLGNBQWMsR0FBRyxJQUFJLHFCQUFRLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRTtZQUN0RCxJQUFJLEVBQUUsaUJBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO1lBQzVCLE9BQU8sRUFBRSxvQkFBTyxDQUFDLFdBQVc7WUFDNUIsT0FBTyxFQUFFLGVBQWU7U0FDekIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxRQUFRLEdBQUcsZUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDdEIsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBRXRCLE9BQU87UUFDUCxJQUFJLHlDQUFrQixDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7WUFDNUMsaUJBQWlCO1lBQ2pCLGNBQWM7WUFDZCxXQUFXO1lBQ1gsUUFBUTtZQUNSLFdBQVc7U0FDWixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsTUFBTSxNQUFNLEdBQUcsMEJBQTBCLENBQUM7UUFDMUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLGtCQUFrQixDQUFDLGtDQUFrQyxFQUFFO1lBQ25FLGdCQUFnQixFQUFFO2dCQUNoQixVQUFVLEVBQUU7b0JBQ1YsRUFBRTtvQkFDRjt3QkFDRSxrSUFBa0k7NEJBQ2xJLHFCQUFxQixRQUFRLENBQUMsU0FBUyxFQUFFLGtCQUFrQixXQUFXLGtCQUFrQixXQUFXLEtBQUs7NEJBQ3hHLHVHQUF1Rzt3QkFDdkcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUM7d0JBQzVDLHNFQUFzRTt3QkFDdEUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDO3dCQUN6QyxNQUFNO3FCQUNQO2lCQUNGO2FBQ0Y7WUFDRCxPQUFPLEVBQUU7Z0JBQ1AsWUFBWSxFQUFFLENBQUUsTUFBTSxFQUFFLEtBQUssQ0FBRTthQUNoQztTQUNGLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsRUFBRTtZQUNqRCx3QkFBd0IsRUFBRTtnQkFDeEIsU0FBUyxFQUFFO29CQUNUO3dCQUNFLE1BQU0sRUFBRSxnQkFBZ0I7d0JBQ3hCLE1BQU0sRUFBRSxPQUFPO3dCQUNmLFNBQVMsRUFBRTs0QkFDVCxPQUFPLEVBQUU7Z0NBQ1AsVUFBVSxFQUFFO29DQUNWLEVBQUU7b0NBQ0Y7d0NBQ0UsU0FBUzt3Q0FDVCxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7d0NBQzNCLGdCQUFnQjtxQ0FDakI7aUNBQ0Y7NkJBQ0Y7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7Z0JBQ0QsT0FBTyxFQUFFLFlBQVk7YUFDdEI7U0FDRixDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsa0JBQWtCLENBQUMsa0JBQWtCLEVBQUU7WUFDbkQsY0FBYyxFQUFFO2dCQUNkLFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxNQUFNLEVBQUUsdUJBQXVCO3dCQUMvQixNQUFNLEVBQUUsT0FBTzt3QkFDZixRQUFRLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUM7cUJBQ3ZEO29CQUNEO3dCQUNFLE1BQU0sRUFBRSx1QkFBdUI7d0JBQy9CLE1BQU0sRUFBRSxPQUFPO3dCQUNmLFFBQVEsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUM7cUJBQ3BEO2lCQUNGO2dCQUNELE9BQU8sRUFBRSxZQUFZO2FBQ3RCO1lBQ0QsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUM7U0FDekIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQGF3cy1jZGsvYXNzZXJ0L2plc3QnO1xuaW1wb3J0IHsgQ29kZSwgRnVuY3Rpb24gYXMgbGFtYmRhRm4sIFJ1bnRpbWUgfSBmcm9tICdAYXdzLWNkay9hd3MtbGFtYmRhJztcbmltcG9ydCB7IER1cmF0aW9uLCBTdGFjayB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IHsgV2FpdGVyU3RhdGVNYWNoaW5lIH0gZnJvbSAnLi4vLi4vbGliL3Byb3ZpZGVyLWZyYW1ld29yay93YWl0ZXItc3RhdGUtbWFjaGluZSc7XG5cbmRlc2NyaWJlKCdzdGF0ZSBtYWNoaW5lJywgKCkgPT4ge1xuICB0ZXN0KCdjb250YWlucyB0aGUgbmVlZGVkIHJlc291cmNlcycsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgaXNDb21wbGV0ZUhhbmRsZXIgPSBuZXcgbGFtYmRhRm4oc3RhY2ssICdpc0NvbXBsZXRlJywge1xuICAgICAgY29kZTogQ29kZS5mcm9tSW5saW5lKCdmb28nKSxcbiAgICAgIHJ1bnRpbWU6IFJ1bnRpbWUuTk9ERUpTXzEyX1gsXG4gICAgICBoYW5kbGVyOiAnaW5kZXguaGFuZGxlcicsXG4gICAgfSk7XG4gICAgY29uc3QgdGltZW91dEhhbmRsZXIgPSBuZXcgbGFtYmRhRm4oc3RhY2ssICdpc1RpbWVvdXQnLCB7XG4gICAgICBjb2RlOiBDb2RlLmZyb21JbmxpbmUoJ2ZvbycpLFxuICAgICAgcnVudGltZTogUnVudGltZS5OT0RFSlNfMTJfWCxcbiAgICAgIGhhbmRsZXI6ICdpbmRleC5oYW5kbGVyJyxcbiAgICB9KTtcbiAgICBjb25zdCBpbnRlcnZhbCA9IER1cmF0aW9uLmhvdXJzKDIpO1xuICAgIGNvbnN0IG1heEF0dGVtcHRzID0gMjtcbiAgICBjb25zdCBiYWNrb2ZmUmF0ZSA9IDU7XG5cbiAgICAvLyBXSEVOXG4gICAgbmV3IFdhaXRlclN0YXRlTWFjaGluZShzdGFjaywgJ3N0YXRlbWFjaGluZScsIHtcbiAgICAgIGlzQ29tcGxldGVIYW5kbGVyLFxuICAgICAgdGltZW91dEhhbmRsZXIsXG4gICAgICBiYWNrb2ZmUmF0ZSxcbiAgICAgIGludGVydmFsLFxuICAgICAgbWF4QXR0ZW1wdHMsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgY29uc3Qgcm9sZUlkID0gJ3N0YXRlbWFjaGluZVJvbGU1MjA0NEY5Myc7XG4gICAgZXhwZWN0KHN0YWNrKS50b0hhdmVSZXNvdXJjZUxpa2UoJ0FXUzo6U3RlcEZ1bmN0aW9uczo6U3RhdGVNYWNoaW5lJywge1xuICAgICAgRGVmaW5pdGlvblN0cmluZzoge1xuICAgICAgICAnRm46OkpvaW4nOiBbXG4gICAgICAgICAgJycsXG4gICAgICAgICAgW1xuICAgICAgICAgICAgJ3tcIlN0YXJ0QXRcIjpcImZyYW1ld29yay1pc0NvbXBsZXRlLXRhc2tcIixcIlN0YXRlc1wiOntcImZyYW1ld29yay1pc0NvbXBsZXRlLXRhc2tcIjp7XCJFbmRcIjp0cnVlLFwiUmV0cnlcIjpbe1wiRXJyb3JFcXVhbHNcIjpbXCJTdGF0ZXMuQUxMXCJdLCcgK1xuICAgICAgICAgICAgYFwiSW50ZXJ2YWxTZWNvbmRzXCI6JHtpbnRlcnZhbC50b1NlY29uZHMoKX0sXCJNYXhBdHRlbXB0c1wiOiR7bWF4QXR0ZW1wdHN9LFwiQmFja29mZlJhdGVcIjoke2JhY2tvZmZSYXRlfX1dLGAgK1xuICAgICAgICAgICAgJ1wiQ2F0Y2hcIjpbe1wiRXJyb3JFcXVhbHNcIjpbXCJTdGF0ZXMuQUxMXCJdLFwiTmV4dFwiOlwiZnJhbWV3b3JrLW9uVGltZW91dC10YXNrXCJ9XSxcIlR5cGVcIjpcIlRhc2tcIixcIlJlc291cmNlXCI6XCInLFxuICAgICAgICAgICAgc3RhY2sucmVzb2x2ZShpc0NvbXBsZXRlSGFuZGxlci5mdW5jdGlvbkFybiksXG4gICAgICAgICAgICAnXCJ9LFwiZnJhbWV3b3JrLW9uVGltZW91dC10YXNrXCI6e1wiRW5kXCI6dHJ1ZSxcIlR5cGVcIjpcIlRhc2tcIixcIlJlc291cmNlXCI6XCInLFxuICAgICAgICAgICAgc3RhY2sucmVzb2x2ZSh0aW1lb3V0SGFuZGxlci5mdW5jdGlvbkFybiksXG4gICAgICAgICAgICAnXCJ9fX0nLFxuICAgICAgICAgIF0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICAgUm9sZUFybjoge1xuICAgICAgICAnRm46OkdldEF0dCc6IFsgcm9sZUlkLCAnQXJuJyBdLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBleHBlY3Qoc3RhY2spLnRvSGF2ZVJlc291cmNlTGlrZSgnQVdTOjpJQU06OlJvbGUnLCB7XG4gICAgICBBc3N1bWVSb2xlUG9saWN5RG9jdW1lbnQ6IHtcbiAgICAgICAgU3RhdGVtZW50OiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgQWN0aW9uOiAnc3RzOkFzc3VtZVJvbGUnLFxuICAgICAgICAgICAgRWZmZWN0OiAnQWxsb3cnLFxuICAgICAgICAgICAgUHJpbmNpcGFsOiB7XG4gICAgICAgICAgICAgIFNlcnZpY2U6IHtcbiAgICAgICAgICAgICAgICAnRm46OkpvaW4nOiBbXG4gICAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgJ3N0YXRlcy4nLFxuICAgICAgICAgICAgICAgICAgICBzdGFjay5yZXNvbHZlKHN0YWNrLnJlZ2lvbiksXG4gICAgICAgICAgICAgICAgICAgICcuYW1hem9uYXdzLmNvbScsXG4gICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFZlcnNpb246ICcyMDEyLTEwLTE3JyxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgZXhwZWN0KHN0YWNrKS50b0hhdmVSZXNvdXJjZUxpa2UoJ0FXUzo6SUFNOjpQb2xpY3knLCB7XG4gICAgICBQb2xpY3lEb2N1bWVudDoge1xuICAgICAgICBTdGF0ZW1lbnQ6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBBY3Rpb246ICdsYW1iZGE6SW52b2tlRnVuY3Rpb24nLFxuICAgICAgICAgICAgRWZmZWN0OiAnQWxsb3cnLFxuICAgICAgICAgICAgUmVzb3VyY2U6IHN0YWNrLnJlc29sdmUoaXNDb21wbGV0ZUhhbmRsZXIuZnVuY3Rpb25Bcm4pLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgQWN0aW9uOiAnbGFtYmRhOkludm9rZUZ1bmN0aW9uJyxcbiAgICAgICAgICAgIEVmZmVjdDogJ0FsbG93JyxcbiAgICAgICAgICAgIFJlc291cmNlOiBzdGFjay5yZXNvbHZlKHRpbWVvdXRIYW5kbGVyLmZ1bmN0aW9uQXJuKSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBWZXJzaW9uOiAnMjAxMi0xMC0xNycsXG4gICAgICB9LFxuICAgICAgUm9sZXM6IFt7IFJlZjogcm9sZUlkIH1dLFxuICAgIH0pO1xuICB9KTtcbn0pOyJdfQ==