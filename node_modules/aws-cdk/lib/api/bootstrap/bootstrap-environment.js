"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const serialize_1 = require("../../serialize");
const deploy_bootstrap_1 = require("./deploy-bootstrap");
const legacy_template_1 = require("./legacy-template");
// tslint:disable:max-line-length
/**
 * Deploy legacy bootstrap stack
 *
 * @experimental
 */
async function bootstrapEnvironment(environment, sdkProvider, options) {
    var _a, _b, _c;
    const params = (_a = options.parameters) !== null && _a !== void 0 ? _a : {};
    if ((_b = params.trustedAccounts) === null || _b === void 0 ? void 0 : _b.length) {
        throw new Error('--trust can only be passed for the new bootstrap experience.');
    }
    if ((_c = params.cloudFormationExecutionPolicies) === null || _c === void 0 ? void 0 : _c.length) {
        throw new Error('--cloudformation-execution-policies can only be passed for the new bootstrap experience.');
    }
    return deploy_bootstrap_1.deployBootstrapStack(legacy_template_1.legacyBootstrapTemplate(params), {}, environment, sdkProvider, options);
}
exports.bootstrapEnvironment = bootstrapEnvironment;
/**
 * Deploy CI/CD-ready bootstrap stack from template
 *
 * @experimental
 */
async function bootstrapEnvironment2(environment, sdkProvider, options) {
    var _a, _b, _c, _d, _e;
    const params = (_a = options.parameters) !== null && _a !== void 0 ? _a : {};
    if (((_b = params.trustedAccounts) === null || _b === void 0 ? void 0 : _b.length) && !((_c = params.cloudFormationExecutionPolicies) === null || _c === void 0 ? void 0 : _c.length)) {
        throw new Error('--cloudformation-execution-policies are required if --trust has been passed!');
    }
    const bootstrapTemplatePath = path.join(__dirname, 'bootstrap-template.yaml');
    const bootstrapTemplate = await serialize_1.loadStructuredFile(bootstrapTemplatePath);
    return deploy_bootstrap_1.deployBootstrapStack(bootstrapTemplate, {
        FileAssetsBucketName: params.bucketName,
        FileAssetsBucketKmsKeyId: params.kmsKeyId,
        TrustedAccounts: (_d = params.trustedAccounts) === null || _d === void 0 ? void 0 : _d.join(','),
        CloudFormationExecutionPolicies: (_e = params.cloudFormationExecutionPolicies) === null || _e === void 0 ? void 0 : _e.join(','),
    }, environment, sdkProvider, options);
}
exports.bootstrapEnvironment2 = bootstrapEnvironment2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLWVudmlyb25tZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYm9vdHN0cmFwLWVudmlyb25tZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsNkJBQTZCO0FBQzdCLCtDQUFxRDtBQUlyRCx5REFBMEQ7QUFDMUQsdURBQTREO0FBRTVELGlDQUFpQztBQUVqQzs7OztHQUlHO0FBQ0ksS0FBSyxVQUFVLG9CQUFvQixDQUFDLFdBQThCLEVBQUUsV0FBd0IsRUFBRSxPQUFvQzs7SUFDdkksTUFBTSxNQUFNLFNBQUcsT0FBTyxDQUFDLFVBQVUsbUNBQUksRUFBRSxDQUFDO0lBRXhDLFVBQUksTUFBTSxDQUFDLGVBQWUsMENBQUUsTUFBTSxFQUFFO1FBQ2xDLE1BQU0sSUFBSSxLQUFLLENBQUMsOERBQThELENBQUMsQ0FBQztLQUNqRjtJQUNELFVBQUksTUFBTSxDQUFDLCtCQUErQiwwQ0FBRSxNQUFNLEVBQUU7UUFDbEQsTUFBTSxJQUFJLEtBQUssQ0FBQywwRkFBMEYsQ0FBQyxDQUFDO0tBQzdHO0lBRUQsT0FBTyx1Q0FBb0IsQ0FDekIseUNBQXVCLENBQUMsTUFBTSxDQUFDLEVBQy9CLEVBQUUsRUFDRixXQUFXLEVBQ1gsV0FBVyxFQUNYLE9BQU8sQ0FBQyxDQUFDO0FBQ2IsQ0FBQztBQWhCRCxvREFnQkM7QUFFRDs7OztHQUlHO0FBQ0ksS0FBSyxVQUFVLHFCQUFxQixDQUN6QyxXQUE4QixFQUM5QixXQUF3QixFQUN4QixPQUFvQzs7SUFFcEMsTUFBTSxNQUFNLFNBQUcsT0FBTyxDQUFDLFVBQVUsbUNBQUksRUFBRSxDQUFDO0lBRXhDLElBQUksT0FBQSxNQUFNLENBQUMsZUFBZSwwQ0FBRSxNQUFNLEtBQUksUUFBQyxNQUFNLENBQUMsK0JBQStCLDBDQUFFLE1BQU0sQ0FBQSxFQUFFO1FBQ3JGLE1BQU0sSUFBSSxLQUFLLENBQUMsOEVBQThFLENBQUMsQ0FBQztLQUNqRztJQUVELE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUseUJBQXlCLENBQUMsQ0FBQztJQUM5RSxNQUFNLGlCQUFpQixHQUFHLE1BQU0sOEJBQWtCLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUUxRSxPQUFPLHVDQUFvQixDQUN6QixpQkFBaUIsRUFDakI7UUFDRSxvQkFBb0IsRUFBRSxNQUFNLENBQUMsVUFBVTtRQUN2Qyx3QkFBd0IsRUFBRSxNQUFNLENBQUMsUUFBUTtRQUN6QyxlQUFlLFFBQUUsTUFBTSxDQUFDLGVBQWUsMENBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNsRCwrQkFBK0IsUUFBRSxNQUFNLENBQUMsK0JBQStCLDBDQUFFLElBQUksQ0FBQyxHQUFHLENBQUM7S0FDbkYsRUFDRCxXQUFXLEVBQ1gsV0FBVyxFQUNYLE9BQU8sQ0FBQyxDQUFDO0FBQ2IsQ0FBQztBQXpCRCxzREF5QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjeGFwaSBmcm9tICdAYXdzLWNkay9jeC1hcGknO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGxvYWRTdHJ1Y3R1cmVkRmlsZSB9IGZyb20gJy4uLy4uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyBTZGtQcm92aWRlciB9IGZyb20gJy4uL2F3cy1hdXRoJztcbmltcG9ydCB7IERlcGxveVN0YWNrUmVzdWx0IH0gZnJvbSAnLi4vZGVwbG95LXN0YWNrJztcbmltcG9ydCB7IEJvb3RzdHJhcEVudmlyb25tZW50T3B0aW9ucyB9IGZyb20gJy4vYm9vdHN0cmFwLXByb3BzJztcbmltcG9ydCB7IGRlcGxveUJvb3RzdHJhcFN0YWNrIH0gZnJvbSAnLi9kZXBsb3ktYm9vdHN0cmFwJztcbmltcG9ydCB7IGxlZ2FjeUJvb3RzdHJhcFRlbXBsYXRlIH0gZnJvbSAnLi9sZWdhY3ktdGVtcGxhdGUnO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGhcblxuLyoqXG4gKiBEZXBsb3kgbGVnYWN5IGJvb3RzdHJhcCBzdGFja1xuICpcbiAqIEBleHBlcmltZW50YWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJvb3RzdHJhcEVudmlyb25tZW50KGVudmlyb25tZW50OiBjeGFwaS5FbnZpcm9ubWVudCwgc2RrUHJvdmlkZXI6IFNka1Byb3ZpZGVyLCBvcHRpb25zOiBCb290c3RyYXBFbnZpcm9ubWVudE9wdGlvbnMpOiBQcm9taXNlPERlcGxveVN0YWNrUmVzdWx0PiB7XG4gIGNvbnN0IHBhcmFtcyA9IG9wdGlvbnMucGFyYW1ldGVycyA/PyB7fTtcblxuICBpZiAocGFyYW1zLnRydXN0ZWRBY2NvdW50cz8ubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCctLXRydXN0IGNhbiBvbmx5IGJlIHBhc3NlZCBmb3IgdGhlIG5ldyBib290c3RyYXAgZXhwZXJpZW5jZS4nKTtcbiAgfVxuICBpZiAocGFyYW1zLmNsb3VkRm9ybWF0aW9uRXhlY3V0aW9uUG9saWNpZXM/Lmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignLS1jbG91ZGZvcm1hdGlvbi1leGVjdXRpb24tcG9saWNpZXMgY2FuIG9ubHkgYmUgcGFzc2VkIGZvciB0aGUgbmV3IGJvb3RzdHJhcCBleHBlcmllbmNlLicpO1xuICB9XG5cbiAgcmV0dXJuIGRlcGxveUJvb3RzdHJhcFN0YWNrKFxuICAgIGxlZ2FjeUJvb3RzdHJhcFRlbXBsYXRlKHBhcmFtcyksXG4gICAge30sXG4gICAgZW52aXJvbm1lbnQsXG4gICAgc2RrUHJvdmlkZXIsXG4gICAgb3B0aW9ucyk7XG59XG5cbi8qKlxuICogRGVwbG95IENJL0NELXJlYWR5IGJvb3RzdHJhcCBzdGFjayBmcm9tIHRlbXBsYXRlXG4gKlxuICogQGV4cGVyaW1lbnRhbFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYm9vdHN0cmFwRW52aXJvbm1lbnQyKFxuICBlbnZpcm9ubWVudDogY3hhcGkuRW52aXJvbm1lbnQsXG4gIHNka1Byb3ZpZGVyOiBTZGtQcm92aWRlcixcbiAgb3B0aW9uczogQm9vdHN0cmFwRW52aXJvbm1lbnRPcHRpb25zKTogUHJvbWlzZTxEZXBsb3lTdGFja1Jlc3VsdD4ge1xuXG4gIGNvbnN0IHBhcmFtcyA9IG9wdGlvbnMucGFyYW1ldGVycyA/PyB7fTtcblxuICBpZiAocGFyYW1zLnRydXN0ZWRBY2NvdW50cz8ubGVuZ3RoICYmICFwYXJhbXMuY2xvdWRGb3JtYXRpb25FeGVjdXRpb25Qb2xpY2llcz8ubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCctLWNsb3VkZm9ybWF0aW9uLWV4ZWN1dGlvbi1wb2xpY2llcyBhcmUgcmVxdWlyZWQgaWYgLS10cnVzdCBoYXMgYmVlbiBwYXNzZWQhJyk7XG4gIH1cblxuICBjb25zdCBib290c3RyYXBUZW1wbGF0ZVBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnYm9vdHN0cmFwLXRlbXBsYXRlLnlhbWwnKTtcbiAgY29uc3QgYm9vdHN0cmFwVGVtcGxhdGUgPSBhd2FpdCBsb2FkU3RydWN0dXJlZEZpbGUoYm9vdHN0cmFwVGVtcGxhdGVQYXRoKTtcblxuICByZXR1cm4gZGVwbG95Qm9vdHN0cmFwU3RhY2soXG4gICAgYm9vdHN0cmFwVGVtcGxhdGUsXG4gICAge1xuICAgICAgRmlsZUFzc2V0c0J1Y2tldE5hbWU6IHBhcmFtcy5idWNrZXROYW1lLFxuICAgICAgRmlsZUFzc2V0c0J1Y2tldEttc0tleUlkOiBwYXJhbXMua21zS2V5SWQsXG4gICAgICBUcnVzdGVkQWNjb3VudHM6IHBhcmFtcy50cnVzdGVkQWNjb3VudHM/LmpvaW4oJywnKSxcbiAgICAgIENsb3VkRm9ybWF0aW9uRXhlY3V0aW9uUG9saWNpZXM6IHBhcmFtcy5jbG91ZEZvcm1hdGlvbkV4ZWN1dGlvblBvbGljaWVzPy5qb2luKCcsJyksXG4gICAgfSxcbiAgICBlbnZpcm9ubWVudCxcbiAgICBzZGtQcm92aWRlcixcbiAgICBvcHRpb25zKTtcbn0iXX0=