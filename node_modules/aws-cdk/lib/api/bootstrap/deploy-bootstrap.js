"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const aws_auth_1 = require("../aws-auth");
const deploy_stack_1 = require("../deploy-stack");
const toolkit_info_1 = require("../toolkit-info");
const bootstrap_props_1 = require("./bootstrap-props");
/**
 * Perform the actual deployment of a bootstrap stack, given a template and some parameters
 */
async function deployBootstrapStack(template, parameters, environment, sdkProvider, options) {
    var _a, _b, _c;
    const toolkitStackName = (_a = options.toolkitStackName) !== null && _a !== void 0 ? _a : toolkit_info_1.DEFAULT_TOOLKIT_STACK_NAME;
    const resolvedEnvironment = await sdkProvider.resolveEnvironment(environment);
    const sdk = await sdkProvider.forEnvironment(resolvedEnvironment, aws_auth_1.Mode.ForWriting);
    const newVersion = bootstrapVersionFromTemplate(template);
    const currentBootstrapStack = await toolkit_info_1.ToolkitInfo.lookup(resolvedEnvironment, sdk, toolkitStackName);
    if (currentBootstrapStack && newVersion < currentBootstrapStack.version && !options.force) {
        throw new Error(`Not downgrading existing bootstrap stack from version '${currentBootstrapStack.version}' to version '${newVersion}'. Use --force to force.`);
    }
    const outdir = await fs.mkdtemp(path.join(os.tmpdir(), 'cdk-bootstrap'));
    const builder = new cxapi.CloudAssemblyBuilder(outdir);
    const templateFile = `${toolkitStackName}.template.json`;
    await fs.writeJson(path.join(builder.outdir, templateFile), template, { spaces: 2 });
    builder.addArtifact(toolkitStackName, {
        type: cxschema.ArtifactType.AWS_CLOUDFORMATION_STACK,
        environment: cxapi.EnvironmentUtils.format(environment.account, environment.region),
        properties: {
            templateFile,
        },
    });
    const assembly = builder.buildAssembly();
    return await deploy_stack_1.deployStack({
        stack: assembly.getStackByName(toolkitStackName),
        resolvedEnvironment,
        sdk: await sdkProvider.forEnvironment(resolvedEnvironment, aws_auth_1.Mode.ForWriting),
        sdkProvider,
        roleArn: options.roleArn,
        tags: (_b = options.parameters) === null || _b === void 0 ? void 0 : _b.tags,
        execute: (_c = options === null || options === void 0 ? void 0 : options.parameters) === null || _c === void 0 ? void 0 : _c.execute,
        parameters,
    });
}
exports.deployBootstrapStack = deployBootstrapStack;
function bootstrapVersionFromTemplate(template) {
    var _a, _b, _c;
    return parseInt((_c = (_b = (_a = template.Outputs) === null || _a === void 0 ? void 0 : _a[bootstrap_props_1.BOOTSTRAP_VERSION_OUTPUT]) === null || _b === void 0 ? void 0 : _b.Value) !== null && _c !== void 0 ? _c : '0', 10);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95LWJvb3RzdHJhcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRlcGxveS1ib290c3RyYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyREFBMkQ7QUFDM0QseUNBQXlDO0FBQ3pDLCtCQUErQjtBQUMvQix5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLDBDQUFnRDtBQUNoRCxrREFBaUU7QUFDakUsa0RBQTBFO0FBQzFFLHVEQUEwRjtBQUUxRjs7R0FFRztBQUNJLEtBQUssVUFBVSxvQkFBb0IsQ0FDeEMsUUFBYSxFQUNiLFVBQThDLEVBQzlDLFdBQThCLEVBQzlCLFdBQXdCLEVBQ3hCLE9BQW9DOztJQUVwQyxNQUFNLGdCQUFnQixTQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsbUNBQUkseUNBQTBCLENBQUM7SUFFaEYsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM5RSxNQUFNLEdBQUcsR0FBRyxNQUFNLFdBQVcsQ0FBQyxjQUFjLENBQUMsbUJBQW1CLEVBQUUsZUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRW5GLE1BQU0sVUFBVSxHQUFHLDRCQUE0QixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFELE1BQU0scUJBQXFCLEdBQUcsTUFBTSwwQkFBVyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUNuRyxJQUFJLHFCQUFxQixJQUFJLFVBQVUsR0FBRyxxQkFBcUIsQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO1FBQ3pGLE1BQU0sSUFBSSxLQUFLLENBQUMsMERBQTBELHFCQUFxQixDQUFDLE9BQU8saUJBQWlCLFVBQVUsMEJBQTBCLENBQUMsQ0FBQztLQUMvSjtJQUVELE1BQU0sTUFBTSxHQUFHLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLE1BQU0sT0FBTyxHQUFHLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sWUFBWSxHQUFHLEdBQUcsZ0JBQWdCLGdCQUFnQixDQUFDO0lBQ3pELE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFckYsT0FBTyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRTtRQUNwQyxJQUFJLEVBQUUsUUFBUSxDQUFDLFlBQVksQ0FBQyx3QkFBd0I7UUFDcEQsV0FBVyxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFDO1FBQ25GLFVBQVUsRUFBRTtZQUNWLFlBQVk7U0FDYjtLQUNGLENBQUMsQ0FBQztJQUVILE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUV6QyxPQUFPLE1BQU0sMEJBQVcsQ0FBQztRQUN2QixLQUFLLEVBQUUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNoRCxtQkFBbUI7UUFDbkIsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsRUFBRSxlQUFJLENBQUMsVUFBVSxDQUFDO1FBQzNFLFdBQVc7UUFDWCxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87UUFDeEIsSUFBSSxRQUFFLE9BQU8sQ0FBQyxVQUFVLDBDQUFFLElBQUk7UUFDOUIsT0FBTyxRQUFFLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxVQUFVLDBDQUFFLE9BQU87UUFDckMsVUFBVTtLQUNYLENBQUMsQ0FBQztBQUNMLENBQUM7QUEzQ0Qsb0RBMkNDO0FBRUQsU0FBUyw0QkFBNEIsQ0FBQyxRQUFhOztJQUNqRCxPQUFPLFFBQVEsbUJBQUMsUUFBUSxDQUFDLE9BQU8sMENBQUcsMENBQXdCLDJDQUFHLEtBQUssbUNBQUksR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjeHNjaGVtYSBmcm9tICdAYXdzLWNkay9jbG91ZC1hc3NlbWJseS1zY2hlbWEnO1xuaW1wb3J0ICogYXMgY3hhcGkgZnJvbSAnQGF3cy1jZGsvY3gtYXBpJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCAqIGFzIG9zIGZyb20gJ29zJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBNb2RlLCBTZGtQcm92aWRlciB9IGZyb20gJy4uL2F3cy1hdXRoJztcbmltcG9ydCB7IGRlcGxveVN0YWNrLCBEZXBsb3lTdGFja1Jlc3VsdCB9IGZyb20gJy4uL2RlcGxveS1zdGFjayc7XG5pbXBvcnQgeyBERUZBVUxUX1RPT0xLSVRfU1RBQ0tfTkFNRSwgVG9vbGtpdEluZm8gfSBmcm9tICcuLi90b29sa2l0LWluZm8nO1xuaW1wb3J0IHsgQk9PVFNUUkFQX1ZFUlNJT05fT1VUUFVULCBCb290c3RyYXBFbnZpcm9ubWVudE9wdGlvbnMgfSBmcm9tICcuL2Jvb3RzdHJhcC1wcm9wcyc7XG5cbi8qKlxuICogUGVyZm9ybSB0aGUgYWN0dWFsIGRlcGxveW1lbnQgb2YgYSBib290c3RyYXAgc3RhY2ssIGdpdmVuIGEgdGVtcGxhdGUgYW5kIHNvbWUgcGFyYW1ldGVyc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVwbG95Qm9vdHN0cmFwU3RhY2soXG4gIHRlbXBsYXRlOiBhbnksXG4gIHBhcmFtZXRlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IHVuZGVmaW5lZD4sXG4gIGVudmlyb25tZW50OiBjeGFwaS5FbnZpcm9ubWVudCxcbiAgc2RrUHJvdmlkZXI6IFNka1Byb3ZpZGVyLFxuICBvcHRpb25zOiBCb290c3RyYXBFbnZpcm9ubWVudE9wdGlvbnMpOiBQcm9taXNlPERlcGxveVN0YWNrUmVzdWx0PiB7XG5cbiAgY29uc3QgdG9vbGtpdFN0YWNrTmFtZSA9IG9wdGlvbnMudG9vbGtpdFN0YWNrTmFtZSA/PyBERUZBVUxUX1RPT0xLSVRfU1RBQ0tfTkFNRTtcblxuICBjb25zdCByZXNvbHZlZEVudmlyb25tZW50ID0gYXdhaXQgc2RrUHJvdmlkZXIucmVzb2x2ZUVudmlyb25tZW50KGVudmlyb25tZW50KTtcbiAgY29uc3Qgc2RrID0gYXdhaXQgc2RrUHJvdmlkZXIuZm9yRW52aXJvbm1lbnQocmVzb2x2ZWRFbnZpcm9ubWVudCwgTW9kZS5Gb3JXcml0aW5nKTtcblxuICBjb25zdCBuZXdWZXJzaW9uID0gYm9vdHN0cmFwVmVyc2lvbkZyb21UZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gIGNvbnN0IGN1cnJlbnRCb290c3RyYXBTdGFjayA9IGF3YWl0IFRvb2xraXRJbmZvLmxvb2t1cChyZXNvbHZlZEVudmlyb25tZW50LCBzZGssIHRvb2xraXRTdGFja05hbWUpO1xuICBpZiAoY3VycmVudEJvb3RzdHJhcFN0YWNrICYmIG5ld1ZlcnNpb24gPCBjdXJyZW50Qm9vdHN0cmFwU3RhY2sudmVyc2lvbiAmJiAhb3B0aW9ucy5mb3JjZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgTm90IGRvd25ncmFkaW5nIGV4aXN0aW5nIGJvb3RzdHJhcCBzdGFjayBmcm9tIHZlcnNpb24gJyR7Y3VycmVudEJvb3RzdHJhcFN0YWNrLnZlcnNpb259JyB0byB2ZXJzaW9uICcke25ld1ZlcnNpb259Jy4gVXNlIC0tZm9yY2UgdG8gZm9yY2UuYCk7XG4gIH1cblxuICBjb25zdCBvdXRkaXIgPSBhd2FpdCBmcy5ta2R0ZW1wKHBhdGguam9pbihvcy50bXBkaXIoKSwgJ2Nkay1ib290c3RyYXAnKSk7XG4gIGNvbnN0IGJ1aWxkZXIgPSBuZXcgY3hhcGkuQ2xvdWRBc3NlbWJseUJ1aWxkZXIob3V0ZGlyKTtcbiAgY29uc3QgdGVtcGxhdGVGaWxlID0gYCR7dG9vbGtpdFN0YWNrTmFtZX0udGVtcGxhdGUuanNvbmA7XG4gIGF3YWl0IGZzLndyaXRlSnNvbihwYXRoLmpvaW4oYnVpbGRlci5vdXRkaXIsIHRlbXBsYXRlRmlsZSksIHRlbXBsYXRlLCB7IHNwYWNlczogMiB9KTtcblxuICBidWlsZGVyLmFkZEFydGlmYWN0KHRvb2xraXRTdGFja05hbWUsIHtcbiAgICB0eXBlOiBjeHNjaGVtYS5BcnRpZmFjdFR5cGUuQVdTX0NMT1VERk9STUFUSU9OX1NUQUNLLFxuICAgIGVudmlyb25tZW50OiBjeGFwaS5FbnZpcm9ubWVudFV0aWxzLmZvcm1hdChlbnZpcm9ubWVudC5hY2NvdW50LCBlbnZpcm9ubWVudC5yZWdpb24pLFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIHRlbXBsYXRlRmlsZSxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCBhc3NlbWJseSA9IGJ1aWxkZXIuYnVpbGRBc3NlbWJseSgpO1xuXG4gIHJldHVybiBhd2FpdCBkZXBsb3lTdGFjayh7XG4gICAgc3RhY2s6IGFzc2VtYmx5LmdldFN0YWNrQnlOYW1lKHRvb2xraXRTdGFja05hbWUpLFxuICAgIHJlc29sdmVkRW52aXJvbm1lbnQsXG4gICAgc2RrOiBhd2FpdCBzZGtQcm92aWRlci5mb3JFbnZpcm9ubWVudChyZXNvbHZlZEVudmlyb25tZW50LCBNb2RlLkZvcldyaXRpbmcpLFxuICAgIHNka1Byb3ZpZGVyLFxuICAgIHJvbGVBcm46IG9wdGlvbnMucm9sZUFybixcbiAgICB0YWdzOiBvcHRpb25zLnBhcmFtZXRlcnM/LnRhZ3MsXG4gICAgZXhlY3V0ZTogb3B0aW9ucz8ucGFyYW1ldGVycz8uZXhlY3V0ZSxcbiAgICBwYXJhbWV0ZXJzLFxuICB9KTtcbn1cblxuZnVuY3Rpb24gYm9vdHN0cmFwVmVyc2lvbkZyb21UZW1wbGF0ZSh0ZW1wbGF0ZTogYW55KTogbnVtYmVyIHtcbiAgcmV0dXJuIHBhcnNlSW50KHRlbXBsYXRlLk91dHB1dHM/LltCT09UU1RSQVBfVkVSU0lPTl9PVVRQVVRdPy5WYWx1ZSA/PyAnMCcsIDEwKTtcbn0iXX0=