"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors/safe");
const version = require("../../lib/version");
const logging_1 = require("../logging");
const settings_1 = require("../settings");
const util_1 = require("../util");
exports.command = 'context';
exports.describe = 'Manage cached context values';
exports.builder = {
    reset: {
        alias: 'e',
        desc: 'The context key (or its index) to reset',
        type: 'string',
        requiresArg: true,
    },
    clear: {
        desc: 'Clear all context',
        type: 'boolean',
    },
};
function handler(args) {
    args.commandHandler = realHandler;
}
exports.handler = handler;
async function realHandler(options) {
    const { configuration, args } = options;
    const contextValues = configuration.context.all;
    if (args.clear) {
        configuration.context.clear();
        await configuration.saveContext();
        logging_1.print('All context values cleared.');
    }
    else if (args.reset) {
        invalidateContext(configuration.context, args.reset);
        await configuration.saveContext();
    }
    else {
        // List -- support '--json' flag
        if (args.json) {
            process.stdout.write(JSON.stringify(contextValues, undefined, 2));
        }
        else {
            listContext(contextValues);
        }
    }
    await version.displayVersionMessage();
    return 0;
}
exports.realHandler = realHandler;
function listContext(context) {
    const keys = contextKeys(context);
    if (keys.length === 0) {
        logging_1.print('This CDK application does not have any saved context values yet.');
        logging_1.print('');
        logging_1.print('Context will automatically be saved when you synthesize CDK apps');
        logging_1.print('that use environment context information like AZ information, VPCs,');
        logging_1.print('SSM parameters, and so on.');
        return;
    }
    // Print config by default
    const data = [[colors.green('#'), colors.green('Key'), colors.green('Value')]];
    for (const [i, key] of keys) {
        const jsonWithoutNewlines = JSON.stringify(context[key], undefined, 2).replace(/\s+/g, ' ');
        data.push([i, key, jsonWithoutNewlines]);
    }
    logging_1.print(`Context found in ${colors.blue(settings_1.PROJECT_CONFIG)}:\n`);
    logging_1.print(util_1.renderTable(data, process.stdout.columns));
    // tslint:disable-next-line:max-line-length
    logging_1.print(`Run ${colors.blue('cdk context --reset KEY_OR_NUMBER')} to remove a context key. It will be refreshed on the next CDK synthesis run.`);
}
function invalidateContext(context, key) {
    const i = parseInt(key, 10);
    if (`${i}` === key) {
        // Twas a number and we fully parsed it.
        key = keyByNumber(context, i);
    }
    // Unset!
    if (context.has(key)) {
        context.unset(key);
        logging_1.print(`Context value ${colors.blue(key)} reset. It will be refreshed on next synthesis`);
    }
    else {
        logging_1.print(`No context value with key ${colors.blue(key)}`);
    }
}
function keyByNumber(context, n) {
    for (const [i, key] of contextKeys(context)) {
        if (n === i) {
            return key;
        }
    }
    throw new Error(`No context key with number: ${n}`);
}
/**
 * Return enumerated keys in a definitive order
 */
function contextKeys(context) {
    const keys = Object.keys(context);
    keys.sort();
    return enumerate1(keys);
}
function enumerate1(xs) {
    const ret = new Array();
    let i = 1;
    for (const x of xs) {
        ret.push([i, x]);
        i += 1;
    }
    return ret;
}
//# sourceMappingURL=data:application/json;base64,