"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const childProcess = require("child_process");
const colors = require("colors/safe");
const process = require("process");
const logging_1 = require("../../lib/logging");
exports.command = 'docs';
exports.describe = 'Opens the reference documentation in a browser';
exports.aliases = ['doc'];
exports.builder = {
    browser: {
        alias: 'b',
        desc: 'the command to use to open the browser, using %u as a placeholder for the path of the file to open',
        type: 'string',
        default: process.platform === 'win32' ? 'start %u' : 'open %u',
    },
};
function handler(args) {
    args.commandHandler = realHandler;
}
exports.handler = handler;
async function realHandler(options) {
    const url = 'https://docs.aws.amazon.com/cdk/api/latest/';
    logging_1.print(colors.green(url));
    const browserCommand = options.args.browser.replace(/%u/g, url);
    logging_1.debug(`Opening documentation ${colors.green(browserCommand)}`);
    return new Promise((resolve, _reject) => {
        childProcess.exec(browserCommand, (err, stdout, stderr) => {
            if (err) {
                logging_1.debug(`An error occurred when trying to open a browser: ${err.stack || err.message}`);
                return resolve(0);
            }
            if (stdout) {
                logging_1.debug(stdout);
            }
            if (stderr) {
                logging_1.warning(stderr);
            }
            resolve(0);
        });
    });
}
exports.realHandler = realHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRvY3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw4Q0FBOEM7QUFDOUMsc0NBQXNDO0FBQ3RDLG1DQUFtQztBQUVuQywrQ0FBMkQ7QUFHOUMsUUFBQSxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQ2pCLFFBQUEsUUFBUSxHQUFHLGdEQUFnRCxDQUFDO0FBQzVELFFBQUEsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbEIsUUFBQSxPQUFPLEdBQUc7SUFDckIsT0FBTyxFQUFFO1FBQ1AsS0FBSyxFQUFFLEdBQUc7UUFDVixJQUFJLEVBQUUsb0dBQW9HO1FBQzFHLElBQUksRUFBRSxRQUFRO1FBQ2QsT0FBTyxFQUFFLE9BQU8sQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVM7S0FDL0Q7Q0FDRixDQUFDO0FBTUYsU0FBZ0IsT0FBTyxDQUFDLElBQXFCO0lBQzNDLElBQUksQ0FBQyxjQUFjLEdBQUcsV0FBVyxDQUFDO0FBQ3BDLENBQUM7QUFGRCwwQkFFQztBQUVNLEtBQUssVUFBVSxXQUFXLENBQUMsT0FBdUI7SUFDdkQsTUFBTSxHQUFHLEdBQUcsNkNBQTZDLENBQUM7SUFDMUQsZUFBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN6QixNQUFNLGNBQWMsR0FBSSxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQWtCLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM1RSxlQUFLLENBQUMseUJBQXlCLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELE9BQU8sSUFBSSxPQUFPLENBQVMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUU7UUFDOUMsWUFBWSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3hELElBQUksR0FBRyxFQUFFO2dCQUNQLGVBQUssQ0FBQyxvREFBb0QsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQkFDdEYsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDbkI7WUFDRCxJQUFJLE1BQU0sRUFBRTtnQkFBRSxlQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7YUFBRTtZQUM5QixJQUFJLE1BQU0sRUFBRTtnQkFBRSxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQUU7WUFDaEMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFoQkQsa0NBZ0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2hpbGRQcm9jZXNzIGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0ICogYXMgY29sb3JzIGZyb20gJ2NvbG9ycy9zYWZlJztcbmltcG9ydCAqIGFzIHByb2Nlc3MgZnJvbSAncHJvY2Vzcyc7XG5pbXBvcnQgKiBhcyB5YXJncyBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBkZWJ1ZywgIHByaW50LCB3YXJuaW5nIH0gZnJvbSAnLi4vLi4vbGliL2xvZ2dpbmcnO1xuaW1wb3J0IHsgQ29tbWFuZE9wdGlvbnMgfSBmcm9tICcuLi9jb21tYW5kLWFwaSc7XG5cbmV4cG9ydCBjb25zdCBjb21tYW5kID0gJ2RvY3MnO1xuZXhwb3J0IGNvbnN0IGRlc2NyaWJlID0gJ09wZW5zIHRoZSByZWZlcmVuY2UgZG9jdW1lbnRhdGlvbiBpbiBhIGJyb3dzZXInO1xuZXhwb3J0IGNvbnN0IGFsaWFzZXMgPSBbJ2RvYyddO1xuZXhwb3J0IGNvbnN0IGJ1aWxkZXIgPSB7XG4gIGJyb3dzZXI6IHtcbiAgICBhbGlhczogJ2InLFxuICAgIGRlc2M6ICd0aGUgY29tbWFuZCB0byB1c2UgdG8gb3BlbiB0aGUgYnJvd3NlciwgdXNpbmcgJXUgYXMgYSBwbGFjZWhvbGRlciBmb3IgdGhlIHBhdGggb2YgdGhlIGZpbGUgdG8gb3BlbicsXG4gICAgdHlwZTogJ3N0cmluZycsXG4gICAgZGVmYXVsdDogcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyA/ICdzdGFydCAldScgOiAnb3BlbiAldScsXG4gIH0sXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIEFyZ3VtZW50cyBleHRlbmRzIHlhcmdzLkFyZ3VtZW50cyB7XG4gIGJyb3dzZXI6IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlcihhcmdzOiB5YXJncy5Bcmd1bWVudHMpIHtcbiAgYXJncy5jb21tYW5kSGFuZGxlciA9IHJlYWxIYW5kbGVyO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVhbEhhbmRsZXIob3B0aW9uczogQ29tbWFuZE9wdGlvbnMpOiBQcm9taXNlPG51bWJlcj4ge1xuICBjb25zdCB1cmwgPSAnaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2Nkay9hcGkvbGF0ZXN0Lyc7XG4gIHByaW50KGNvbG9ycy5ncmVlbih1cmwpKTtcbiAgY29uc3QgYnJvd3NlckNvbW1hbmQgPSAob3B0aW9ucy5hcmdzLmJyb3dzZXIgYXMgc3RyaW5nKS5yZXBsYWNlKC8ldS9nLCB1cmwpO1xuICBkZWJ1ZyhgT3BlbmluZyBkb2N1bWVudGF0aW9uICR7Y29sb3JzLmdyZWVuKGJyb3dzZXJDb21tYW5kKX1gKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPG51bWJlcj4oKHJlc29sdmUsIF9yZWplY3QpID0+IHtcbiAgICBjaGlsZFByb2Nlc3MuZXhlYyhicm93c2VyQ29tbWFuZCwgKGVyciwgc3Rkb3V0LCBzdGRlcnIpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgZGVidWcoYEFuIGVycm9yIG9jY3VycmVkIHdoZW4gdHJ5aW5nIHRvIG9wZW4gYSBicm93c2VyOiAke2Vyci5zdGFjayB8fCBlcnIubWVzc2FnZX1gKTtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoMCk7XG4gICAgICB9XG4gICAgICBpZiAoc3Rkb3V0KSB7IGRlYnVnKHN0ZG91dCk7IH1cbiAgICAgIGlmIChzdGRlcnIpIHsgd2FybmluZyhzdGRlcnIpOyB9XG4gICAgICByZXNvbHZlKDApO1xuICAgIH0pO1xuICB9KTtcbn1cbiJdfQ==