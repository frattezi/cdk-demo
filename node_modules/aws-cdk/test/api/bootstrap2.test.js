"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mockDeployStack = jest.fn();
jest.mock('../../lib/api/deploy-stack', () => ({
    deployStack: mockDeployStack,
}));
let mockToolkitInfo;
jest.mock('../../lib/api/toolkit-info', () => ({
    // Pretend there's no toolkit deployed yet
    DEFAULT_TOOLKIT_STACK_NAME: 'CDKToolkit',
    ToolkitInfo: {
        lookup: () => mockToolkitInfo,
    },
}));
const bootstrap_1 = require("../../lib/api/bootstrap");
const mock_sdk_1 = require("../util/mock-sdk");
describe('Bootstrapping v2', () => {
    const env = {
        account: '123456789012',
        region: 'us-east-1',
        name: 'mock',
    };
    const sdk = new mock_sdk_1.MockSdkProvider();
    mockToolkitInfo = undefined;
    test('passes the bucket name as a CFN parameter', async () => {
        await bootstrap_1.bootstrapEnvironment2(env, sdk, {
            parameters: {
                bucketName: 'my-bucket-name',
            },
        });
        expect(mockDeployStack).toHaveBeenCalledWith(expect.objectContaining({
            parameters: {
                FileAssetsBucketName: 'my-bucket-name',
            },
        }));
    });
    test('passes the KMS key ID as a CFN parameter', async () => {
        await bootstrap_1.bootstrapEnvironment2(env, sdk, {
            parameters: {
                kmsKeyId: 'my-kms-key-id',
            },
        });
        expect(mockDeployStack).toHaveBeenCalledWith(expect.objectContaining({
            parameters: {
                FileAssetsBucketKmsKeyId: 'my-kms-key-id',
            },
        }));
    });
    test('passing trusted accounts without CFN managed policies results in an error', async () => {
        await expect(bootstrap_1.bootstrapEnvironment2(env, sdk, {
            parameters: {
                trustedAccounts: ['123456789012'],
            },
        }))
            .rejects
            .toThrow('--cloudformation-execution-policies are required if --trust has been passed!');
    });
    test('Do not allow downgrading bootstrap stack version', async () => {
        // GIVEN
        mockToolkitInfo = {
            version: 999,
        };
        await expect(bootstrap_1.bootstrapEnvironment2(env, sdk, {}))
            .rejects.toThrow('Not downgrading existing bootstrap stack');
    });
    afterEach(() => {
        mockDeployStack.mockClear();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwMi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYm9vdHN0cmFwMi50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBRWxDLElBQUksQ0FBQyxJQUFJLENBQUMsNEJBQTRCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUM3QyxXQUFXLEVBQUUsZUFBZTtDQUM3QixDQUFDLENBQUMsQ0FBQztBQUVKLElBQUksZUFBb0IsQ0FBQztBQUV6QixJQUFJLENBQUMsSUFBSSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDN0MsMENBQTBDO0lBQzFDLDBCQUEwQixFQUFFLFlBQVk7SUFDeEMsV0FBVyxFQUFFO1FBQ1gsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLGVBQWU7S0FDOUI7Q0FDRixDQUFDLENBQUMsQ0FBQztBQUVKLHVEQUFnRTtBQUNoRSwrQ0FBbUQ7QUFFbkQsUUFBUSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtJQUNoQyxNQUFNLEdBQUcsR0FBRztRQUNWLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLE1BQU0sRUFBRSxXQUFXO1FBQ25CLElBQUksRUFBRSxNQUFNO0tBQ2IsQ0FBQztJQUNGLE1BQU0sR0FBRyxHQUFHLElBQUksMEJBQWUsRUFBRSxDQUFDO0lBQ2xDLGVBQWUsR0FBRyxTQUFTLENBQUM7SUFFNUIsSUFBSSxDQUFDLDJDQUEyQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzNELE1BQU0saUNBQXFCLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRTtZQUNwQyxVQUFVLEVBQUU7Z0JBQ1YsVUFBVSxFQUFFLGdCQUFnQjthQUM3QjtTQUNGLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7WUFDbkUsVUFBVSxFQUFFO2dCQUNWLG9CQUFvQixFQUFFLGdCQUFnQjthQUN2QztTQUNGLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsMENBQTBDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDMUQsTUFBTSxpQ0FBcUIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFO1lBQ3BDLFVBQVUsRUFBRTtnQkFDVixRQUFRLEVBQUUsZUFBZTthQUMxQjtTQUNGLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7WUFDbkUsVUFBVSxFQUFFO2dCQUNWLHdCQUF3QixFQUFFLGVBQWU7YUFDMUM7U0FDRixDQUFDLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLDJFQUEyRSxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzNGLE1BQU0sTUFBTSxDQUFDLGlDQUFxQixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7WUFDM0MsVUFBVSxFQUFFO2dCQUNWLGVBQWUsRUFBRSxDQUFDLGNBQWMsQ0FBQzthQUNsQztTQUNGLENBQUMsQ0FBQzthQUNBLE9BQU87YUFDUCxPQUFPLENBQUMsOEVBQThFLENBQUMsQ0FBQztJQUM3RixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxrREFBa0QsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNsRSxRQUFRO1FBQ1IsZUFBZSxHQUFHO1lBQ2hCLE9BQU8sRUFBRSxHQUFHO1NBQ2IsQ0FBQztRQUVGLE1BQU0sTUFBTSxDQUFDLGlDQUFxQixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7YUFDOUMsT0FBTyxDQUFDLE9BQU8sQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0lBQ2pFLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLGVBQWUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUM5QixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9ja0RlcGxveVN0YWNrID0gamVzdC5mbigpO1xuXG5qZXN0Lm1vY2soJy4uLy4uL2xpYi9hcGkvZGVwbG95LXN0YWNrJywgKCkgPT4gKHtcbiAgZGVwbG95U3RhY2s6IG1vY2tEZXBsb3lTdGFjayxcbn0pKTtcblxubGV0IG1vY2tUb29sa2l0SW5mbzogYW55O1xuXG5qZXN0Lm1vY2soJy4uLy4uL2xpYi9hcGkvdG9vbGtpdC1pbmZvJywgKCkgPT4gKHtcbiAgLy8gUHJldGVuZCB0aGVyZSdzIG5vIHRvb2xraXQgZGVwbG95ZWQgeWV0XG4gIERFRkFVTFRfVE9PTEtJVF9TVEFDS19OQU1FOiAnQ0RLVG9vbGtpdCcsXG4gIFRvb2xraXRJbmZvOiB7XG4gICAgbG9va3VwOiAoKSA9PiBtb2NrVG9vbGtpdEluZm8sXG4gIH0sXG59KSk7XG5cbmltcG9ydCB7IGJvb3RzdHJhcEVudmlyb25tZW50MiB9IGZyb20gJy4uLy4uL2xpYi9hcGkvYm9vdHN0cmFwJztcbmltcG9ydCB7IE1vY2tTZGtQcm92aWRlciB9IGZyb20gJy4uL3V0aWwvbW9jay1zZGsnO1xuXG5kZXNjcmliZSgnQm9vdHN0cmFwcGluZyB2MicsICgpID0+IHtcbiAgY29uc3QgZW52ID0ge1xuICAgIGFjY291bnQ6ICcxMjM0NTY3ODkwMTInLFxuICAgIHJlZ2lvbjogJ3VzLWVhc3QtMScsXG4gICAgbmFtZTogJ21vY2snLFxuICB9O1xuICBjb25zdCBzZGsgPSBuZXcgTW9ja1Nka1Byb3ZpZGVyKCk7XG4gIG1vY2tUb29sa2l0SW5mbyA9IHVuZGVmaW5lZDtcblxuICB0ZXN0KCdwYXNzZXMgdGhlIGJ1Y2tldCBuYW1lIGFzIGEgQ0ZOIHBhcmFtZXRlcicsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBib290c3RyYXBFbnZpcm9ubWVudDIoZW52LCBzZGssIHtcbiAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgYnVja2V0TmFtZTogJ215LWJ1Y2tldC1uYW1lJyxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBleHBlY3QobW9ja0RlcGxveVN0YWNrKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgIEZpbGVBc3NldHNCdWNrZXROYW1lOiAnbXktYnVja2V0LW5hbWUnLFxuICAgICAgfSxcbiAgICB9KSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3Bhc3NlcyB0aGUgS01TIGtleSBJRCBhcyBhIENGTiBwYXJhbWV0ZXInLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgYm9vdHN0cmFwRW52aXJvbm1lbnQyKGVudiwgc2RrLCB7XG4gICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgIGttc0tleUlkOiAnbXkta21zLWtleS1pZCcsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgZXhwZWN0KG1vY2tEZXBsb3lTdGFjaykudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICBGaWxlQXNzZXRzQnVja2V0S21zS2V5SWQ6ICdteS1rbXMta2V5LWlkJyxcbiAgICAgIH0sXG4gICAgfSkpO1xuICB9KTtcblxuICB0ZXN0KCdwYXNzaW5nIHRydXN0ZWQgYWNjb3VudHMgd2l0aG91dCBDRk4gbWFuYWdlZCBwb2xpY2llcyByZXN1bHRzIGluIGFuIGVycm9yJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGV4cGVjdChib290c3RyYXBFbnZpcm9ubWVudDIoZW52LCBzZGssIHtcbiAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgdHJ1c3RlZEFjY291bnRzOiBbJzEyMzQ1Njc4OTAxMiddLFxuICAgICAgfSxcbiAgICB9KSlcbiAgICAgIC5yZWplY3RzXG4gICAgICAudG9UaHJvdygnLS1jbG91ZGZvcm1hdGlvbi1leGVjdXRpb24tcG9saWNpZXMgYXJlIHJlcXVpcmVkIGlmIC0tdHJ1c3QgaGFzIGJlZW4gcGFzc2VkIScpO1xuICB9KTtcblxuICB0ZXN0KCdEbyBub3QgYWxsb3cgZG93bmdyYWRpbmcgYm9vdHN0cmFwIHN0YWNrIHZlcnNpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBtb2NrVG9vbGtpdEluZm8gPSB7XG4gICAgICB2ZXJzaW9uOiA5OTksXG4gICAgfTtcblxuICAgIGF3YWl0IGV4cGVjdChib290c3RyYXBFbnZpcm9ubWVudDIoZW52LCBzZGssIHt9KSlcbiAgICAgIC5yZWplY3RzLnRvVGhyb3coJ05vdCBkb3duZ3JhZGluZyBleGlzdGluZyBib290c3RyYXAgc3RhY2snKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBtb2NrRGVwbG95U3RhY2subW9ja0NsZWFyKCk7XG4gIH0pO1xufSk7Il19