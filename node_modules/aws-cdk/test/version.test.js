"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const sinon = require("sinon");
const timers_1 = require("timers");
const util_1 = require("util");
const version_1 = require("../lib/version");
const setTimeout = util_1.promisify(timers_1.setTimeout);
function tmpfile() {
    return `/tmp/version-${Math.floor(Math.random() * 10000)}`;
}
afterEach(done => {
    sinon.restore();
    done();
});
test('initialization fails on unwritable directory', () => {
    const cacheFile = tmpfile();
    sinon.stub(fs, 'mkdirsSync').withArgs(path.dirname(cacheFile)).throws('Cannot make directory');
    expect(() => new version_1.VersionCheckTTL(cacheFile)).toThrow(/not writable/);
});
test('cache file responds correctly when file is not present', async () => {
    const cache = new version_1.VersionCheckTTL(tmpfile(), 1);
    expect(await cache.hasExpired()).toBeTruthy();
});
test('cache file honours the specified TTL', async () => {
    const cache = new version_1.VersionCheckTTL(tmpfile(), 1);
    await cache.update();
    expect(await cache.hasExpired()).toBeFalsy();
    await setTimeout(1001); // Just above 1 sec in ms
    expect(await cache.hasExpired()).toBeTruthy();
});
test('Skip version check if cache has not expired', async () => {
    const cache = new version_1.VersionCheckTTL(tmpfile(), 100);
    await cache.update();
    expect(await version_1.latestVersionIfHigher('0.0.0', cache)).toBeNull();
});
test('Return later version when exists & skip recent re-check', async () => {
    const cache = new version_1.VersionCheckTTL(tmpfile(), 100);
    const result = await version_1.latestVersionIfHigher('0.0.0', cache);
    expect(result).not.toBeNull();
    expect(result.length).toBeGreaterThan(0);
    const result2 = await version_1.latestVersionIfHigher('0.0.0', cache);
    expect(result2).toBeNull();
});
test('Return null if version is higher than npm', async () => {
    const cache = new version_1.VersionCheckTTL(tmpfile(), 100);
    const result = await version_1.latestVersionIfHigher('100.100.100', cache);
    expect(result).toBeNull();
});
test('Version specified is stored in the TTL file', async () => {
    const cacheFile = tmpfile();
    const cache = new version_1.VersionCheckTTL(cacheFile, 1);
    await cache.update('1.1.1');
    const storedVersion = fs.readFileSync(cacheFile, 'utf8');
    expect(storedVersion).toBe('1.1.1');
});
test('No Version specified for storage in the TTL file', async () => {
    const cacheFile = tmpfile();
    const cache = new version_1.VersionCheckTTL(cacheFile, 1);
    await cache.update();
    const storedVersion = fs.readFileSync(cacheFile, 'utf8');
    expect(storedVersion).toBe('');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidmVyc2lvbi50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQStCO0FBQy9CLDZCQUE2QjtBQUM3QiwrQkFBK0I7QUFDL0IsbUNBQW1EO0FBQ25ELCtCQUFpQztBQUNqQyw0Q0FBd0U7QUFFeEUsTUFBTSxVQUFVLEdBQUcsZ0JBQVMsQ0FBQyxtQkFBVyxDQUFDLENBQUM7QUFFMUMsU0FBUyxPQUFPO0lBQ2QsT0FBTyxnQkFBZ0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUM3RCxDQUFDO0FBRUQsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ2YsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2hCLElBQUksRUFBRSxDQUFDO0FBQ1QsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsOENBQThDLEVBQUUsR0FBRyxFQUFFO0lBQ3hELE1BQU0sU0FBUyxHQUFHLE9BQU8sRUFBRSxDQUFDO0lBQzVCLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDL0YsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUkseUJBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUN2RSxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyx3REFBd0QsRUFBRSxLQUFLLElBQUksRUFBRTtJQUN4RSxNQUFNLEtBQUssR0FBRyxJQUFJLHlCQUFlLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEQsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLFVB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QU0sRUFBRSxDQUFDO0lBQ3JCLE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3pELE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDakMsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgc2lub24gZnJvbSAnc2lub24nO1xuaW1wb3J0IHsgc2V0VGltZW91dCBhcyBfc2V0VGltZW91dCB9IGZyb20gJ3RpbWVycyc7XG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICd1dGlsJztcbmltcG9ydCB7IGxhdGVzdFZlcnNpb25JZkhpZ2hlciwgVmVyc2lvbkNoZWNrVFRMIH0gZnJvbSAnLi4vbGliL3ZlcnNpb24nO1xuXG5jb25zdCBzZXRUaW1lb3V0ID0gcHJvbWlzaWZ5KF9zZXRUaW1lb3V0KTtcblxuZnVuY3Rpb24gdG1wZmlsZSgpOiBzdHJpbmcge1xuICByZXR1cm4gYC90bXAvdmVyc2lvbi0ke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwKX1gO1xufVxuXG5hZnRlckVhY2goZG9uZSA9PiB7XG4gIHNpbm9uLnJlc3RvcmUoKTtcbiAgZG9uZSgpO1xufSk7XG5cbnRlc3QoJ2luaXRpYWxpemF0aW9uIGZhaWxzIG9uIHVud3JpdGFibGUgZGlyZWN0b3J5JywgKCkgPT4ge1xuICBjb25zdCBjYWNoZUZpbGUgPSB0bXBmaWxlKCk7XG4gIHNpbm9uLnN0dWIoZnMsICdta2RpcnNTeW5jJykud2l0aEFyZ3MocGF0aC5kaXJuYW1lKGNhY2hlRmlsZSkpLnRocm93cygnQ2Fubm90IG1ha2UgZGlyZWN0b3J5Jyk7XG4gIGV4cGVjdCgoKSA9PiBuZXcgVmVyc2lvbkNoZWNrVFRMKGNhY2hlRmlsZSkpLnRvVGhyb3coL25vdCB3cml0YWJsZS8pO1xufSk7XG5cbnRlc3QoJ2NhY2hlIGZpbGUgcmVzcG9uZHMgY29ycmVjdGx5IHdoZW4gZmlsZSBpcyBub3QgcHJlc2VudCcsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgY2FjaGUgPSBuZXcgVmVyc2lvbkNoZWNrVFRMKHRtcGZpbGUoKSwgMSk7XG4gIGV4cGVjdChhd2FpdCBjYWNoZS5oYXNFeHBpcmVkKCkpLnRvQmVUcnV0aHkoKTtcbn0pO1xuXG50ZXN0KCdjYWNoZSBmaWxlIGhvbm91cnMgdGhlIHNwZWNpZmllZCBUVEwnLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGNhY2hlID0gbmV3IFZlcnNpb25DaGVja1RUTCh0bXBmaWxlKCksIDEpO1xuICBhd2FpdCBjYWNoZS51cGRhdGUoKTtcbiAgZXhwZWN0KGF3YWl0IGNhY2hlLmhhc0V4cGlyZWQoKSkudG9CZUZhbHN5KCk7XG4gIGF3YWl0IHNldFRpbWVvdXQoMTAwMSk7IC8vIEp1c3QgYWJvdmUgMSBzZWMgaW4gbXNcbiAgZXhwZWN0KGF3YWl0IGNhY2hlLmhhc0V4cGlyZWQoKSkudG9CZVRydXRoeSgpO1xufSk7XG5cbnRlc3QoJ1NraXAgdmVyc2lvbiBjaGVjayBpZiBjYWNoZSBoYXMgbm90IGV4cGlyZWQnLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGNhY2hlID0gbmV3IFZlcnNpb25DaGVja1RUTCh0bXBmaWxlKCksIDEwMCk7XG4gIGF3YWl0IGNhY2hlLnVwZGF0ZSgpO1xuICBleHBlY3QoYXdhaXQgbGF0ZXN0VmVyc2lvbklmSGlnaGVyKCcwLjAuMCcsIGNhY2hlKSkudG9CZU51bGwoKTtcbn0pO1xuXG50ZXN0KCdSZXR1cm4gbGF0ZXIgdmVyc2lvbiB3aGVuIGV4aXN0cyAmIHNraXAgcmVjZW50IHJlLWNoZWNrJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBjYWNoZSA9IG5ldyBWZXJzaW9uQ2hlY2tUVEwodG1wZmlsZSgpLCAxMDApO1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBsYXRlc3RWZXJzaW9uSWZIaWdoZXIoJzAuMC4wJywgY2FjaGUpO1xuICBleHBlY3QocmVzdWx0KS5ub3QudG9CZU51bGwoKTtcbiAgZXhwZWN0KChyZXN1bHQgYXMgc3RyaW5nKS5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcblxuICBjb25zdCByZXN1bHQyID0gYXdhaXQgbGF0ZXN0VmVyc2lvbklmSGlnaGVyKCcwLjAuMCcsIGNhY2hlKTtcbiAgZXhwZWN0KHJlc3VsdDIpLnRvQmVOdWxsKCk7XG59KTtcblxudGVzdCgnUmV0dXJuIG51bGwgaWYgdmVyc2lvbiBpcyBoaWdoZXIgdGhhbiBucG0nLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGNhY2hlID0gbmV3IFZlcnNpb25DaGVja1RUTCh0bXBmaWxlKCksIDEwMCk7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGxhdGVzdFZlcnNpb25JZkhpZ2hlcignMTAwLjEwMC4xMDAnLCBjYWNoZSk7XG4gIGV4cGVjdChyZXN1bHQpLnRvQmVOdWxsKCk7XG59KTtcblxudGVzdCgnVmVyc2lvbiBzcGVjaWZpZWQgaXMgc3RvcmVkIGluIHRoZSBUVEwgZmlsZScsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgY2FjaGVGaWxlID0gdG1wZmlsZSgpO1xuICBjb25zdCBjYWNoZSA9IG5ldyBWZXJzaW9uQ2hlY2tUVEwoY2FjaGVGaWxlLCAxKTtcbiAgYXdhaXQgY2FjaGUudXBkYXRlKCcxLjEuMScpO1xuICBjb25zdCBzdG9yZWRWZXJzaW9uID0gZnMucmVhZEZpbGVTeW5jKGNhY2hlRmlsZSwgJ3V0ZjgnKTtcbiAgZXhwZWN0KHN0b3JlZFZlcnNpb24pLnRvQmUoJzEuMS4xJyk7XG59KTtcblxudGVzdCgnTm8gVmVyc2lvbiBzcGVjaWZpZWQgZm9yIHN0b3JhZ2UgaW4gdGhlIFRUTCBmaWxlJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBjYWNoZUZpbGUgPSB0bXBmaWxlKCk7XG4gIGNvbnN0IGNhY2hlID0gbmV3IFZlcnNpb25DaGVja1RUTChjYWNoZUZpbGUsIDEpO1xuICBhd2FpdCBjYWNoZS51cGRhdGUoKTtcbiAgY29uc3Qgc3RvcmVkVmVyc2lvbiA9IGZzLnJlYWRGaWxlU3luYyhjYWNoZUZpbGUsICd1dGY4Jyk7XG4gIGV4cGVjdChzdG9yZWRWZXJzaW9uKS50b0JlKCcnKTtcbn0pO1xuIl19