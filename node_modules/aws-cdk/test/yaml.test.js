"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const serialize_1 = require("../lib/serialize");
// Preferred quote of the YAML library
const q = '"';
test('quote the word "ON"', () => {
    // NON NEGOTIABLE! If not quoted, will be interpreted as the boolean TRUE
    // tslint:disable-next-line:no-console
    const output = serialize_1.toYAML({
        notABoolean: 'ON',
    });
    expect(output.trim()).toEqual(`notABoolean: ${q}ON${q}`);
});
test('quote number-like strings with a leading 0', () => {
    const output = serialize_1.toYAML({
        leadingZero: '012345',
    });
    expect(output.trim()).toEqual(`leadingZero: ${q}012345${q}`);
});
test('do not quote octal numbers that arent really octal', () => {
    // This is a contentious one, and something that might have changed in YAML1.2 vs YAML1.1
    //
    // One could make the argument that a sequence of characters that couldn't ever
    // be an octal value doesn't need to be quoted, and pyyaml parses it correctly.
    //
    // However, CloudFormation's parser interprets it as a decimal number (eating the
    // leading 0) if it's unquoted, so that's the behavior we're testing for.
    const output = serialize_1.toYAML({
        leadingZero: '0123456789',
    });
    expect(output.trim()).toEqual(`leadingZero: ${q}0123456789${q}`);
});
test('validate that our YAML correctly emits quoted colons in a list', () => {
    // Must be quoted otherwise it's not valid YAML.
    //
    // 'yaml' fails this.
    const output = serialize_1.toYAML({
        colons: ['arn', ':', 'aws'],
    });
    expect(output.trim()).toEqual([
        'colons:',
        '  - arn',
        `  - ${q}:${q}`,
        '  - aws',
    ].join('\n'));
});
test('validate emission of very long lines', () => {
    const template = {
        Field: ' very long line that starts with a space. very long line that starts with a space. start on a new line',
    };
    const output = serialize_1.toYAML(template);
    const parsed = serialize_1.fromYAML(output);
    expect(template).toEqual(parsed);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFtbC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsieWFtbC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsZ0RBQW9EO0FBRXBELHNDQUFzQztBQUN0QyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUM7QUFFZCxJQUFJLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLHlFQUF5RTtJQUV6RSxzQ0FBc0M7SUFDdEMsTUFBTSxNQUFNLEdBQUcsa0JBQU0sQ0FBQztRQUNwQixXQUFXLEVBQUUsSUFBSTtLQUNsQixDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMzRCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyw0Q0FBNEMsRUFBRSxHQUFHLEVBQUU7SUFDdEQsTUFBTSxNQUFNLEdBQUcsa0JBQU0sQ0FBQztRQUNwQixXQUFXLEVBQUUsUUFBUTtLQUN0QixDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMvRCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxvREFBb0QsRUFBRSxHQUFHLEVBQUU7SUFDOUQseUZBQXlGO0lBQ3pGLEVBQUU7SUFDRiwrRUFBK0U7SUFDL0UsK0VBQStFO0lBQy9FLEVBQUU7SUFDRixpRkFBaUY7SUFDakYseUVBQXlFO0lBRXpFLE1BQU0sTUFBTSxHQUFHLGtCQUFNLENBQUM7UUFDcEIsV0FBVyxFQUFFLFlBQVk7S0FDMUIsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbkUsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsZ0VBQWdFLEVBQUUsR0FBRyxFQUFFO0lBQzFFLGdEQUFnRDtJQUNoRCxFQUFFO0lBQ0YscUJBQXFCO0lBRXJCLE1BQU0sTUFBTSxHQUFHLGtCQUFNLENBQUM7UUFDcEIsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUM7S0FDNUIsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUM1QixTQUFTO1FBQ1QsU0FBUztRQUNULE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNmLFNBQVM7S0FDVixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHNDQUFzQyxFQUFFLEdBQUcsRUFBRTtJQUNoRCxNQUFNLFFBQVEsR0FBRztRQUNmLEtBQUssRUFBRSx3R0FBd0c7S0FDaEgsQ0FBQztJQUVGLE1BQU0sTUFBTSxHQUFHLGtCQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFaEMsTUFBTSxNQUFNLEdBQUcsb0JBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVoQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ25DLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJvbVlBTUwsIHRvWUFNTCB9IGZyb20gJy4uL2xpYi9zZXJpYWxpemUnO1xuXG4vLyBQcmVmZXJyZWQgcXVvdGUgb2YgdGhlIFlBTUwgbGlicmFyeVxuY29uc3QgcSA9ICdcIic7XG5cbnRlc3QoJ3F1b3RlIHRoZSB3b3JkIFwiT05cIicsICgpID0+IHtcbiAgLy8gTk9OIE5FR09USUFCTEUhIElmIG5vdCBxdW90ZWQsIHdpbGwgYmUgaW50ZXJwcmV0ZWQgYXMgdGhlIGJvb2xlYW4gVFJVRVxuXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gIGNvbnN0IG91dHB1dCA9IHRvWUFNTCh7XG4gICAgbm90QUJvb2xlYW46ICdPTicsXG4gIH0pO1xuXG4gIGV4cGVjdChvdXRwdXQudHJpbSgpKS50b0VxdWFsKGBub3RBQm9vbGVhbjogJHtxfU9OJHtxfWApO1xufSk7XG5cbnRlc3QoJ3F1b3RlIG51bWJlci1saWtlIHN0cmluZ3Mgd2l0aCBhIGxlYWRpbmcgMCcsICgpID0+IHtcbiAgY29uc3Qgb3V0cHV0ID0gdG9ZQU1MKHtcbiAgICBsZWFkaW5nWmVybzogJzAxMjM0NScsXG4gIH0pO1xuXG4gIGV4cGVjdChvdXRwdXQudHJpbSgpKS50b0VxdWFsKGBsZWFkaW5nWmVybzogJHtxfTAxMjM0NSR7cX1gKTtcbn0pO1xuXG50ZXN0KCdkbyBub3QgcXVvdGUgb2N0YWwgbnVtYmVycyB0aGF0IGFyZW50IHJlYWxseSBvY3RhbCcsICgpID0+IHtcbiAgLy8gVGhpcyBpcyBhIGNvbnRlbnRpb3VzIG9uZSwgYW5kIHNvbWV0aGluZyB0aGF0IG1pZ2h0IGhhdmUgY2hhbmdlZCBpbiBZQU1MMS4yIHZzIFlBTUwxLjFcbiAgLy9cbiAgLy8gT25lIGNvdWxkIG1ha2UgdGhlIGFyZ3VtZW50IHRoYXQgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIHRoYXQgY291bGRuJ3QgZXZlclxuICAvLyBiZSBhbiBvY3RhbCB2YWx1ZSBkb2Vzbid0IG5lZWQgdG8gYmUgcXVvdGVkLCBhbmQgcHl5YW1sIHBhcnNlcyBpdCBjb3JyZWN0bHkuXG4gIC8vXG4gIC8vIEhvd2V2ZXIsIENsb3VkRm9ybWF0aW9uJ3MgcGFyc2VyIGludGVycHJldHMgaXQgYXMgYSBkZWNpbWFsIG51bWJlciAoZWF0aW5nIHRoZVxuICAvLyBsZWFkaW5nIDApIGlmIGl0J3MgdW5xdW90ZWQsIHNvIHRoYXQncyB0aGUgYmVoYXZpb3Igd2UncmUgdGVzdGluZyBmb3IuXG5cbiAgY29uc3Qgb3V0cHV0ID0gdG9ZQU1MKHtcbiAgICBsZWFkaW5nWmVybzogJzAxMjM0NTY3ODknLFxuICB9KTtcblxuICBleHBlY3Qob3V0cHV0LnRyaW0oKSkudG9FcXVhbChgbGVhZGluZ1plcm86ICR7cX0wMTIzNDU2Nzg5JHtxfWApO1xufSk7XG5cbnRlc3QoJ3ZhbGlkYXRlIHRoYXQgb3VyIFlBTUwgY29ycmVjdGx5IGVtaXRzIHF1b3RlZCBjb2xvbnMgaW4gYSBsaXN0JywgKCkgPT4ge1xuICAvLyBNdXN0IGJlIHF1b3RlZCBvdGhlcndpc2UgaXQncyBub3QgdmFsaWQgWUFNTC5cbiAgLy9cbiAgLy8gJ3lhbWwnIGZhaWxzIHRoaXMuXG5cbiAgY29uc3Qgb3V0cHV0ID0gdG9ZQU1MKHtcbiAgICBjb2xvbnM6IFsnYXJuJywgJzonLCAnYXdzJ10sXG4gIH0pO1xuXG4gIGV4cGVjdChvdXRwdXQudHJpbSgpKS50b0VxdWFsKFtcbiAgICAnY29sb25zOicsXG4gICAgJyAgLSBhcm4nLFxuICAgIGAgIC0gJHtxfToke3F9YCxcbiAgICAnICAtIGF3cycsXG4gIF0uam9pbignXFxuJykpO1xufSk7XG5cbnRlc3QoJ3ZhbGlkYXRlIGVtaXNzaW9uIG9mIHZlcnkgbG9uZyBsaW5lcycsICgpID0+IHtcbiAgY29uc3QgdGVtcGxhdGUgPSB7XG4gICAgRmllbGQ6ICcgdmVyeSBsb25nIGxpbmUgdGhhdCBzdGFydHMgd2l0aCBhIHNwYWNlLiB2ZXJ5IGxvbmcgbGluZSB0aGF0IHN0YXJ0cyB3aXRoIGEgc3BhY2UuIHN0YXJ0IG9uIGEgbmV3IGxpbmUnLFxuICB9O1xuXG4gIGNvbnN0IG91dHB1dCA9IHRvWUFNTCh0ZW1wbGF0ZSk7XG5cbiAgY29uc3QgcGFyc2VkID0gZnJvbVlBTUwob3V0cHV0KTtcblxuICBleHBlY3QodGVtcGxhdGUpLnRvRXF1YWwocGFyc2VkKTtcbn0pO1xuIl19