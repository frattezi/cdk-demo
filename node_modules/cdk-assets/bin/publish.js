"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const lib_1 = require("../lib");
const logging_1 = require("./logging");
async function publish(args) {
    let manifest = lib_1.AssetManifest.fromPath(args.path);
    logging_1.log('verbose', `Loaded manifest from ${args.path}: ${manifest.entries.length} assets found`);
    if (args.assets && args.assets.length > 0) {
        const selection = args.assets.map(a => lib_1.DestinationPattern.parse(a));
        manifest = manifest.select(selection);
        logging_1.log('verbose', `Applied selection: ${manifest.entries.length} assets selected.`);
    }
    const pub = new lib_1.AssetPublishing(manifest, {
        aws: new DefaultAwsClient(args.profile),
        progressListener: new ConsoleProgress(),
        throwOnError: false,
    });
    await pub.publish();
    if (pub.hasFailures) {
        for (const failure of pub.failures) {
            // tslint:disable-next-line:no-console
            console.error('Failure:', failure.error.stack);
        }
        process.exitCode = 1;
    }
}
exports.publish = publish;
const EVENT_TO_LEVEL = {
    build: 'verbose',
    cached: 'verbose',
    check: 'verbose',
    debug: 'verbose',
    fail: 'error',
    found: 'verbose',
    start: 'info',
    success: 'info',
    upload: 'verbose',
};
class ConsoleProgress {
    onPublishEvent(type, event) {
        logging_1.log(EVENT_TO_LEVEL[type], `[${event.percentComplete}%] ${type}: ${event.message}`);
    }
}
/**
 * AWS client using the AWS SDK for JS with no special configuration
 */
class DefaultAwsClient {
    constructor(profile) {
        // Force AWS SDK to look in ~/.aws/credentials and potentially use the configured profile.
        process.env.AWS_SDK_LOAD_CONFIG = '1';
        if (profile) {
            process.env.AWS_PROFILE = profile;
        }
        // We need to set the environment before we load this library for the first time.
        // eslint-disable-next-line @typescript-eslint/no-require-imports
        this.AWS = require('aws-sdk');
    }
    async s3Client(options) {
        return new this.AWS.S3(await this.awsOptions(options));
    }
    async ecrClient(options) {
        return new this.AWS.ECR(await this.awsOptions(options));
    }
    async discoverDefaultRegion() {
        return this.AWS.config.region || 'us-east-1';
    }
    async discoverCurrentAccount() {
        if (this.account === undefined) {
            const sts = new this.AWS.STS();
            const response = await sts.getCallerIdentity().promise();
            if (!response.Account || !response.Arn) {
                logging_1.log('error', `Unrecognized reponse from STS: '${JSON.stringify(response)}'`);
                throw new Error('Unrecognized reponse from STS');
            }
            this.account = {
                accountId: response.Account,
                partition: response.Arn.split(':')[1],
            };
        }
        return this.account;
    }
    async awsOptions(options) {
        let credentials;
        if (options.assumeRoleArn) {
            credentials = await this.assumeRole(options.region, options.assumeRoleArn, options.assumeRoleExternalId);
        }
        return {
            region: options.region,
            customUserAgent: `cdk-assets/${logging_1.VERSION}`,
            credentials,
        };
    }
    /**
     * Explicit manual AssumeRole call
     *
     * Necessary since I can't seem to get the built-in support for ChainableTemporaryCredentials to work.
     *
     * It needs an explicit configuration of `masterCredentials`, we need to put
     * a `DefaultCredentialProverChain()` in there but that is not possible.
     */
    async assumeRole(region, roleArn, externalId) {
        const msg = [
            `Assume ${roleArn}`,
            ...externalId ? [`(ExternalId ${externalId})`] : [],
        ];
        logging_1.log('verbose', msg.join(' '));
        return new this.AWS.ChainableTemporaryCredentials({
            params: {
                RoleArn: roleArn,
                ExternalId: externalId,
                RoleSessionName: `cdk-assets-${os.userInfo().username}`,
            },
            stsConfig: {
                region,
                customUserAgent: `cdk-assets/${logging_1.VERSION}`,
            },
        });
    }
}
//# sourceMappingURL=data:application/json;base64,