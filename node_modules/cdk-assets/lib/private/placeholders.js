"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_assets_schema_1 = require("@aws-cdk/cdk-assets-schema");
/**
 * Replace the {ACCOUNT} and {REGION} placeholders in all strings found in a complex object.
 *
 * Duplicated between cdk-assets and aws-cdk CLI because we don't have a good single place to put it
 * (they're nominally independent tools).
 */
async function replaceAwsPlaceholders(object, aws) {
    let region;
    let account;
    return await recurse(object);
    async function recurse(value) {
        var _a, _b;
        if (typeof value === 'string') {
            if (value.indexOf(cdk_assets_schema_1.Placeholders.CURRENT_REGION) > -1) {
                await ensureRegion();
            }
            if (value.indexOf(cdk_assets_schema_1.Placeholders.CURRENT_ACCOUNT) > -1) {
                await ensureAccount();
            }
            if (value.indexOf(cdk_assets_schema_1.Placeholders.CURRENT_PARTITION) > -1) {
                await ensureAccount();
            }
            value = replaceAll(value, cdk_assets_schema_1.Placeholders.CURRENT_REGION, region !== null && region !== void 0 ? region : 'WONTHAPPEN');
            value = replaceAll(value, cdk_assets_schema_1.Placeholders.CURRENT_ACCOUNT, (_a = account === null || account === void 0 ? void 0 : account.accountId) !== null && _a !== void 0 ? _a : 'WONTHAPPEN');
            value = replaceAll(value, cdk_assets_schema_1.Placeholders.CURRENT_PARTITION, (_b = account === null || account === void 0 ? void 0 : account.partition) !== null && _b !== void 0 ? _b : 'WONTHAPPEN');
            return value;
        }
        if (typeof value !== 'object' || value === null) {
            return value;
        }
        if (Array.isArray(value)) {
            return value.map(recurse);
        }
        const ret = {};
        for (const [key, inner] of Object.entries(value)) {
            ret[key] = await recurse(inner);
        }
        return ret;
    }
    async function ensureRegion() {
        var _a;
        if (region === undefined) {
            region = (_a = object.region) !== null && _a !== void 0 ? _a : await aws.discoverDefaultRegion();
        }
    }
    async function ensureAccount() {
        if (account === undefined) {
            account = await aws.discoverCurrentAccount();
        }
    }
}
exports.replaceAwsPlaceholders = replaceAwsPlaceholders;
/**
 * A "replace-all" function that doesn't require us escaping a literal string to a regex
 */
function replaceAll(s, search, replace) {
    return s.split(search).join(replace);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhY2Vob2xkZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGxhY2Vob2xkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0VBQTBEO0FBRzFEOzs7OztHQUtHO0FBQ0ksS0FBSyxVQUFVLHNCQUFzQixDQUFnQyxNQUFTLEVBQUUsR0FBUztJQUM5RixJQUFJLE1BQTBCLENBQUM7SUFDL0IsSUFBSSxPQUE0QixDQUFDO0lBRWpDLE9BQU8sTUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFN0IsS0FBSyxVQUFVLE9BQU8sQ0FBQyxLQUFVOztRQUMvQixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM3QixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsZ0NBQVksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtnQkFBRSxNQUFNLFlBQVksRUFBRSxDQUFDO2FBQUU7WUFDOUUsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLGdDQUFZLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQUUsTUFBTSxhQUFhLEVBQUUsQ0FBQzthQUFFO1lBQ2hGLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxnQ0FBWSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQUUsTUFBTSxhQUFhLEVBQUUsQ0FBQzthQUFFO1lBRWxGLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxFQUFFLGdDQUFZLENBQUMsY0FBYyxFQUFFLE1BQU0sYUFBTixNQUFNLGNBQU4sTUFBTSxHQUFJLFlBQVksQ0FBQyxDQUFDO1lBQy9FLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxFQUFFLGdDQUFZLENBQUMsZUFBZSxRQUFFLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxTQUFTLG1DQUFJLFlBQVksQ0FBQyxDQUFDO1lBQzVGLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxFQUFFLGdDQUFZLENBQUMsaUJBQWlCLFFBQUUsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLFNBQVMsbUNBQUksWUFBWSxDQUFDLENBQUM7WUFFOUYsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7WUFBRSxPQUFPLEtBQUssQ0FBQztTQUFFO1FBQ2xFLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUFFLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUFFO1FBRXhELE1BQU0sR0FBRyxHQUF3QixFQUFFLENBQUM7UUFDcEMsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDaEQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2pDO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUQsS0FBSyxVQUFVLFlBQVk7O1FBQ3pCLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUN4QixNQUFNLFNBQUcsTUFBTSxDQUFDLE1BQU0sbUNBQUksTUFBTSxHQUFHLENBQUMscUJBQXFCLEVBQUUsQ0FBQztTQUM3RDtJQUNILENBQUM7SUFFRCxLQUFLLFVBQVUsYUFBYTtRQUMxQixJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDekIsT0FBTyxHQUFHLE1BQU0sR0FBRyxDQUFDLHNCQUFzQixFQUFFLENBQUM7U0FDOUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQztBQXhDRCx3REF3Q0M7QUFFRDs7R0FFRztBQUNILFNBQVMsVUFBVSxDQUFDLENBQVMsRUFBRSxNQUFjLEVBQUUsT0FBZTtJQUM1RCxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQbGFjZWhvbGRlcnMgfSBmcm9tICdAYXdzLWNkay9jZGstYXNzZXRzLXNjaGVtYSc7XG5pbXBvcnQgeyBBY2NvdW50LCBJQXdzIH0gZnJvbSAnLi4vYXdzJztcblxuLyoqXG4gKiBSZXBsYWNlIHRoZSB7QUNDT1VOVH0gYW5kIHtSRUdJT059IHBsYWNlaG9sZGVycyBpbiBhbGwgc3RyaW5ncyBmb3VuZCBpbiBhIGNvbXBsZXggb2JqZWN0LlxuICpcbiAqIER1cGxpY2F0ZWQgYmV0d2VlbiBjZGstYXNzZXRzIGFuZCBhd3MtY2RrIENMSSBiZWNhdXNlIHdlIGRvbid0IGhhdmUgYSBnb29kIHNpbmdsZSBwbGFjZSB0byBwdXQgaXRcbiAqICh0aGV5J3JlIG5vbWluYWxseSBpbmRlcGVuZGVudCB0b29scykuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXBsYWNlQXdzUGxhY2Vob2xkZXJzPEEgZXh0ZW5kcyB7IHJlZ2lvbj86IHN0cmluZyB9PihvYmplY3Q6IEEsIGF3czogSUF3cyk6IFByb21pc2U8QT4ge1xuICBsZXQgcmVnaW9uOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGxldCBhY2NvdW50OiBBY2NvdW50IHwgdW5kZWZpbmVkO1xuXG4gIHJldHVybiBhd2FpdCByZWN1cnNlKG9iamVjdCk7XG5cbiAgYXN5bmMgZnVuY3Rpb24gcmVjdXJzZSh2YWx1ZTogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHZhbHVlLmluZGV4T2YoUGxhY2Vob2xkZXJzLkNVUlJFTlRfUkVHSU9OKSA+IC0xKSB7IGF3YWl0IGVuc3VyZVJlZ2lvbigpOyB9XG4gICAgICBpZiAodmFsdWUuaW5kZXhPZihQbGFjZWhvbGRlcnMuQ1VSUkVOVF9BQ0NPVU5UKSA+IC0xKSB7IGF3YWl0IGVuc3VyZUFjY291bnQoKTsgfVxuICAgICAgaWYgKHZhbHVlLmluZGV4T2YoUGxhY2Vob2xkZXJzLkNVUlJFTlRfUEFSVElUSU9OKSA+IC0xKSB7IGF3YWl0IGVuc3VyZUFjY291bnQoKTsgfVxuXG4gICAgICB2YWx1ZSA9IHJlcGxhY2VBbGwodmFsdWUsIFBsYWNlaG9sZGVycy5DVVJSRU5UX1JFR0lPTiwgcmVnaW9uID8/ICdXT05USEFQUEVOJyk7XG4gICAgICB2YWx1ZSA9IHJlcGxhY2VBbGwodmFsdWUsIFBsYWNlaG9sZGVycy5DVVJSRU5UX0FDQ09VTlQsIGFjY291bnQ/LmFjY291bnRJZCA/PyAnV09OVEhBUFBFTicpO1xuICAgICAgdmFsdWUgPSByZXBsYWNlQWxsKHZhbHVlLCBQbGFjZWhvbGRlcnMuQ1VSUkVOVF9QQVJUSVRJT04sIGFjY291bnQ/LnBhcnRpdGlvbiA/PyAnV09OVEhBUFBFTicpO1xuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwpIHsgcmV0dXJuIHZhbHVlOyB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7IHJldHVybiB2YWx1ZS5tYXAocmVjdXJzZSk7IH1cblxuICAgIGNvbnN0IHJldDogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xuICAgIGZvciAoY29uc3QgW2tleSwgaW5uZXJdIG9mIE9iamVjdC5lbnRyaWVzKHZhbHVlKSkge1xuICAgICAgcmV0W2tleV0gPSBhd2FpdCByZWN1cnNlKGlubmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGVuc3VyZVJlZ2lvbigpIHtcbiAgICBpZiAocmVnaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlZ2lvbiA9IG9iamVjdC5yZWdpb24gPz8gYXdhaXQgYXdzLmRpc2NvdmVyRGVmYXVsdFJlZ2lvbigpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGVuc3VyZUFjY291bnQoKSB7XG4gICAgaWYgKGFjY291bnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYWNjb3VudCA9IGF3YWl0IGF3cy5kaXNjb3ZlckN1cnJlbnRBY2NvdW50KCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQSBcInJlcGxhY2UtYWxsXCIgZnVuY3Rpb24gdGhhdCBkb2Vzbid0IHJlcXVpcmUgdXMgZXNjYXBpbmcgYSBsaXRlcmFsIHN0cmluZyB0byBhIHJlZ2V4XG4gKi9cbmZ1bmN0aW9uIHJlcGxhY2VBbGwoczogc3RyaW5nLCBzZWFyY2g6IHN0cmluZywgcmVwbGFjZTogc3RyaW5nKSB7XG4gIHJldHVybiBzLnNwbGl0KHNlYXJjaCkuam9pbihyZXBsYWNlKTtcbn0iXX0=