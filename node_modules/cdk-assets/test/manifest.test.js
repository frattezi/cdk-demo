"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_assets_schema_1 = require("@aws-cdk/cdk-assets-schema");
const mockfs = require("mock-fs");
const lib_1 = require("../lib");
beforeEach(() => {
    mockfs({
        '/simple/cdk.out/assets.json': JSON.stringify({
            version: cdk_assets_schema_1.AssetManifestSchema.currentVersion(),
            files: {
                asset1: {
                    type: 'file',
                    source: { path: 'S1' },
                    destinations: {
                        dest1: { bucketName: 'D1', objectKey: 'X' },
                        dest2: { bucketName: 'D2', objectKey: 'X' },
                    },
                },
            },
            dockerImages: {
                asset2: {
                    type: 'thing',
                    source: { directory: 'S2' },
                    destinations: {
                        dest1: { repositoryName: 'D3', imageTag: 'X' },
                        dest2: { repositoryName: 'D4', imageTag: 'X' },
                    },
                },
            },
        }),
    });
});
afterEach(() => {
    mockfs.restore();
});
test('Can list manifest', () => {
    const manifest = lib_1.AssetManifest.fromPath('/simple/cdk.out');
    expect(manifest.list().join('\n')).toEqual(`
asset1 file {\"path\":\"S1\"}
  ├ asset1:dest1 {\"bucketName\":\"D1\",\"objectKey\":\"X\"}
  └ asset1:dest2 {\"bucketName\":\"D2\",\"objectKey\":\"X\"}
asset2 docker-image {\"directory\":\"S2\"}
  ├ asset2:dest1 {\"repositoryName\":\"D3\",\"imageTag\":\"X\"}
  └ asset2:dest2 {\"repositoryName\":\"D4\",\"imageTag\":\"X\"}
`.trim());
});
test('.entries() iterates over all destinations', () => {
    const manifest = lib_1.AssetManifest.fromPath('/simple/cdk.out');
    expect(manifest.entries).toEqual([
        new lib_1.FileManifestEntry(new lib_1.DestinationIdentifier('asset1', 'dest1'), { path: 'S1' }, { bucketName: 'D1', objectKey: 'X' }),
        new lib_1.FileManifestEntry(new lib_1.DestinationIdentifier('asset1', 'dest2'), { path: 'S1' }, { bucketName: 'D2', objectKey: 'X' }),
        new lib_1.DockerImageManifestEntry(new lib_1.DestinationIdentifier('asset2', 'dest1'), { directory: 'S2' }, { repositoryName: 'D3', imageTag: 'X' }),
        new lib_1.DockerImageManifestEntry(new lib_1.DestinationIdentifier('asset2', 'dest2'), { directory: 'S2' }, { repositoryName: 'D4', imageTag: 'X' }),
    ]);
});
test('can select by asset ID', () => {
    const manifest = lib_1.AssetManifest.fromPath('/simple/cdk.out');
    const subset = manifest.select([lib_1.DestinationPattern.parse('asset2')]);
    expect(subset.entries.map(e => f(e.genericDestination, 'repositoryName'))).toEqual(['D3', 'D4']);
});
test('can select by asset ID + destination ID', () => {
    const manifest = lib_1.AssetManifest.fromPath('/simple/cdk.out');
    const subset = manifest.select([
        lib_1.DestinationPattern.parse('asset1:dest1'),
        lib_1.DestinationPattern.parse('asset2:dest2'),
    ]);
    expect(subset.entries.map(e => f(e.genericDestination, 'repositoryName', 'bucketName'))).toEqual(['D1', 'D4']);
});
test('can select by destination ID', () => {
    const manifest = lib_1.AssetManifest.fromPath('/simple/cdk.out');
    const subset = manifest.select([
        lib_1.DestinationPattern.parse(':dest1'),
    ]);
    expect(subset.entries.map(e => f(e.genericDestination, 'repositoryName', 'bucketName'))).toEqual(['D1', 'D3']);
});
test('empty string is not a valid pattern', () => {
    expect(() => {
        lib_1.DestinationPattern.parse('');
    }).toThrow(/Empty string is not a valid destination identifier/);
});
test('pattern must have two components', () => {
    expect(() => {
        lib_1.DestinationPattern.parse('a:b:c');
    }).toThrow(/Asset identifier must contain at most 2/);
});
test('parse ASSET:* the same as ASSET and ASSET:', () => {
    expect(lib_1.DestinationPattern.parse('a:*')).toEqual(lib_1.DestinationPattern.parse('a'));
    expect(lib_1.DestinationPattern.parse('a:*')).toEqual(lib_1.DestinationPattern.parse('a:'));
});
test('parse *:DEST the same as :DEST', () => {
    expect(lib_1.DestinationPattern.parse('*:a')).toEqual(lib_1.DestinationPattern.parse(':a'));
});
function f(obj, ...keys) {
    for (const k of keys) {
        if (typeof obj === 'object' && obj !== null && k in obj) {
            return obj[k];
        }
    }
    return undefined;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuaWZlc3QudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1hbmlmZXN0LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrRUFBaUU7QUFDakUsa0NBQWtDO0FBQ2xDLGdDQUErSDtBQUUvSCxVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsTUFBTSxDQUFDO1FBQ0wsNkJBQTZCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUM1QyxPQUFPLEVBQUUsdUNBQW1CLENBQUMsY0FBYyxFQUFFO1lBQzdDLEtBQUssRUFBRTtnQkFDTCxNQUFNLEVBQUU7b0JBQ04sSUFBSSxFQUFFLE1BQU07b0JBQ1osTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtvQkFDdEIsWUFBWSxFQUFFO3dCQUNaLEtBQUssRUFBRSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRTt3QkFDM0MsS0FBSyxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFO3FCQUM1QztpQkFDRjthQUNGO1lBQ0QsWUFBWSxFQUFFO2dCQUNaLE1BQU0sRUFBRTtvQkFDTixJQUFJLEVBQUUsT0FBTztvQkFDYixNQUFNLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFO29CQUMzQixZQUFZLEVBQUU7d0JBQ1osS0FBSyxFQUFFLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFO3dCQUM5QyxLQUFLLEVBQUUsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUU7cUJBQy9DO2lCQUNGO2FBQ0Y7U0FDRixDQUFDO0tBQ0gsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO0lBQ2IsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ25CLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxD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QWtCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLHdCQUFrQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2xGLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsRUFBRTtJQUMxQyxNQUFNLENBQUMsd0JBQWtCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLHdCQUFrQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2xGLENBQUMsQ0FBQyxDQUFDO0FBRUgsU0FBUyxDQUFDLENBQUMsR0FBWSxFQUFFLEdBQUcsSUFBYztJQUN4QyxLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksRUFBRTtRQUNwQixJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxHQUFHLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUU7WUFDdkQsT0FBUSxHQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDeEI7S0FDRjtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3NldE1hbmlmZXN0U2NoZW1hIH0gZnJvbSAnQGF3cy1jZGsvY2RrLWFzc2V0cy1zY2hlbWEnO1xuaW1wb3J0ICogYXMgbW9ja2ZzIGZyb20gJ21vY2stZnMnO1xuaW1wb3J0IHsgQXNzZXRNYW5pZmVzdCwgRGVzdGluYXRpb25JZGVudGlmaWVyLCBEZXN0aW5hdGlvblBhdHRlcm4sIERvY2tlckltYWdlTWFuaWZlc3RFbnRyeSwgRmlsZU1hbmlmZXN0RW50cnkgfSBmcm9tICcuLi9saWInO1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgbW9ja2ZzKHtcbiAgICAnL3NpbXBsZS9jZGsub3V0L2Fzc2V0cy5qc29uJzogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgdmVyc2lvbjogQXNzZXRNYW5pZmVzdFNjaGVtYS5jdXJyZW50VmVyc2lvbigpLFxuICAgICAgZmlsZXM6IHtcbiAgICAgICAgYXNzZXQxOiB7XG4gICAgICAgICAgdHlwZTogJ2ZpbGUnLFxuICAgICAgICAgIHNvdXJjZTogeyBwYXRoOiAnUzEnIH0sXG4gICAgICAgICAgZGVzdGluYXRpb25zOiB7XG4gICAgICAgICAgICBkZXN0MTogeyBidWNrZXROYW1lOiAnRDEnLCBvYmplY3RLZXk6ICdYJyB9LFxuICAgICAgICAgICAgZGVzdDI6IHsgYnVja2V0TmFtZTogJ0QyJywgb2JqZWN0S2V5OiAnWCcgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGRvY2tlckltYWdlczoge1xuICAgICAgICBhc3NldDI6IHtcbiAgICAgICAgICB0eXBlOiAndGhpbmcnLFxuICAgICAgICAgIHNvdXJjZTogeyBkaXJlY3Rvcnk6ICdTMicgfSxcbiAgICAgICAgICBkZXN0aW5hdGlvbnM6IHtcbiAgICAgICAgICAgIGRlc3QxOiB7IHJlcG9zaXRvcnlOYW1lOiAnRDMnLCBpbWFnZVRhZzogJ1gnIH0sXG4gICAgICAgICAgICBkZXN0MjogeyByZXBvc2l0b3J5TmFtZTogJ0Q0JywgaW1hZ2VUYWc6ICdYJyB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pLFxuICB9KTtcbn0pO1xuXG5hZnRlckVhY2goKCkgPT4ge1xuICBtb2NrZnMucmVzdG9yZSgpO1xufSk7XG5cbnRlc3QoJ0NhbiBsaXN0IG1hbmlmZXN0JywgKCkgPT4ge1xuICBjb25zdCBtYW5pZmVzdCA9IEFzc2V0TWFuaWZlc3QuZnJvbVBhdGgoJy9zaW1wbGUvY2RrLm91dCcpO1xuICBleHBlY3QobWFuaWZlc3QubGlzdCgpLmpvaW4oJ1xcbicpKS50b0VxdWFsKGBcbmFzc2V0MSBmaWxlIHtcXFwicGF0aFxcXCI6XFxcIlMxXFxcIn1cbiAg4pScIGFzc2V0MTpkZXN0MSB7XFxcImJ1Y2tldE5hbWVcXFwiOlxcXCJEMVxcXCIsXFxcIm9iamVjdEtleVxcXCI6XFxcIlhcXFwifVxuICDilJQgYXNzZXQxOmRlc3QyIHtcXFwiYnVja2V0TmFtZVxcXCI6XFxcIkQyXFxcIixcXFwib2JqZWN0S2V5XFxcIjpcXFwiWFxcXCJ9XG5hc3NldDIgZG9ja2VyLWltYWdlIHtcXFwiZGlyZWN0b3J5XFxcIjpcXFwiUzJcXFwifVxuICDilJwgYXNzZXQyOmRlc3QxIHtcXFwicmVwb3NpdG9yeU5hbWVcXFwiOlxcXCJEM1xcXCIsXFxcImltYWdlVGFnXFxcIjpcXFwiWFxcXCJ9XG4gIOKUlCBhc3NldDI6ZGVzdDIge1xcXCJyZXBvc2l0b3J5TmFtZVxcXCI6XFxcIkQ0XFxcIixcXFwiaW1hZ2VUYWdcXFwiOlxcXCJYXFxcIn1cbmAudHJpbSgpKTtcbn0pO1xuXG50ZXN0KCcuZW50cmllcygpIGl0ZXJhdGVzIG92ZXIgYWxsIGRlc3RpbmF0aW9ucycsICgpID0+IHtcbiAgY29uc3QgbWFuaWZlc3QgPSBBc3NldE1hbmlmZXN0LmZyb21QYXRoKCcvc2ltcGxlL2Nkay5vdXQnKTtcblxuICBleHBlY3QobWFuaWZlc3QuZW50cmllcykudG9FcXVhbChbXG4gICAgbmV3IEZpbGVNYW5pZmVzdEVudHJ5KG5ldyBEZXN0aW5hdGlvbklkZW50aWZpZXIoJ2Fzc2V0MScsICdkZXN0MScpLCB7IHBhdGg6ICdTMScgfSwgeyBidWNrZXROYW1lOiAnRDEnLCBvYmplY3RLZXk6ICdYJyB9KSxcbiAgICBuZXcgRmlsZU1hbmlmZXN0RW50cnkobmV3IERlc3RpbmF0aW9uSWRlbnRpZmllcignYXNzZXQxJywgJ2Rlc3QyJyksIHsgcGF0aDogJ1MxJyB9LCB7IGJ1Y2tldE5hbWU6ICdEMicsIG9iamVjdEtleTogJ1gnIH0pLFxuICAgIG5ldyBEb2NrZXJJbWFnZU1hbmlmZXN0RW50cnkobmV3IERlc3RpbmF0aW9uSWRlbnRpZmllcignYXNzZXQyJywgJ2Rlc3QxJyksIHsgZGlyZWN0b3J5OiAnUzInIH0sIHsgcmVwb3NpdG9yeU5hbWU6ICdEMycsIGltYWdlVGFnOiAnWCcgfSksXG4gICAgbmV3IERvY2tlckltYWdlTWFuaWZlc3RFbnRyeShuZXcgRGVzdGluYXRpb25JZGVudGlmaWVyKCdhc3NldDInLCAnZGVzdDInKSwgeyBkaXJlY3Rvcnk6ICdTMicgfSwgeyByZXBvc2l0b3J5TmFtZTogJ0Q0JywgaW1hZ2VUYWc6ICdYJyB9KSxcbiAgXSk7XG59KTtcblxudGVzdCgnY2FuIHNlbGVjdCBieSBhc3NldCBJRCcsICgpID0+IHtcbiAgY29uc3QgbWFuaWZlc3QgPSBBc3NldE1hbmlmZXN0LmZyb21QYXRoKCcvc2ltcGxlL2Nkay5vdXQnKTtcblxuICBjb25zdCBzdWJzZXQgPSBtYW5pZmVzdC5zZWxlY3QoW0Rlc3RpbmF0aW9uUGF0dGVybi5wYXJzZSgnYXNzZXQyJyldKTtcblxuICBleHBlY3Qoc3Vic2V0LmVudHJpZXMubWFwKGUgPT4gZihlLmdlbmVyaWNEZXN0aW5hdGlvbiwgJ3JlcG9zaXRvcnlOYW1lJykpKS50b0VxdWFsKFsnRDMnLCAnRDQnXSk7XG59KTtcblxudGVzdCgnY2FuIHNlbGVjdCBieSBhc3NldCBJRCArIGRlc3RpbmF0aW9uIElEJywgKCkgPT4ge1xuICBjb25zdCBtYW5pZmVzdCA9IEFzc2V0TWFuaWZlc3QuZnJvbVBhdGgoJy9zaW1wbGUvY2RrLm91dCcpO1xuXG4gIGNvbnN0IHN1YnNldCA9IG1hbmlmZXN0LnNlbGVjdChbXG4gICAgRGVzdGluYXRpb25QYXR0ZXJuLnBhcnNlKCdhc3NldDE6ZGVzdDEnKSxcbiAgICBEZXN0aW5hdGlvblBhdHRlcm4ucGFyc2UoJ2Fzc2V0MjpkZXN0MicpLFxuICBdKTtcblxuICBleHBlY3Qoc3Vic2V0LmVudHJpZXMubWFwKGUgPT4gZihlLmdlbmVyaWNEZXN0aW5hdGlvbiwgJ3JlcG9zaXRvcnlOYW1lJywgJ2J1Y2tldE5hbWUnKSkpLnRvRXF1YWwoWydEMScsICdENCddKTtcbn0pO1xuXG50ZXN0KCdjYW4gc2VsZWN0IGJ5IGRlc3RpbmF0aW9uIElEJywgKCkgPT4ge1xuICBjb25zdCBtYW5pZmVzdCA9IEFzc2V0TWFuaWZlc3QuZnJvbVBhdGgoJy9zaW1wbGUvY2RrLm91dCcpO1xuXG4gIGNvbnN0IHN1YnNldCA9IG1hbmlmZXN0LnNlbGVjdChbXG4gICAgRGVzdGluYXRpb25QYXR0ZXJuLnBhcnNlKCc6ZGVzdDEnKSxcbiAgXSk7XG5cbiAgZXhwZWN0KHN1YnNldC5lbnRyaWVzLm1hcChlID0+IGYoZS5nZW5lcmljRGVzdGluYXRpb24sICdyZXBvc2l0b3J5TmFtZScsICdidWNrZXROYW1lJykpKS50b0VxdWFsKFsnRDEnLCAnRDMnXSk7XG59KTtcblxudGVzdCgnZW1wdHkgc3RyaW5nIGlzIG5vdCBhIHZhbGlkIHBhdHRlcm4nLCAoKSA9PiB7XG4gIGV4cGVjdCgoKSA9PiB7XG4gICAgRGVzdGluYXRpb25QYXR0ZXJuLnBhcnNlKCcnKTtcbiAgfSkudG9UaHJvdygvRW1wdHkgc3RyaW5nIGlzIG5vdCBhIHZhbGlkIGRlc3RpbmF0aW9uIGlkZW50aWZpZXIvKTtcbn0pO1xuXG50ZXN0KCdwYXR0ZXJuIG11c3QgaGF2ZSB0d28gY29tcG9uZW50cycsICgpID0+IHtcbiAgZXhwZWN0KCgpID0+IHtcbiAgICBEZXN0aW5hdGlvblBhdHRlcm4ucGFyc2UoJ2E6YjpjJyk7XG4gIH0pLnRvVGhyb3coL0Fzc2V0IGlkZW50aWZpZXIgbXVzdCBjb250YWluIGF0IG1vc3QgMi8pO1xufSk7XG5cbnRlc3QoJ3BhcnNlIEFTU0VUOiogdGhlIHNhbWUgYXMgQVNTRVQgYW5kIEFTU0VUOicsICgpID0+IHtcbiAgZXhwZWN0KERlc3RpbmF0aW9uUGF0dGVybi5wYXJzZSgnYToqJykpLnRvRXF1YWwoRGVzdGluYXRpb25QYXR0ZXJuLnBhcnNlKCdhJykpO1xuICBleHBlY3QoRGVzdGluYXRpb25QYXR0ZXJuLnBhcnNlKCdhOionKSkudG9FcXVhbChEZXN0aW5hdGlvblBhdHRlcm4ucGFyc2UoJ2E6JykpO1xufSk7XG5cbnRlc3QoJ3BhcnNlICo6REVTVCB0aGUgc2FtZSBhcyA6REVTVCcsICgpID0+IHtcbiAgZXhwZWN0KERlc3RpbmF0aW9uUGF0dGVybi5wYXJzZSgnKjphJykpLnRvRXF1YWwoRGVzdGluYXRpb25QYXR0ZXJuLnBhcnNlKCc6YScpKTtcbn0pO1xuXG5mdW5jdGlvbiBmKG9iajogdW5rbm93biwgLi4ua2V5czogc3RyaW5nW10pOiBhbnkge1xuICBmb3IgKGNvbnN0IGsgb2Yga2V5cykge1xuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwgJiYgayBpbiBvYmopIHtcbiAgICAgIHJldHVybiAob2JqIGFzIGFueSlba107XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG4iXX0=