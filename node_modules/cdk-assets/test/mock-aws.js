"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('aws-sdk');
const AWS = require("aws-sdk");
function mockAws() {
    const mockEcr = new AWS.ECR();
    const mockS3 = new AWS.S3();
    // Sane defaults which can be overridden
    mockS3.getBucketLocation = mockedApiResult({});
    mockEcr.describeRepositories = mockedApiResult({ repositories: [
            {
                repositoryUri: '12345.amazonaws.com/repo',
            },
        ] });
    return {
        mockEcr,
        mockS3,
        discoverCurrentAccount: jest.fn(() => Promise.resolve({ accountId: 'current_account', partition: 'swa' })),
        discoverDefaultRegion: jest.fn(() => Promise.resolve('current_region')),
        ecrClient: jest.fn().mockReturnValue(Promise.resolve(mockEcr)),
        s3Client: jest.fn().mockReturnValue(Promise.resolve(mockS3)),
    };
}
exports.mockAws = mockAws;
function errorWithCode(code, message) {
    const ret = new Error(message);
    ret.code = code;
    return ret;
}
exports.errorWithCode = errorWithCode;
function mockedApiResult(returnValue) {
    return jest.fn().mockReturnValue({
        promise: jest.fn().mockResolvedValue(returnValue),
    });
}
exports.mockedApiResult = mockedApiResult;
function mockedApiFailure(code, message) {
    return jest.fn().mockReturnValue({
        promise: jest.fn().mockRejectedValue(errorWithCode(code, message)),
    });
}
exports.mockedApiFailure = mockedApiFailure;
/**
 * Mock upload, draining the stream that we get before returning
 * so no race conditions happen with the uninstallation of mock-fs.
 */
function mockUpload(expectContent) {
    return jest.fn().mockImplementation(request => ({
        promise: () => new Promise((ok, ko) => {
            const didRead = new Array();
            const bodyStream = request.Body;
            bodyStream.on('data', (chunk) => { didRead.push(chunk.toString()); }); // This listener must exist
            bodyStream.on('error', ko);
            bodyStream.on('close', () => {
                const actualContent = didRead.join('');
                if (expectContent !== undefined && expectContent !== actualContent) {
                    throw new Error(`Expected to read '${expectContent}' but read: '${actualContent}'`);
                }
                ok();
            });
        }),
    }));
}
exports.mockUpload = mockUpload;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1hd3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtb2NrLWF3cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDckIsK0JBQStCO0FBRS9CLFNBQWdCLE9BQU87SUFDckIsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDOUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUM7SUFFNUIsd0NBQXdDO0lBQ3hDLE1BQU0sQ0FBQyxpQkFBaUIsR0FBRyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDL0MsT0FBTyxDQUFDLG9CQUFvQixHQUFHLGVBQWUsQ0FBQyxFQUFFLFlBQVksRUFBRTtZQUM3RDtnQkFDRSxhQUFhLEVBQUUsMEJBQTBCO2FBQzFDO1NBQ0YsRUFBRSxDQUFDLENBQUM7SUFFTCxPQUFPO1FBQ0wsT0FBTztRQUNQLE1BQU07UUFDTixzQkFBc0IsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDMUcscUJBQXFCLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDdkUsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5RCxRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzdELENBQUM7QUFDSixDQUFDO0FBcEJELDBCQW9CQztBQUVELFNBQWdCLGFBQWEsQ0FBQyxJQUFZLEVBQUUsT0FBZTtJQUN6RCxNQUFNLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QixHQUFXLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUN6QixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFKRCxzQ0FJQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxXQUFnQjtJQUM5QyxPQUFPLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUM7UUFDL0IsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUM7S0FDbEQsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUpELDBDQUlDO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQUMsSUFBWSxFQUFFLE9BQWU7SUFDNUQsT0FBTyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDO1FBQy9CLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNuRSxDQUFDLENBQUM7QUFDTCxDQUFDO0FBSkQsNENBSUM7QUFFRDs7O0dBR0c7QUFDSCxTQUFnQixVQUFVLENBQUMsYUFBc0I7SUFDL0MsT0FBTyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzlDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtZQUNwQyxNQUFNLE9BQU8sR0FBRyxJQUFJLEtBQUssRUFBVSxDQUFDO1lBRXBDLE1BQU0sVUFBVSxHQUEwQixPQUFPLENBQUMsSUFBSSxDQUFDO1lBQ3ZELFVBQVUsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQywyQkFBMkI7WUFDbEcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDM0IsVUFBVSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO2dCQUMxQixNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUN2QyxJQUFJLGFBQWEsS0FBSyxTQUFTLElBQUksYUFBYSxLQUFLLGFBQWEsRUFBRTtvQkFDbEUsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsYUFBYSxnQkFBZ0IsYUFBYSxHQUFHLENBQUMsQ0FBQztpQkFDckY7Z0JBQ0QsRUFBRSxFQUFFLENBQUM7WUFDUCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQztLQUNILENBQUMsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQWpCRCxnQ0FpQkMiLCJzb3VyY2VzQ29udGVudCI6WyJqZXN0Lm1vY2soJ2F3cy1zZGsnKTtcbmltcG9ydCAqIGFzIEFXUyBmcm9tICdhd3Mtc2RrJztcblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tBd3MoKSB7XG4gIGNvbnN0IG1vY2tFY3IgPSBuZXcgQVdTLkVDUigpO1xuICBjb25zdCBtb2NrUzMgPSBuZXcgQVdTLlMzKCk7XG5cbiAgLy8gU2FuZSBkZWZhdWx0cyB3aGljaCBjYW4gYmUgb3ZlcnJpZGRlblxuICBtb2NrUzMuZ2V0QnVja2V0TG9jYXRpb24gPSBtb2NrZWRBcGlSZXN1bHQoe30pO1xuICBtb2NrRWNyLmRlc2NyaWJlUmVwb3NpdG9yaWVzID0gbW9ja2VkQXBpUmVzdWx0KHsgcmVwb3NpdG9yaWVzOiBbXG4gICAge1xuICAgICAgcmVwb3NpdG9yeVVyaTogJzEyMzQ1LmFtYXpvbmF3cy5jb20vcmVwbycsXG4gICAgfSxcbiAgXSB9KTtcblxuICByZXR1cm4ge1xuICAgIG1vY2tFY3IsXG4gICAgbW9ja1MzLFxuICAgIGRpc2NvdmVyQ3VycmVudEFjY291bnQ6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHsgYWNjb3VudElkOiAnY3VycmVudF9hY2NvdW50JywgcGFydGl0aW9uOiAnc3dhJyB9KSksXG4gICAgZGlzY292ZXJEZWZhdWx0UmVnaW9uOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgnY3VycmVudF9yZWdpb24nKSksXG4gICAgZWNyQ2xpZW50OiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKFByb21pc2UucmVzb2x2ZShtb2NrRWNyKSksXG4gICAgczNDbGllbnQ6IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoUHJvbWlzZS5yZXNvbHZlKG1vY2tTMykpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXJyb3JXaXRoQ29kZShjb2RlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZykge1xuICBjb25zdCByZXQgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIChyZXQgYXMgYW55KS5jb2RlID0gY29kZTtcbiAgcmV0dXJuIHJldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tlZEFwaVJlc3VsdChyZXR1cm5WYWx1ZTogYW55KSB7XG4gIHJldHVybiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcbiAgICBwcm9taXNlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUocmV0dXJuVmFsdWUpLFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tlZEFwaUZhaWx1cmUoY29kZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgIHByb21pc2U6IGplc3QuZm4oKS5tb2NrUmVqZWN0ZWRWYWx1ZShlcnJvcldpdGhDb2RlKGNvZGUsIG1lc3NhZ2UpKSxcbiAgfSk7XG59XG5cbi8qKlxuICogTW9jayB1cGxvYWQsIGRyYWluaW5nIHRoZSBzdHJlYW0gdGhhdCB3ZSBnZXQgYmVmb3JlIHJldHVybmluZ1xuICogc28gbm8gcmFjZSBjb25kaXRpb25zIGhhcHBlbiB3aXRoIHRoZSB1bmluc3RhbGxhdGlvbiBvZiBtb2NrLWZzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbW9ja1VwbG9hZChleHBlY3RDb250ZW50Pzogc3RyaW5nKSB7XG4gIHJldHVybiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKHJlcXVlc3QgPT4gKHtcbiAgICBwcm9taXNlOiAoKSA9PiBuZXcgUHJvbWlzZSgob2ssIGtvKSA9PiB7XG4gICAgICBjb25zdCBkaWRSZWFkID0gbmV3IEFycmF5PHN0cmluZz4oKTtcblxuICAgICAgY29uc3QgYm9keVN0cmVhbTogTm9kZUpTLlJlYWRhYmxlU3RyZWFtID0gcmVxdWVzdC5Cb2R5O1xuICAgICAgYm9keVN0cmVhbS5vbignZGF0YScsIChjaHVuaykgPT4geyBkaWRSZWFkLnB1c2goY2h1bmsudG9TdHJpbmcoKSk7IH0pOyAvLyBUaGlzIGxpc3RlbmVyIG11c3QgZXhpc3RcbiAgICAgIGJvZHlTdHJlYW0ub24oJ2Vycm9yJywga28pO1xuICAgICAgYm9keVN0cmVhbS5vbignY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGFjdHVhbENvbnRlbnQgPSBkaWRSZWFkLmpvaW4oJycpO1xuICAgICAgICBpZiAoZXhwZWN0Q29udGVudCAhPT0gdW5kZWZpbmVkICYmIGV4cGVjdENvbnRlbnQgIT09IGFjdHVhbENvbnRlbnQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIHRvIHJlYWQgJyR7ZXhwZWN0Q29udGVudH0nIGJ1dCByZWFkOiAnJHthY3R1YWxDb250ZW50fSdgKTtcbiAgICAgICAgfVxuICAgICAgICBvaygpO1xuICAgICAgfSk7XG4gICAgfSksXG4gIH0pKTtcbn0iXX0=