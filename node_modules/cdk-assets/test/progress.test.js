"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_assets_schema_1 = require("@aws-cdk/cdk-assets-schema");
const mockfs = require("mock-fs");
const lib_1 = require("../lib");
const mock_aws_1 = require("./mock-aws");
let aws;
beforeEach(() => {
    mockfs({
        '/simple/cdk.out/assets.json': JSON.stringify({
            version: cdk_assets_schema_1.AssetManifestSchema.currentVersion(),
            files: {
                theAsset: {
                    source: {
                        path: 'some_file',
                    },
                    destinations: {
                        theDestination1: {
                            region: 'us-north-50',
                            assumeRoleArn: 'arn:aws:role',
                            bucketName: 'some_bucket',
                            objectKey: 'some_key',
                        },
                        theDestination2: {
                            region: 'us-north-50',
                            assumeRoleArn: 'arn:aws:role',
                            bucketName: 'some_bucket',
                            objectKey: 'some_key2',
                        },
                    },
                },
            },
        }),
        '/simple/cdk.out/some_file': 'FILE_CONTENTS',
    });
    aws = mock_aws_1.mockAws();
    // Accept all S3 uploads as new
    aws.mockS3.getBucketLocation = mock_aws_1.mockedApiResult({});
    aws.mockS3.listObjectsV2 = mock_aws_1.mockedApiResult({ Contents: undefined });
    aws.mockS3.upload = mock_aws_1.mockUpload();
});
afterEach(() => {
    mockfs.restore();
});
test('test listener', async () => {
    const progressListener = new FakeListener();
    const pub = new lib_1.AssetPublishing(lib_1.AssetManifest.fromPath('/simple/cdk.out'), { aws, progressListener });
    await pub.publish();
    const allMessages = progressListener.messages.join('\n');
    // Log mentions asset/destination ids
    expect(allMessages).toContain('theAsset:theDestination1');
    expect(allMessages).toContain('theAsset:theDestination2');
});
test('test abort', async () => {
    const progressListener = new FakeListener(true);
    const pub = new lib_1.AssetPublishing(lib_1.AssetManifest.fromPath('/simple/cdk.out'), { aws, progressListener });
    await pub.publish();
    const allMessages = progressListener.messages.join('\n');
    // We never get to asset 2
    expect(allMessages).not.toContain('theAsset:theDestination2');
});
class FakeListener {
    constructor(doAbort = false) {
        this.doAbort = doAbort;
        this.messages = new Array();
    }
    onPublishEvent(_type, event) {
        this.messages.push(event.message);
        if (this.doAbort) {
            event.abort();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInByb2dyZXNzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrRUFBaUU7QUFDakUsa0NBQWtDO0FBQ2xDLGdDQUErRztBQUMvRyx5Q0FBa0U7QUFFbEUsSUFBSSxHQUErQixDQUFDO0FBQ3BDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7SUFDZCxNQUFNLENBQUM7UUFDTCw2QkFBNkIsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQzVDLE9BQU8sRUFBRSx1Q0FBbUIsQ0FBQyxjQUFjLEVBQUU7WUFDN0MsS0FBSyxFQUFFO2dCQUNMLFFBQVEsRUFBRTtvQkFDUixNQUFNLEVBQUU7d0JBQ04sSUFBSSxFQUFFLFdBQVc7cUJBQ2xCO29CQUNELFlBQVksRUFBRTt3QkFDWixlQUFlLEVBQUU7NEJBQ2YsTUFBTSxFQUFFLGFBQWE7NEJBQ3JCLGFBQWEsRUFBRSxjQUFjOzRCQUM3QixVQUFVLEVBQUUsYUFBYTs0QkFDekIsU0FBUyxFQUFFLFVBQVU7eUJBQ3RCO3dCQUNELGVBQWUsRUFBRTs0QkFDZixNQUFNLEVBQUUsYUFBYTs0QkFDckIsYUFBYSxFQUFFLGNBQWM7NEJBQzdCLFVBQVUsRUFBRSxhQUFhOzRCQUN6QixTQUFTLEVBQUUsV0FBVzt5QkFDdkI7cUJBQ0Y7aUJBQ0Y7YUFDRjtTQUNGLENBQUM7UUFDRiwyQkFBMkIsRUFBRSxlQUFlO0tBQzdDLENBQUMsQ0FBQztJQUVILEdBQUcsR0FBRyxrQkFBTyxFQUFFLENBQUM7SUFFaEIsK0JBQStCO0lBQy9CLEdBQUcsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEdBQUcsMEJBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuRCxHQUFHLENBQUMsTUFBTSxDQUFDLGFBQWEsR0FBRywwQkFBZSxDQUFDLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDcEUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcscUJBQVUsRUFBRSxDQUFDO0FBQ25DLENBQUMsQ0FBQyxDQUFDO0FBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtJQUNiLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNuQixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxlQUFlLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDL0IsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBRTVDLE1BQU0sR0FBRyxHQUFHLElBQUkscUJBQWUsQ0FBQyxtQkFBYSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUN0RyxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUVwQixNQUFNLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXpELHFDQUFxQztJQUNyQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsU0FBUyxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFDMUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQzVELENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLFlBQVksRUFBRSxLQUFLLElBQUksRUFBRTtJQUM1QixNQUFNLGdCQUFnQixHQUFHLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhELE1BQU0sR0FBRyxHQUFHLElBQUkscUJBQWUsQ0FBQyxtQkFBYSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUN0RyxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUVwQixNQUFNLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXpELDBCQUEwQjtJQUMxQixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQ2hFLENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxZQUFZO0lBR2hCLFlBQTZCLFVBQVUsS0FBSztRQUFmLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFGNUIsYUFBUSxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7SUFHL0MsQ0FBQztJQUVNLGNBQWMsQ0FBQyxLQUFnQixFQUFFLEtBQXVCO1FBQzdELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVsQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Y7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3NldE1hbmlmZXN0U2NoZW1hIH0gZnJvbSAnQGF3cy1jZGsvY2RrLWFzc2V0cy1zY2hlbWEnO1xuaW1wb3J0ICogYXMgbW9ja2ZzIGZyb20gJ21vY2stZnMnO1xuaW1wb3J0IHsgQXNzZXRNYW5pZmVzdCwgQXNzZXRQdWJsaXNoaW5nLCBFdmVudFR5cGUsIElQdWJsaXNoUHJvZ3Jlc3MsIElQdWJsaXNoUHJvZ3Jlc3NMaXN0ZW5lciB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgeyBtb2NrQXdzLCBtb2NrZWRBcGlSZXN1bHQsIG1vY2tVcGxvYWQgfSBmcm9tICcuL21vY2stYXdzJztcblxubGV0IGF3czogUmV0dXJuVHlwZTx0eXBlb2YgbW9ja0F3cz47XG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgbW9ja2ZzKHtcbiAgICAnL3NpbXBsZS9jZGsub3V0L2Fzc2V0cy5qc29uJzogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgdmVyc2lvbjogQXNzZXRNYW5pZmVzdFNjaGVtYS5jdXJyZW50VmVyc2lvbigpLFxuICAgICAgZmlsZXM6IHtcbiAgICAgICAgdGhlQXNzZXQ6IHtcbiAgICAgICAgICBzb3VyY2U6IHtcbiAgICAgICAgICAgIHBhdGg6ICdzb21lX2ZpbGUnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGVzdGluYXRpb25zOiB7XG4gICAgICAgICAgICB0aGVEZXN0aW5hdGlvbjE6IHtcbiAgICAgICAgICAgICAgcmVnaW9uOiAndXMtbm9ydGgtNTAnLFxuICAgICAgICAgICAgICBhc3N1bWVSb2xlQXJuOiAnYXJuOmF3czpyb2xlJyxcbiAgICAgICAgICAgICAgYnVja2V0TmFtZTogJ3NvbWVfYnVja2V0JyxcbiAgICAgICAgICAgICAgb2JqZWN0S2V5OiAnc29tZV9rZXknLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRoZURlc3RpbmF0aW9uMjoge1xuICAgICAgICAgICAgICByZWdpb246ICd1cy1ub3J0aC01MCcsXG4gICAgICAgICAgICAgIGFzc3VtZVJvbGVBcm46ICdhcm46YXdzOnJvbGUnLFxuICAgICAgICAgICAgICBidWNrZXROYW1lOiAnc29tZV9idWNrZXQnLFxuICAgICAgICAgICAgICBvYmplY3RLZXk6ICdzb21lX2tleTInLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KSxcbiAgICAnL3NpbXBsZS9jZGsub3V0L3NvbWVfZmlsZSc6ICdGSUxFX0NPTlRFTlRTJyxcbiAgfSk7XG5cbiAgYXdzID0gbW9ja0F3cygpO1xuXG4gIC8vIEFjY2VwdCBhbGwgUzMgdXBsb2FkcyBhcyBuZXdcbiAgYXdzLm1vY2tTMy5nZXRCdWNrZXRMb2NhdGlvbiA9IG1vY2tlZEFwaVJlc3VsdCh7fSk7XG4gIGF3cy5tb2NrUzMubGlzdE9iamVjdHNWMiA9IG1vY2tlZEFwaVJlc3VsdCh7IENvbnRlbnRzOiB1bmRlZmluZWQgfSk7XG4gIGF3cy5tb2NrUzMudXBsb2FkID0gbW9ja1VwbG9hZCgpO1xufSk7XG5cbmFmdGVyRWFjaCgoKSA9PiB7XG4gIG1vY2tmcy5yZXN0b3JlKCk7XG59KTtcblxudGVzdCgndGVzdCBsaXN0ZW5lcicsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgcHJvZ3Jlc3NMaXN0ZW5lciA9IG5ldyBGYWtlTGlzdGVuZXIoKTtcblxuICBjb25zdCBwdWIgPSBuZXcgQXNzZXRQdWJsaXNoaW5nKEFzc2V0TWFuaWZlc3QuZnJvbVBhdGgoJy9zaW1wbGUvY2RrLm91dCcpLCB7IGF3cywgcHJvZ3Jlc3NMaXN0ZW5lciB9KTtcbiAgYXdhaXQgcHViLnB1Ymxpc2goKTtcblxuICBjb25zdCBhbGxNZXNzYWdlcyA9IHByb2dyZXNzTGlzdGVuZXIubWVzc2FnZXMuam9pbignXFxuJyk7XG5cbiAgLy8gTG9nIG1lbnRpb25zIGFzc2V0L2Rlc3RpbmF0aW9uIGlkc1xuICBleHBlY3QoYWxsTWVzc2FnZXMpLnRvQ29udGFpbigndGhlQXNzZXQ6dGhlRGVzdGluYXRpb24xJyk7XG4gIGV4cGVjdChhbGxNZXNzYWdlcykudG9Db250YWluKCd0aGVBc3NldDp0aGVEZXN0aW5hdGlvbjInKTtcbn0pO1xuXG50ZXN0KCd0ZXN0IGFib3J0JywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBwcm9ncmVzc0xpc3RlbmVyID0gbmV3IEZha2VMaXN0ZW5lcih0cnVlKTtcblxuICBjb25zdCBwdWIgPSBuZXcgQXNzZXRQdWJsaXNoaW5nKEFzc2V0TWFuaWZlc3QuZnJvbVBhdGgoJy9zaW1wbGUvY2RrLm91dCcpLCB7IGF3cywgcHJvZ3Jlc3NMaXN0ZW5lciB9KTtcbiAgYXdhaXQgcHViLnB1Ymxpc2goKTtcblxuICBjb25zdCBhbGxNZXNzYWdlcyA9IHByb2dyZXNzTGlzdGVuZXIubWVzc2FnZXMuam9pbignXFxuJyk7XG5cbiAgLy8gV2UgbmV2ZXIgZ2V0IHRvIGFzc2V0IDJcbiAgZXhwZWN0KGFsbE1lc3NhZ2VzKS5ub3QudG9Db250YWluKCd0aGVBc3NldDp0aGVEZXN0aW5hdGlvbjInKTtcbn0pO1xuXG5jbGFzcyBGYWtlTGlzdGVuZXIgaW1wbGVtZW50cyBJUHVibGlzaFByb2dyZXNzTGlzdGVuZXIge1xuICBwdWJsaWMgcmVhZG9ubHkgbWVzc2FnZXMgPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZG9BYm9ydCA9IGZhbHNlKSB7XG4gIH1cblxuICBwdWJsaWMgb25QdWJsaXNoRXZlbnQoX3R5cGU6IEV2ZW50VHlwZSwgZXZlbnQ6IElQdWJsaXNoUHJvZ3Jlc3MpOiB2b2lkIHtcbiAgICB0aGlzLm1lc3NhZ2VzLnB1c2goZXZlbnQubWVzc2FnZSk7XG5cbiAgICBpZiAodGhpcy5kb0Fib3J0KSB7XG4gICAgICBldmVudC5hYm9ydCgpO1xuICAgIH1cbiAgfVxufVxuIl19