"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Separate test file since the archiving module doesn't work well with 'mock-fs'
const cdk_assets_schema_1 = require("@aws-cdk/cdk-assets-schema");
const lib_1 = require("../lib");
const bockfs = require("./bockfs");
const mock_aws_1 = require("./mock-aws");
let aws;
beforeEach(() => {
    bockfs({
        '/simple/cdk.out/assets.json': JSON.stringify({
            version: cdk_assets_schema_1.AssetManifestSchema.currentVersion(),
            files: {
                theAsset: {
                    source: {
                        path: 'some_dir',
                        packaging: 'zip',
                    },
                    destinations: {
                        theDestination: {
                            region: 'us-north-50',
                            assumeRoleArn: 'arn:aws:role',
                            bucketName: 'some_bucket',
                            objectKey: 'some_key',
                        },
                    },
                },
            },
        }),
        '/simple/cdk.out/some_dir/some_file': 'FILE_CONTENTS',
    });
    aws = mock_aws_1.mockAws();
    // Accept all S3 uploads as new
    aws.mockS3.listObjectsV2 = mock_aws_1.mockedApiResult({ Contents: undefined });
    aws.mockS3.upload = mock_aws_1.mockUpload();
});
afterEach(() => {
    bockfs.restore();
});
test('Take a zipped upload', async () => {
    const pub = new lib_1.AssetPublishing(lib_1.AssetManifest.fromPath(bockfs.path('/simple/cdk.out')), { aws });
    await pub.publish();
    expect(aws.mockS3.upload).toHaveBeenCalledWith(expect.objectContaining({
        Bucket: 'some_bucket',
        Key: 'some_key',
        ContentType: 'application/zip',
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiemlwcGluZy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiemlwcGluZy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUZBQWlGO0FBQ2pGLGtFQUFpRTtBQUNqRSxnQ0FBd0Q7QUFDeEQsbUNBQW1DO0FBQ25DLHlDQUFrRTtBQUVsRSxJQUFJLEdBQStCLENBQUM7QUFDcEMsVUFBVSxDQUFDLEdBQUcsRUFBRTtJQUNkLE1BQU0sQ0FBQztRQUNMLDZCQUE2QixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDNUMsT0FBTyxFQUFFLHVDQUFtQixDQUFDLGNBQWMsRUFBRTtZQUM3QyxLQUFLLEVBQUU7Z0JBQ0wsUUFBUSxFQUFFO29CQUNSLE1BQU0sRUFBRTt3QkFDTixJQUFJLEVBQUUsVUFBVTt3QkFDaEIsU0FBUyxFQUFFLEtBQUs7cUJBQ2pCO29CQUNELFlBQVksRUFBRTt3QkFDWixjQUFjLEVBQUU7NEJBQ2QsTUFBTSxFQUFFLGFBQWE7NEJBQ3JCLGFBQWEsRUFBRSxjQUFjOzRCQUM3QixVQUFVLEVBQUUsYUFBYTs0QkFDekIsU0FBUyxFQUFFLFVBQVU7eUJBQ3RCO3FCQUNGO2lCQUNGO2FBQ0Y7U0FDRixDQUFDO1FBQ0Ysb0NBQW9DLEVBQUUsZUFBZTtLQUN0RCxDQUFDLENBQUM7SUFFSCxHQUFHLEdBQUcsa0JBQU8sRUFBRSxDQUFDO0lBRWhCLCtCQUErQjtJQUMvQixHQUFHLENBQUMsTUFBTSxDQUFDLGFBQWEsR0FBRywwQkFBZSxDQUFDLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDcEUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcscUJBQVUsRUFBRSxDQUFDO0FBQ25DLENBQUMsQ0FBQyxDQUFDO0FBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtJQUNiLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNuQixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxzQkFBc0IsRUFBRSxLQUFLLElBQUksRUFBRTtJQUN0QyxNQUFNLEdBQUcsR0FBRyxJQUFJLHFCQUFlLENBQUMsbUJBQWEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBRWpHLE1BQU0sR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRXBCLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztRQUNyRSxNQUFNLEVBQUUsYUFBYTtRQUNyQixHQUFHLEVBQUUsVUFBVTtRQUNmLFdBQVcsRUFBRSxpQkFBaUI7S0FDL0IsQ0FBQyxDQUFDLENBQUM7QUFDTixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFNlcGFyYXRlIHRlc3QgZmlsZSBzaW5jZSB0aGUgYXJjaGl2aW5nIG1vZHVsZSBkb2Vzbid0IHdvcmsgd2VsbCB3aXRoICdtb2NrLWZzJ1xuaW1wb3J0IHsgQXNzZXRNYW5pZmVzdFNjaGVtYSB9IGZyb20gJ0Bhd3MtY2RrL2Nkay1hc3NldHMtc2NoZW1hJztcbmltcG9ydCB7IEFzc2V0TWFuaWZlc3QsIEFzc2V0UHVibGlzaGluZyB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgKiBhcyBib2NrZnMgZnJvbSAnLi9ib2NrZnMnO1xuaW1wb3J0IHsgbW9ja0F3cywgbW9ja2VkQXBpUmVzdWx0LCBtb2NrVXBsb2FkIH0gZnJvbSAnLi9tb2NrLWF3cyc7XG5cbmxldCBhd3M6IFJldHVyblR5cGU8dHlwZW9mIG1vY2tBd3M+O1xuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIGJvY2tmcyh7XG4gICAgJy9zaW1wbGUvY2RrLm91dC9hc3NldHMuanNvbic6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIHZlcnNpb246IEFzc2V0TWFuaWZlc3RTY2hlbWEuY3VycmVudFZlcnNpb24oKSxcbiAgICAgIGZpbGVzOiB7XG4gICAgICAgIHRoZUFzc2V0OiB7XG4gICAgICAgICAgc291cmNlOiB7XG4gICAgICAgICAgICBwYXRoOiAnc29tZV9kaXInLFxuICAgICAgICAgICAgcGFja2FnaW5nOiAnemlwJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlc3RpbmF0aW9uczoge1xuICAgICAgICAgICAgdGhlRGVzdGluYXRpb246IHtcbiAgICAgICAgICAgICAgcmVnaW9uOiAndXMtbm9ydGgtNTAnLFxuICAgICAgICAgICAgICBhc3N1bWVSb2xlQXJuOiAnYXJuOmF3czpyb2xlJyxcbiAgICAgICAgICAgICAgYnVja2V0TmFtZTogJ3NvbWVfYnVja2V0JyxcbiAgICAgICAgICAgICAgb2JqZWN0S2V5OiAnc29tZV9rZXknLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KSxcbiAgICAnL3NpbXBsZS9jZGsub3V0L3NvbWVfZGlyL3NvbWVfZmlsZSc6ICdGSUxFX0NPTlRFTlRTJyxcbiAgfSk7XG5cbiAgYXdzID0gbW9ja0F3cygpO1xuXG4gIC8vIEFjY2VwdCBhbGwgUzMgdXBsb2FkcyBhcyBuZXdcbiAgYXdzLm1vY2tTMy5saXN0T2JqZWN0c1YyID0gbW9ja2VkQXBpUmVzdWx0KHsgQ29udGVudHM6IHVuZGVmaW5lZCB9KTtcbiAgYXdzLm1vY2tTMy51cGxvYWQgPSBtb2NrVXBsb2FkKCk7XG59KTtcblxuYWZ0ZXJFYWNoKCgpID0+IHtcbiAgYm9ja2ZzLnJlc3RvcmUoKTtcbn0pO1xuXG50ZXN0KCdUYWtlIGEgemlwcGVkIHVwbG9hZCcsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgcHViID0gbmV3IEFzc2V0UHVibGlzaGluZyhBc3NldE1hbmlmZXN0LmZyb21QYXRoKGJvY2tmcy5wYXRoKCcvc2ltcGxlL2Nkay5vdXQnKSksIHsgYXdzIH0pO1xuXG4gIGF3YWl0IHB1Yi5wdWJsaXNoKCk7XG5cbiAgZXhwZWN0KGF3cy5tb2NrUzMudXBsb2FkKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgQnVja2V0OiAnc29tZV9idWNrZXQnLFxuICAgIEtleTogJ3NvbWVfa2V5JyxcbiAgICBDb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL3ppcCcsXG4gIH0pKTtcbn0pO1xuIl19